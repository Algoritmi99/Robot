
HWPRobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001cc  00800200  000059f0  00005a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000059f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a04  008003cc  008003cc  00005c50  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005c50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005cac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a8  00000000  00000000  00005cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000070cc  00000000  00000000  00006198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002674  00000000  00000000  0000d264  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038a1  00000000  00000000  0000f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fcc  00000000  00000000  0001317c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019d0  00000000  00000000  00014148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006041  00000000  00000000  00015b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000568  00000000  00000000  0001bb59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__ctors_end>
       4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
       8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
       c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      10:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      14:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      18:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      1c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      20:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      24:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <__vector_9>
      28:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      2c:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__vector_11>
      30:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      34:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      38:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      3c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      40:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      44:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      48:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      4c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      50:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      54:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      58:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      5c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      60:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      64:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      68:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      6c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      70:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      74:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__vector_29>
      78:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      7c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      80:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      84:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      88:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      8c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      90:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_36>
      94:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_37>
      98:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      9c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      a0:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      a4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      a8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      ac:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      b0:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      b4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      b8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      bc:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_47>
      c0:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      c4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      c8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      cc:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      d0:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      d4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      d8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      dc:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      e0:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      e4:	f9 11       	cpse	r31, r9
      e6:	ff 11       	cpse	r31, r15
      e8:	09 12       	cpse	r0, r25
      ea:	12 12       	cpse	r1, r18
      ec:	32 12       	cpse	r3, r18
      ee:	38 12       	cpse	r3, r24
      f0:	9d 11       	cpse	r25, r13
      f2:	bd 11       	cpse	r27, r13
      f4:	e5 11       	cpse	r30, r5
      f6:	c8 14       	cp	r12, r8
      f8:	bb 14       	cp	r11, r11
      fa:	aa 14       	cp	r10, r10
      fc:	9d 14       	cp	r9, r13
      fe:	90 14       	cp	r9, r0
     100:	6d 14       	cp	r6, r13
     102:	b5 14       	cp	r11, r5
     104:	07 2c       	mov	r0, r7
     106:	7a a5       	ldd	r23, Y+42	; 0x2a
     108:	ba 6c       	ori	r27, 0xCA	; 202
     10a:	c5 90       	lpm	r12, Z+
     10c:	da 3b       	cpi	r29, 0xBA	; 186
     10e:	93 65       	ori	r25, 0x53	; 83
     110:	fc 8b       	std	Y+20, r31	; 0x14
     112:	bc 53       	subi	r27, 0x3C	; 60
     114:	f8 10       	cpse	r15, r8
     116:	fd 3c       	cpi	r31, 0xCD	; 205
     118:	56 92       	lac	Z, r5
     11a:	83 4d       	sbci	r24, 0xD3	; 211
     11c:	bd 87       	std	Y+13, r27	; 0x0d
     11e:	9d 3a       	cpi	r25, 0xAD	; 173
     120:	b6 3d       	cpi	r27, 0xD6	; 214
     122:	cb c9       	rjmp	.-3178   	; 0xfffff4ba <__eeprom_end+0xff7ef4ba>
     124:	bf 5b       	subi	r27, 0xBF	; 191
     126:	be 73       	andi	r27, 0x3E	; 62
     128:	da 0f       	add	r29, r26
     12a:	c9 3f       	cpi	r28, 0xF9	; 249
     12c:	05 a8       	ldd	r0, Z+53	; 0x35
     12e:	4c cd       	rjmp	.-1384   	; 0xfffffbc8 <__eeprom_end+0xff7efbc8>
     130:	b2 d4       	rcall	.+2404   	; 0xa96 <mazeRunner+0x268>
     132:	4e b9       	out	0x0e, r20	; 14
     134:	38 36       	cpi	r19, 0x68	; 104
     136:	a9 02       	muls	r26, r25
     138:	0c 50       	subi	r16, 0x0C	; 12
     13a:	b9 91       	ld	r27, Y+
     13c:	86 88       	ldd	r8, Z+22	; 0x16
     13e:	08 3c       	cpi	r16, 0xC8	; 200
     140:	a6 aa       	std	Z+54, r10	; 0x36
     142:	aa 2a       	or	r10, r26
     144:	be 00       	.word	0x00be	; ????
     146:	00 00       	nop
     148:	80 3f       	cpi	r24, 0xF0	; 240
     14a:	06 64       	ori	r16, 0x46	; 70
     14c:	ec 1b       	sub	r30, r28
     14e:	3c 04       	cpc	r3, r12
     150:	bc 16       	cp	r11, r28
     152:	3e 3b       	cpi	r19, 0xBE	; 190
     154:	e5 b9       	out	0x05, r30	; 5
     156:	3c c9       	rjmp	.-3464   	; 0xfffff3d0 <__eeprom_end+0xff7ef3d0>
     158:	3c 37       	cpi	r19, 0x7C	; 124
     15a:	c2 9e       	mul	r12, r18
     15c:	5a 3d       	cpi	r21, 0xDA	; 218
     15e:	66 04       	cpc	r6, r6
     160:	98 08       	sbc	r9, r8
     162:	3e ea       	ldi	r19, 0xAE	; 174
     164:	69 aa       	std	Y+49, r6	; 0x31
     166:	aa 3e       	cpi	r26, 0xEA	; 234
     168:	00 00       	nop
     16a:	00 80       	ld	r0, Z
     16c:	3f 00       	.word	0x003f	; ????

0000016e <__trampolines_end>:
     16e:	6e 61       	ori	r22, 0x1E	; 30
     170:	6e 00       	.word	0x006e	; ????

00000172 <__c.2332>:
     172:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     182:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     192:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1a2:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1b2:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1c2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1d2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1e2:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1f2:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     202:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     212:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     222:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     232:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     242:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     252:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     262:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000270 <__c.2811>:
     270:	42 6f 6f 74 65 64 00                                Booted.

00000277 <__c.2515>:
     277:	55 6e 61 62 6c 65 20 74 6f 20 6c 6f 63 61 74 65     Unable to locate
     287:	20 73 65 67 6d 65 6e 74 20 66 6f 72 20 6c 6f 6f      segment for loo
     297:	6b 61 68 65 61 64 20 70 6f 69 6e 74 00              kahead point.

000002a4 <__c.2499>:
     2a4:	45 6e 64 20 6f 66 20 70 61 74 68 20 72 65 61 63     End of path reac
     2b4:	68 65 64 00                                         hed.

000002b8 <__c.2497>:
     2b8:	55 6e 61 62 6c 65 20 74 6f 20 6c 6f 63 61 74 65     Unable to locate
     2c8:	20 73 65 67 6d 65 6e 74 20 66 6f 72 20 6f 72 74      segment for ort
     2d8:	68 6f 67 6f 6e 61 6c 20 70 72 6f 6a 65 63 74 69     hogonal projecti
     2e8:	6f 6e 00                                            on.

000002eb <__c.2461>:
     2eb:	50 61 74 68 20 6f 66 20 25 75 20 70 6f 69 6e 74     Path of %u point
     2fb:	73 2c 20 31 2e 28 25 69 2c 25 69 29 20 32 2e 28     s, 1.(%i,%i) 2.(
     30b:	25 69 2c 25 69 29 20 2e 2e 2e 00                    %i,%i) ....

00000316 <__c.2453>:
     316:	46 6f 6c 6c 6f 77 65 72 20 70 61 72 61 6d 65 74     Follower paramet
     326:	65 72 73 20 73 65 74 00                             ers set.

0000032e <__c.2446>:
     32e:	46 6f 6c 6c 6f 77 65 72 20 72 65 73 65 74 00        Follower reset.

0000033d <__c.2444>:
     33d:	46 6f 6c 6c 6f 77 65 72 20 70 61 75 73 65 64 00     Follower paused.

0000034d <__c.2442>:
     34d:	46 6f 6c 6c 6f 77 65 72 20 73 74 61 72 74 65 64     Follower started
	...

0000035e <__c.2440>:
     35e:	4e 6f 20 70 61 74 68 20 61 76 61 69 6c 61 62 6c     No path availabl
     36e:	65 00                                               e.

00000370 <__c.2438>:
     370:	50 61 74 68 20 6f 66 20 25 75 20 70 6f 69 6e 74     Path of %u point
     380:	73 2c 20 31 2e 28 25 69 2c 25 69 29 20 32 2e 28     s, 1.(%i,%i) 2.(
     390:	25 69 2c 25 69 29 20 2e 2e 2e 00                    %i,%i) ....

0000039b <__c.2436>:
     39b:	46 6f 6c 6c 6f 77 65 72 3a 20 6f 75 74 20 6f 66     Follower: out of
     3ab:	20 6d 65 6d 6f 72 79 20 6f 72 20 70 61 74 68 20      memory or path 
     3bb:	68 61 73 20 74 6f 6f 20 66 65 77 20 70 6f 69 6e     has too few poin
     3cb:	74 73 00                                            ts.

000003ce <__ctors_end>:
     3ce:	11 24       	eor	r1, r1
     3d0:	1f be       	out	0x3f, r1	; 63
     3d2:	cf ef       	ldi	r28, 0xFF	; 255
     3d4:	d1 e2       	ldi	r29, 0x21	; 33
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	cd bf       	out	0x3d, r28	; 61

000003da <__do_copy_data>:
     3da:	13 e0       	ldi	r17, 0x03	; 3
     3dc:	a0 e0       	ldi	r26, 0x00	; 0
     3de:	b2 e0       	ldi	r27, 0x02	; 2
     3e0:	e0 ef       	ldi	r30, 0xF0	; 240
     3e2:	f9 e5       	ldi	r31, 0x59	; 89
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	0b bf       	out	0x3b, r16	; 59
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <__do_copy_data+0x14>
     3ea:	07 90       	elpm	r0, Z+
     3ec:	0d 92       	st	X+, r0
     3ee:	ac 3c       	cpi	r26, 0xCC	; 204
     3f0:	b1 07       	cpc	r27, r17
     3f2:	d9 f7       	brne	.-10     	; 0x3ea <__do_copy_data+0x10>

000003f4 <__do_clear_bss>:
     3f4:	2d e0       	ldi	r18, 0x0D	; 13
     3f6:	ac ec       	ldi	r26, 0xCC	; 204
     3f8:	b3 e0       	ldi	r27, 0x03	; 3
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <.do_clear_bss_start>

000003fc <.do_clear_bss_loop>:
     3fc:	1d 92       	st	X+, r1

000003fe <.do_clear_bss_start>:
     3fe:	a0 3d       	cpi	r26, 0xD0	; 208
     400:	b2 07       	cpc	r27, r18
     402:	e1 f7       	brne	.-8      	; 0x3fc <.do_clear_bss_loop>
     404:	0e 94 44 13 	call	0x2688	; 0x2688 <main>
     408:	0c 94 f6 2c 	jmp	0x59ec	; 0x59ec <_exit>

0000040c <__bad_interrupt>:
     40c:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__vector_default>

00000410 <__vector_47>:
*/


.global TIMER5_COMPA_vect
TIMER5_COMPA_vect:
    push r2
     410:	2f 92       	push	r2
    in r2, _SFR_IO_ADDR(SREG)
     412:	2f b6       	in	r2, 0x3f	; 63
    push YL
     414:	cf 93       	push	r28
    push YH
     416:	df 93       	push	r29
    push ZL
     418:	ef 93       	push	r30
    push ZH
     41a:	ff 93       	push	r31

    // timer 5 has reached the TOP value defined by OCR5A, i.e. 1ms has passed

    // ++timeTask_time_ms;
    lds ZL, timeTask_time_ms
     41c:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <timeTask_time_ms>
    lds ZH, timeTask_time_ms + 1
     420:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <timeTask_time_ms+0x1>
    // increment ZH:ZL by one
    adiw ZL, 1
     424:	31 96       	adiw	r30, 0x01	; 1
    sts timeTask_time_ms + 1, ZH
     426:	f0 93 e6 03 	sts	0x03E6, r31	; 0x8003e6 <timeTask_time_ms+0x1>
    sts timeTask_time_ms, ZL
     42a:	e0 93 e5 03 	sts	0x03E5, r30	; 0x8003e5 <timeTask_time_ms>

    // uint8_t idx = (timeTask_idx + 1) & 1;
    lds ZL, timeTask_idx
     42e:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <timeTask_idx>
    inc ZL
     432:	e3 95       	inc	r30
    andi ZL, 0x01
     434:	e1 70       	andi	r30, 0x01	; 1

    // timeTask_idx = idx;
    sts timeTask_idx, ZL
     436:	e0 93 2c 02 	sts	0x022C, r30	; 0x80022c <timeTask_idx>

    // timeTask_uptime[idx] += 2;
    // load ZH:ZL with idx*2
    ldi ZH, 0x00
     43a:	f0 e0       	ldi	r31, 0x00	; 0
    add ZL, ZL
     43c:	ee 0f       	add	r30, r30
    // calculate address of timeTask_uptime[idx] in ZH:ZL
    subi ZL, lo8(-(timeTask_uptime))
     43e:	e3 5d       	subi	r30, 0xD3	; 211
    sbci ZH, hi8(-(timeTask_uptime))
     440:	fd 4f       	sbci	r31, 0xFD	; 253
    // load uint16_t at timeTask_uptime[idx]
    ld YL, Z
     442:	c0 81       	ld	r28, Z
    ldd YH, Z+1
     444:	d1 81       	ldd	r29, Z+1	; 0x01
    // increment YH:YL by 2
    adiw YL, 2
     446:	22 96       	adiw	r28, 0x02	; 2
    // store back
    std Z+1, YH
     448:	d1 83       	std	Z+1, r29	; 0x01
    st Z, YL
     44a:	c0 83       	st	Z, r28

    // if updated value of timeTask_uptime[idx] is odd, jump to end of this ISR
    // otherwise, start a conversion, i.e. every 2 milliseconds
    sbrc YL, 0
     44c:	c0 fd       	sbrc	r28, 0
    rjmp TIMER5_COMPA_FINISH
     44e:	07 c0       	rjmp	.+14     	; 0x45e <TIMER5_COMPA_FINISH>

    // if ADC is disabled, jump to end of this ISR
    lds ZH, ADC_enabled
     450:	f0 91 ec 03 	lds	r31, 0x03EC	; 0x8003ec <ADC_enabled>
    cpi ZH, 0
     454:	f0 30       	cpi	r31, 0x00	; 0
    breq TIMER5_COMPA_FINISH
     456:	19 f0       	breq	.+6      	; 0x45e <TIMER5_COMPA_FINISH>

    // start ADC conversion of the next channel using the configuration described
    // by ADC_ADCSRA_CONFIG (see io/adc/adc.h for details)
    ldi ZL, ADC_ADCSRA_CONFIG
     458:	ef ec       	ldi	r30, 0xCF	; 207
    sts _SFR_MEM_ADDR(ADCSRA), ZL
     45a:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

0000045e <TIMER5_COMPA_FINISH>:

TIMER5_COMPA_FINISH:
    pop ZH
     45e:	ff 91       	pop	r31
    pop ZL
     460:	ef 91       	pop	r30
    pop YH
     462:	df 91       	pop	r29
    pop YL
     464:	cf 91       	pop	r28
    out _SFR_IO_ADDR(SREG), r2
     466:	2f be       	out	0x3f, r2	; 63
    pop r2
     468:	2f 90       	pop	r2
    reti
     46a:	18 95       	reti

0000046c <__vector_36>:
    uart_rxISR(0)
    uart_txISR(0)
#endif

#ifdef USE_UART1
    uart_rxISR(1)
     46c:	2f 92       	push	r2
     46e:	2f b6       	in	r2, 0x3f	; 63
     470:	2f 93       	push	r18
     472:	ef 93       	push	r30
     474:	ff 93       	push	r31
     476:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     47a:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <uart1>
     47e:	e3 95       	inc	r30
     480:	ef 77       	andi	r30, 0x7F	; 127
     482:	f0 91 e8 03 	lds	r31, 0x03E8	; 0x8003e8 <uart1+0x1>
     486:	fe 17       	cp	r31, r30
     488:	61 f0       	breq	.+24     	; 0x4a2 <RX_BUF_OVERFLOW1>
     48a:	e0 93 e7 03 	sts	0x03E7, r30	; 0x8003e7 <uart1>
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	e2 5f       	subi	r30, 0xF2	; 242
     492:	f3 4f       	sbci	r31, 0xF3	; 243
     494:	20 83       	st	Z, r18

00000496 <RX_ISR_END1>:
     496:	ff 91       	pop	r31
     498:	ef 91       	pop	r30
     49a:	2f 91       	pop	r18
     49c:	2f be       	out	0x3f, r2	; 63
     49e:	2f 90       	pop	r2
     4a0:	18 95       	reti

000004a2 <RX_BUF_OVERFLOW1>:
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	20 93 eb 03 	sts	0x03EB, r18	; 0x8003eb <uart1+0x4>
     4a8:	f6 cf       	rjmp	.-20     	; 0x496 <RX_ISR_END1>

000004aa <__vector_37>:
    uart_txISR(1)
     4aa:	2f 92       	push	r2
     4ac:	2f b6       	in	r2, 0x3f	; 63
     4ae:	ef 93       	push	r30
     4b0:	ff 93       	push	r31
     4b2:	f0 91 e9 03 	lds	r31, 0x03E9	; 0x8003e9 <uart1+0x2>
     4b6:	e0 91 ea 03 	lds	r30, 0x03EA	; 0x8003ea <uart1+0x3>
     4ba:	fe 17       	cp	r31, r30
     4bc:	79 f0       	breq	.+30     	; 0x4dc <TX_ISR_DISABLE_UDRE1>
     4be:	e3 95       	inc	r30
     4c0:	ef 7f       	andi	r30, 0xFF	; 255
     4c2:	e0 93 ea 03 	sts	0x03EA, r30	; 0x8003ea <uart1+0x3>
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	e2 57       	subi	r30, 0x72	; 114
     4ca:	f3 4f       	sbci	r31, 0xF3	; 243
     4cc:	e0 81       	ld	r30, Z
     4ce:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

000004d2 <TX_ISR_END1>:
     4d2:	ff 91       	pop	r31
     4d4:	ef 91       	pop	r30
     4d6:	2f be       	out	0x3f, r2	; 63
     4d8:	2f 90       	pop	r2
     4da:	18 95       	reti

000004dc <TX_ISR_DISABLE_UDRE1>:
     4dc:	e8 e9       	ldi	r30, 0x98	; 152
     4de:	e0 93 c9 00 	sts	0x00C9, r30	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     4e2:	f7 cf       	rjmp	.-18     	; 0x4d2 <TX_ISR_END1>

000004e4 <__vector_29>:
*/


.global ADC_vect
ADC_vect:
    push r2
     4e4:	2f 92       	push	r2
    in r2, _SFR_IO_ADDR(SREG)
     4e6:	2f b6       	in	r2, 0x3f	; 63
    push r23
     4e8:	7f 93       	push	r23
    push r24
     4ea:	8f 93       	push	r24
    push r25
     4ec:	9f 93       	push	r25
    push YL
     4ee:	cf 93       	push	r28
    push YH
     4f0:	df 93       	push	r29
    push ZL
     4f2:	ef 93       	push	r30
    push ZH
     4f4:	ff 93       	push	r31

    // load currentChannel
    lds YL, currentChannel
     4f6:	c0 91 31 02 	lds	r28, 0x0231	; 0x800231 <currentChannel>
    lds YH, currentChannel + 1
     4fa:	d0 91 32 02 	lds	r29, 0x0232	; 0x800232 <currentChannel+0x1>
    // make a copy of currentChannel for later use
    movw ZL, YL
     4fe:	fe 01       	movw	r30, r28

    // if (++currentChannel != channels + CHANNELCOUNT)
    subi ZL, lo8(-(8 + 2 * ADC_FILTER_SIZE))
     500:	e6 5f       	subi	r30, 0xF6	; 246
    sbci ZH, hi8(-(8 + 2 * ADC_FILTER_SIZE))
     502:	ff 4f       	sbci	r31, 0xFF	; 255
    ldi r24, hi8(channels + ADC_CHANNEL_COUNT * (8 + 2 * ADC_FILTER_SIZE))
     504:	8d e0       	ldi	r24, 0x0D	; 13
    cpi ZL, lo8(channels + ADC_CHANNEL_COUNT * (8 + 2 * ADC_FILTER_SIZE))
     506:	ec 3a       	cpi	r30, 0xAC	; 172
    cpc ZH, r24
     508:	f8 07       	cpc	r31, r24
    breq ADC_RESET_CURRENT_CHANNEL
     50a:	99 f1       	breq	.+102    	; 0x572 <ADC_RESET_CURRENT_CHANNEL>

0000050c <ADC_SET_CHANNEL>:

ADC_SET_CHANNEL:
    // ADMUX  = currentChannel->admux;
    // ADMUX is set for the next conversion as early as possible to give the
    // voltage some time to stabilize
    ldd r24, Z+1
     50c:	81 81       	ldd	r24, Z+1	; 0x01
    sts _SFR_MEM_ADDR(ADMUX), r24
     50e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

    // ADCSRB  = currentChannel->adcsrb;
    ldd r24, Z+2
     512:	82 81       	ldd	r24, Z+2	; 0x02
    sts _SFR_MEM_ADDR(ADCSRB), r24
     514:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>

    sts currentChannel + 1, ZH
     518:	f0 93 32 02 	sts	0x0232, r31	; 0x800232 <currentChannel+0x1>
    sts currentChannel, ZL
     51c:	e0 93 31 02 	sts	0x0231, r30	; 0x800231 <currentChannel>
    // Note: YH:YL contains "old" value of currentChannel to which result
    // of conversion corresponds to.

    // move position index in history array to next element
    // uint8_t pos = (currentChannel->pos + 1) & (ADC_FILTER_SIZE - 1);
    ld ZL, Y
     520:	e8 81       	ld	r30, Y
    inc ZL
     522:	e3 95       	inc	r30
    andi ZL, ADC_FILTER_SIZE-1
     524:	e0 70       	andi	r30, 0x00	; 0

    // currentChannel->pos = pos;
    st  Y, ZL
     526:	e8 83       	st	Y, r30

    // update sum of samples and history element
    // currentChannel->sum = currentChannel->sum - currentChannel->history[pos] + value;

    // calculate address of (currentChannel->history[pos]) - 8 in ZH:ZL
    eor ZH, ZH
     528:	ff 27       	eor	r31, r31
    add ZL, ZL // ZH:ZL = pos*2
     52a:	ee 0f       	add	r30, r30
    adc ZH, ZH
     52c:	ff 1f       	adc	r31, r31
    add ZL, YL // add address of currentChannel to ZH:ZL
     52e:	ec 0f       	add	r30, r28
    adc ZH, YH
     530:	fd 1f       	adc	r31, r29
    // interleaved execution of:
    //   load currentChannel->history[pos] (into r23,r24)
    //   uint16_t value = ADC; // read 10 bit ADC value (into r25, r25)
    //   currentChannel->history[pos] = value;
    //   subtract currentChannel->history[pos] - value
    ldd r23, Z+8
     532:	70 85       	ldd	r23, Z+8	; 0x08
    lds r25, _SFR_MEM_ADDR(ADCL)
     534:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    std Z+8, r25
     538:	90 87       	std	Z+8, r25	; 0x08
    sub r23, r25
     53a:	79 1b       	sub	r23, r25

    ldd r24, Z+9
     53c:	81 85       	ldd	r24, Z+9	; 0x09
    lds r25, _SFR_MEM_ADDR(ADCH)
     53e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    std Z+9, r25
     542:	91 87       	std	Z+9, r25	; 0x09
    sbc r24, r25
     544:	89 0b       	sbc	r24, r25
    // result of subtraction as int16_t in r24:r23

    // convert int16_t to 24bit, result in r25:r24:r23
    mov r25, r24
     546:	98 2f       	mov	r25, r24
    add r25, r25
     548:	99 0f       	add	r25, r25
    sbc r25, r25
     54a:	99 0b       	sbc	r25, r25

    // interleaved execution of:
    //   load currentChannel->sum (24 bits only)
    //   subtract difference (history[pos]-value) from currentChannel->sum
    //   store updated value to currentChannel->sum
    ldd ZL, Y+4
     54c:	ec 81       	ldd	r30, Y+4	; 0x04
    sub ZL, r23
     54e:	e7 1b       	sub	r30, r23
    std Y+4, ZL
     550:	ec 83       	std	Y+4, r30	; 0x04

    ldd ZL, Y+5
     552:	ed 81       	ldd	r30, Y+5	; 0x05
    sbc ZL, r24
     554:	e8 0b       	sbc	r30, r24
    std Y+5, ZL
     556:	ed 83       	std	Y+5, r30	; 0x05

    ldd ZL, Y+6
     558:	ee 81       	ldd	r30, Y+6	; 0x06
    sbc ZL, r25
     55a:	e9 0b       	sbc	r30, r25
    std Y+6, ZL
     55c:	ee 83       	std	Y+6, r30	; 0x06

    // starting a conversion is done in TIMER5_COMPA_vect
    // (see tools/timeTask/timeTask_isr.S)

    pop ZH
     55e:	ff 91       	pop	r31
    pop ZL
     560:	ef 91       	pop	r30
    pop YH
     562:	df 91       	pop	r29
    pop YL
     564:	cf 91       	pop	r28
    pop r25
     566:	9f 91       	pop	r25
    pop r24
     568:	8f 91       	pop	r24
    pop r23
     56a:	7f 91       	pop	r23
    out _SFR_IO_ADDR(SREG), r2
     56c:	2f be       	out	0x3f, r2	; 63
    pop r2
     56e:	2f 90       	pop	r2
    reti
     570:	18 95       	reti

00000572 <ADC_RESET_CURRENT_CHANNEL>:

ADC_RESET_CURRENT_CHANNEL:
    // currentChannel = &channels[0];
    ldi ZL, lo8(channels)
     572:	ee e8       	ldi	r30, 0x8E	; 142
    ldi ZH, hi8(channels)
     574:	fd e0       	ldi	r31, 0x0D	; 13
    rjmp ADC_SET_CHANNEL
     576:	ca cf       	rjmp	.-108    	; 0x50c <ADC_SET_CHANNEL>

00000578 <calculateDriveCommand>:
	return sqrt((a.x * a.x) + (a.y * a.y));
}


//drive in a curve
void calculateDriveCommand(Pose_t* currentPose, const FPoint_t* lookahead){
     578:	4f 92       	push	r4
     57a:	5f 92       	push	r5
     57c:	6f 92       	push	r6
     57e:	7f 92       	push	r7
     580:	8f 92       	push	r8
     582:	9f 92       	push	r9
     584:	af 92       	push	r10
     586:	bf 92       	push	r11
     588:	cf 92       	push	r12
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	60 97       	sbiw	r28, 0x10	; 16
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	9e 83       	std	Y+6, r25	; 0x06
     5aa:	8d 83       	std	Y+5, r24	; 0x05
     5ac:	8b 01       	movw	r16, r22
	
	vector dir = {
		cos(currentPose->theta),
     5ae:	fc 01       	movw	r30, r24
     5b0:	c0 84       	ldd	r12, Z+8	; 0x08
     5b2:	d1 84       	ldd	r13, Z+9	; 0x09
     5b4:	e2 84       	ldd	r14, Z+10	; 0x0a
     5b6:	f3 84       	ldd	r15, Z+11	; 0x0b
     5b8:	c7 01       	movw	r24, r14
     5ba:	b6 01       	movw	r22, r12
     5bc:	0e 94 35 22 	call	0x446a	; 0x446a <cos>
     5c0:	4b 01       	movw	r8, r22
     5c2:	5c 01       	movw	r10, r24
		sin(currentPose->theta)
     5c4:	c7 01       	movw	r24, r14
     5c6:	b6 01       	movw	r22, r12
     5c8:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <sin>
     5cc:	6b 01       	movw	r12, r22
     5ce:	7c 01       	movw	r14, r24
	};
	
	vector dirToBe = {
		lookahead->x - currentPose->x,
     5d0:	ed 81       	ldd	r30, Y+5	; 0x05
     5d2:	fe 81       	ldd	r31, Y+6	; 0x06
     5d4:	20 81       	ld	r18, Z
     5d6:	31 81       	ldd	r19, Z+1	; 0x01
     5d8:	42 81       	ldd	r20, Z+2	; 0x02
     5da:	53 81       	ldd	r21, Z+3	; 0x03
     5dc:	f8 01       	movw	r30, r16
     5de:	60 81       	ld	r22, Z
     5e0:	71 81       	ldd	r23, Z+1	; 0x01
     5e2:	82 81       	ldd	r24, Z+2	; 0x02
     5e4:	93 81       	ldd	r25, Z+3	; 0x03
     5e6:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
     5ea:	69 83       	std	Y+1, r22	; 0x01
     5ec:	7a 83       	std	Y+2, r23	; 0x02
     5ee:	8b 83       	std	Y+3, r24	; 0x03
     5f0:	9c 83       	std	Y+4, r25	; 0x04
		lookahead->y - currentPose->y
     5f2:	ed 81       	ldd	r30, Y+5	; 0x05
     5f4:	fe 81       	ldd	r31, Y+6	; 0x06
     5f6:	24 81       	ldd	r18, Z+4	; 0x04
     5f8:	35 81       	ldd	r19, Z+5	; 0x05
     5fa:	46 81       	ldd	r20, Z+6	; 0x06
     5fc:	57 81       	ldd	r21, Z+7	; 0x07
     5fe:	f8 01       	movw	r30, r16
     600:	64 81       	ldd	r22, Z+4	; 0x04
     602:	75 81       	ldd	r23, Z+5	; 0x05
     604:	86 81       	ldd	r24, Z+6	; 0x06
     606:	97 81       	ldd	r25, Z+7	; 0x07
     608:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
     60c:	6d 83       	std	Y+5, r22	; 0x05
     60e:	7e 83       	std	Y+6, r23	; 0x06
     610:	8f 83       	std	Y+7, r24	; 0x07
     612:	98 87       	std	Y+8, r25	; 0x08
double scalarProduct(vector a, vector b){
	return (a.x * b.x) + (a.y * b.y);
}

double vectorLength(vector a){
	return sqrt((a.x * a.x) + (a.y * a.y));
     614:	a5 01       	movw	r20, r10
     616:	94 01       	movw	r18, r8
     618:	c5 01       	movw	r24, r10
     61a:	b4 01       	movw	r22, r8
     61c:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     620:	2b 01       	movw	r4, r22
     622:	3c 01       	movw	r6, r24
     624:	a7 01       	movw	r20, r14
     626:	96 01       	movw	r18, r12
     628:	c7 01       	movw	r24, r14
     62a:	b6 01       	movw	r22, r12
     62c:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     630:	9b 01       	movw	r18, r22
     632:	ac 01       	movw	r20, r24
     634:	c3 01       	movw	r24, r6
     636:	b2 01       	movw	r22, r4
     638:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     63c:	0e 94 6e 25 	call	0x4adc	; 0x4adc <sqrt>
     640:	6d 87       	std	Y+13, r22	; 0x0d
     642:	7e 87       	std	Y+14, r23	; 0x0e
     644:	8f 87       	std	Y+15, r24	; 0x0f
     646:	98 8b       	std	Y+16, r25	; 0x10
     648:	29 81       	ldd	r18, Y+1	; 0x01
     64a:	3a 81       	ldd	r19, Y+2	; 0x02
     64c:	4b 81       	ldd	r20, Y+3	; 0x03
     64e:	5c 81       	ldd	r21, Y+4	; 0x04
     650:	ca 01       	movw	r24, r20
     652:	b9 01       	movw	r22, r18
     654:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     658:	2b 01       	movw	r4, r22
     65a:	3c 01       	movw	r6, r24
     65c:	2d 81       	ldd	r18, Y+5	; 0x05
     65e:	3e 81       	ldd	r19, Y+6	; 0x06
     660:	4f 81       	ldd	r20, Y+7	; 0x07
     662:	58 85       	ldd	r21, Y+8	; 0x08
     664:	ca 01       	movw	r24, r20
     666:	b9 01       	movw	r22, r18
     668:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     66c:	9b 01       	movw	r18, r22
     66e:	ac 01       	movw	r20, r24
     670:	c3 01       	movw	r24, r6
     672:	b2 01       	movw	r22, r4
     674:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     678:	0e 94 6e 25 	call	0x4adc	; 0x4adc <sqrt>
     67c:	69 87       	std	Y+9, r22	; 0x09
     67e:	7a 87       	std	Y+10, r23	; 0x0a
     680:	8b 87       	std	Y+11, r24	; 0x0b
     682:	9c 87       	std	Y+12, r25	; 0x0c
	//double deltaTheta = asin(fabs(aCruzb) / (vectorLength(dir) * vectorLength(dirToBe)));
	
	
	double aCruzb = (dir.x * dirToBe.y) - (dir.y * dirToBe.x);
	double arg = (dir.x*dirToBe.x + dir.y * dirToBe.y) / (vectorLength(dir) * vectorLength(dirToBe));
	double deltaTheta = acos(arg);
     684:	29 81       	ldd	r18, Y+1	; 0x01
     686:	3a 81       	ldd	r19, Y+2	; 0x02
     688:	4b 81       	ldd	r20, Y+3	; 0x03
     68a:	5c 81       	ldd	r21, Y+4	; 0x04
     68c:	c5 01       	movw	r24, r10
     68e:	b4 01       	movw	r22, r8
     690:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     694:	2b 01       	movw	r4, r22
     696:	3c 01       	movw	r6, r24
     698:	2d 81       	ldd	r18, Y+5	; 0x05
     69a:	3e 81       	ldd	r19, Y+6	; 0x06
     69c:	4f 81       	ldd	r20, Y+7	; 0x07
     69e:	58 85       	ldd	r21, Y+8	; 0x08
     6a0:	c7 01       	movw	r24, r14
     6a2:	b6 01       	movw	r22, r12
     6a4:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     6a8:	9b 01       	movw	r18, r22
     6aa:	ac 01       	movw	r20, r24
     6ac:	c3 01       	movw	r24, r6
     6ae:	b2 01       	movw	r22, r4
     6b0:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     6b4:	2b 01       	movw	r4, r22
     6b6:	3c 01       	movw	r6, r24
     6b8:	2d 85       	ldd	r18, Y+13	; 0x0d
     6ba:	3e 85       	ldd	r19, Y+14	; 0x0e
     6bc:	4f 85       	ldd	r20, Y+15	; 0x0f
     6be:	58 89       	ldd	r21, Y+16	; 0x10
     6c0:	69 85       	ldd	r22, Y+9	; 0x09
     6c2:	7a 85       	ldd	r23, Y+10	; 0x0a
     6c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     6c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     6c8:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     6cc:	9b 01       	movw	r18, r22
     6ce:	ac 01       	movw	r20, r24
     6d0:	c3 01       	movw	r24, r6
     6d2:	b2 01       	movw	r22, r4
     6d4:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
     6d8:	0e 94 b2 21 	call	0x4364	; 0x4364 <acos>
     6dc:	2b 01       	movw	r4, r22
     6de:	3c 01       	movw	r6, r24
	
	
	if (aCruzb < 0){
     6e0:	2d 81       	ldd	r18, Y+5	; 0x05
     6e2:	3e 81       	ldd	r19, Y+6	; 0x06
     6e4:	4f 81       	ldd	r20, Y+7	; 0x07
     6e6:	58 85       	ldd	r21, Y+8	; 0x08
     6e8:	c5 01       	movw	r24, r10
     6ea:	b4 01       	movw	r22, r8
     6ec:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     6f0:	4b 01       	movw	r8, r22
     6f2:	5c 01       	movw	r10, r24
     6f4:	29 81       	ldd	r18, Y+1	; 0x01
     6f6:	3a 81       	ldd	r19, Y+2	; 0x02
     6f8:	4b 81       	ldd	r20, Y+3	; 0x03
     6fa:	5c 81       	ldd	r21, Y+4	; 0x04
     6fc:	c7 01       	movw	r24, r14
     6fe:	b6 01       	movw	r22, r12
     700:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     704:	9b 01       	movw	r18, r22
     706:	ac 01       	movw	r20, r24
     708:	c5 01       	movw	r24, r10
     70a:	b4 01       	movw	r22, r8
     70c:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	a9 01       	movw	r20, r18
     716:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
     71a:	87 fd       	sbrc	r24, 7
     71c:	83 c0       	rjmp	.+262    	; 0x824 <calculateDriveCommand+0x2ac>
	}
	
	
	double factor = speedV / 1000;
	
	if (fabs(deltaTheta) <= (M_PI / 3)){
     71e:	22 e9       	ldi	r18, 0x92	; 146
     720:	3a e0       	ldi	r19, 0x0A	; 10
     722:	46 e8       	ldi	r20, 0x86	; 134
     724:	5f e3       	ldi	r21, 0x3F	; 63
     726:	c3 01       	movw	r24, r6
     728:	b2 01       	movw	r22, r4
     72a:	9f 77       	andi	r25, 0x7F	; 127
     72c:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
     730:	18 16       	cp	r1, r24
     732:	0c f0       	brlt	.+2      	; 0x736 <calculateDriveCommand+0x1be>
     734:	54 c0       	rjmp	.+168    	; 0x7de <calculateDriveCommand+0x266>
		speedV = 2000;
		factor *= 1.2;
	}
	else{
		speedV = 2000;
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	aa ef       	ldi	r26, 0xFA	; 250
     73c:	b4 e4       	ldi	r27, 0x44	; 68
     73e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <speedV>
     742:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <speedV+0x1>
     746:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <speedV+0x2>
     74a:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <speedV+0x3>
		factor = speedV / 1000;
     74e:	c1 2c       	mov	r12, r1
     750:	d1 2c       	mov	r13, r1
     752:	e1 2c       	mov	r14, r1
     754:	80 e4       	ldi	r24, 0x40	; 64
     756:	f8 2e       	mov	r15, r24
	}
	
	double factorOfSpeedChange = 0.5 * AxleLengthL * tan(deltaTheta);
     758:	c3 01       	movw	r24, r6
     75a:	b2 01       	movw	r22, r4
     75c:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <tan>
	//communication_log(LEVEL_INFO,"foc%d", (int16_t)factorOfSpeedChange);
	
	
	int16_t vr = (speedV + factor * factorOfSpeedChange);
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	4b e9       	ldi	r20, 0x9B	; 155
     766:	52 e4       	ldi	r21, 0x42	; 66
     768:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     76c:	a7 01       	movw	r20, r14
     76e:	96 01       	movw	r18, r12
     770:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     774:	6b 01       	movw	r12, r22
     776:	7c 01       	movw	r14, r24
	int16_t vl = (speedV - factor * factorOfSpeedChange);
	
	Motor_setVelocities(-vr, vl);
     778:	9b 01       	movw	r18, r22
     77a:	ac 01       	movw	r20, r24
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	8a ef       	ldi	r24, 0xFA	; 250
     782:	94 e4       	ldi	r25, 0x44	; 68
     784:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
     788:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
     78c:	4b 01       	movw	r8, r22
     78e:	5c 01       	movw	r10, r24
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	4a ef       	ldi	r20, 0xFA	; 250
     796:	54 e4       	ldi	r21, 0x44	; 68
     798:	c7 01       	movw	r24, r14
     79a:	b6 01       	movw	r22, r12
     79c:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     7a0:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
     7a4:	88 27       	eor	r24, r24
     7a6:	99 27       	eor	r25, r25
     7a8:	86 1b       	sub	r24, r22
     7aa:	97 0b       	sbc	r25, r23
     7ac:	b4 01       	movw	r22, r8
}
     7ae:	60 96       	adiw	r28, 0x10	; 16
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	9f 90       	pop	r9
     7d0:	8f 90       	pop	r8
     7d2:	7f 90       	pop	r7
     7d4:	6f 90       	pop	r6
     7d6:	5f 90       	pop	r5
     7d8:	4f 90       	pop	r4
	
	
	int16_t vr = (speedV + factor * factorOfSpeedChange);
	int16_t vl = (speedV - factor * factorOfSpeedChange);
	
	Motor_setVelocities(-vr, vl);
     7da:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <Motor_setVelocities>
	if (aCruzb < 0){
		deltaTheta = -deltaTheta;
	}
	
	
	double factor = speedV / 1000;
     7de:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <speedV>
     7e2:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <speedV+0x1>
     7e6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <speedV+0x2>
     7ea:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <speedV+0x3>
	
	if (fabs(deltaTheta) <= (M_PI / 3)){
		speedV = 2000;
     7ee:	00 e0       	ldi	r16, 0x00	; 0
     7f0:	10 e0       	ldi	r17, 0x00	; 0
     7f2:	2a ef       	ldi	r18, 0xFA	; 250
     7f4:	34 e4       	ldi	r19, 0x44	; 68
     7f6:	00 93 06 02 	sts	0x0206, r16	; 0x800206 <speedV>
     7fa:	10 93 07 02 	sts	0x0207, r17	; 0x800207 <speedV+0x1>
     7fe:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <speedV+0x2>
     802:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <speedV+0x3>
	if (aCruzb < 0){
		deltaTheta = -deltaTheta;
	}
	
	
	double factor = speedV / 1000;
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	4a e7       	ldi	r20, 0x7A	; 122
     80c:	54 e4       	ldi	r21, 0x44	; 68
     80e:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
	
	if (fabs(deltaTheta) <= (M_PI / 3)){
		speedV = 2000;
		factor *= 1.2;
     812:	2a e9       	ldi	r18, 0x9A	; 154
     814:	39 e9       	ldi	r19, 0x99	; 153
     816:	49 e9       	ldi	r20, 0x99	; 153
     818:	5f e3       	ldi	r21, 0x3F	; 63
     81a:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     81e:	6b 01       	movw	r12, r22
     820:	7c 01       	movw	r14, r24
     822:	9a cf       	rjmp	.-204    	; 0x758 <calculateDriveCommand+0x1e0>
	double arg = (dir.x*dirToBe.x + dir.y * dirToBe.y) / (vectorLength(dir) * vectorLength(dirToBe));
	double deltaTheta = acos(arg);
	
	
	if (aCruzb < 0){
		deltaTheta = -deltaTheta;
     824:	77 fa       	bst	r7, 7
     826:	70 94       	com	r7
     828:	77 f8       	bld	r7, 7
     82a:	70 94       	com	r7
     82c:	78 cf       	rjmp	.-272    	; 0x71e <calculateDriveCommand+0x1a6>

0000082e <mazeRunner>:
	Motor_setVelocities(-vr, vl);
}


//No Curves. make angle right and go
void mazeRunner(Pose_t* pose, const FPoint_t* point){
     82e:	4f 92       	push	r4
     830:	5f 92       	push	r5
     832:	6f 92       	push	r6
     834:	7f 92       	push	r7
     836:	8f 92       	push	r8
     838:	9f 92       	push	r9
     83a:	af 92       	push	r10
     83c:	bf 92       	push	r11
     83e:	cf 92       	push	r12
     840:	df 92       	push	r13
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	64 97       	sbiw	r28, 0x14	; 20
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	de bf       	out	0x3e, r29	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	cd bf       	out	0x3d, r28	; 61
     85e:	9e 83       	std	Y+6, r25	; 0x06
     860:	8d 83       	std	Y+5, r24	; 0x05
     862:	8b 01       	movw	r16, r22
	int16_t vr = speedV;
     864:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <speedV>
     868:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <speedV+0x1>
     86c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <speedV+0x2>
     870:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <speedV+0x3>
     874:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
     878:	69 87       	std	Y+9, r22	; 0x09
     87a:	7a 87       	std	Y+10, r23	; 0x0a
     87c:	8b 87       	std	Y+11, r24	; 0x0b
     87e:	9c 87       	std	Y+12, r25	; 0x0c
	int16_t vl = speedV;
	
	vector dir = {
		cos(pose->theta),
     880:	ed 81       	ldd	r30, Y+5	; 0x05
     882:	fe 81       	ldd	r31, Y+6	; 0x06
     884:	80 84       	ldd	r8, Z+8	; 0x08
     886:	91 84       	ldd	r9, Z+9	; 0x09
     888:	a2 84       	ldd	r10, Z+10	; 0x0a
     88a:	b3 84       	ldd	r11, Z+11	; 0x0b
     88c:	c5 01       	movw	r24, r10
     88e:	b4 01       	movw	r22, r8
     890:	0e 94 35 22 	call	0x446a	; 0x446a <cos>
     894:	6b 01       	movw	r12, r22
     896:	7c 01       	movw	r14, r24
		sin(pose->theta)
     898:	c5 01       	movw	r24, r10
     89a:	b4 01       	movw	r22, r8
     89c:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <sin>
     8a0:	2b 01       	movw	r4, r22
     8a2:	3c 01       	movw	r6, r24
	};
	
	vector dirToBe = {
		point->x - pose->x,
     8a4:	ed 81       	ldd	r30, Y+5	; 0x05
     8a6:	fe 81       	ldd	r31, Y+6	; 0x06
     8a8:	20 81       	ld	r18, Z
     8aa:	31 81       	ldd	r19, Z+1	; 0x01
     8ac:	42 81       	ldd	r20, Z+2	; 0x02
     8ae:	53 81       	ldd	r21, Z+3	; 0x03
     8b0:	f8 01       	movw	r30, r16
     8b2:	60 81       	ld	r22, Z
     8b4:	71 81       	ldd	r23, Z+1	; 0x01
     8b6:	82 81       	ldd	r24, Z+2	; 0x02
     8b8:	93 81       	ldd	r25, Z+3	; 0x03
     8ba:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
     8be:	69 83       	std	Y+1, r22	; 0x01
     8c0:	7a 83       	std	Y+2, r23	; 0x02
     8c2:	8b 83       	std	Y+3, r24	; 0x03
     8c4:	9c 83       	std	Y+4, r25	; 0x04
		point->y - pose->y
     8c6:	ed 81       	ldd	r30, Y+5	; 0x05
     8c8:	fe 81       	ldd	r31, Y+6	; 0x06
     8ca:	24 81       	ldd	r18, Z+4	; 0x04
     8cc:	35 81       	ldd	r19, Z+5	; 0x05
     8ce:	46 81       	ldd	r20, Z+6	; 0x06
     8d0:	57 81       	ldd	r21, Z+7	; 0x07
     8d2:	f8 01       	movw	r30, r16
     8d4:	64 81       	ldd	r22, Z+4	; 0x04
     8d6:	75 81       	ldd	r23, Z+5	; 0x05
     8d8:	86 81       	ldd	r24, Z+6	; 0x06
     8da:	97 81       	ldd	r25, Z+7	; 0x07
     8dc:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
     8e0:	6d 83       	std	Y+5, r22	; 0x05
     8e2:	7e 83       	std	Y+6, r23	; 0x06
     8e4:	8f 83       	std	Y+7, r24	; 0x07
     8e6:	98 87       	std	Y+8, r25	; 0x08
double scalarProduct(vector a, vector b){
	return (a.x * b.x) + (a.y * b.y);
}

double vectorLength(vector a){
	return sqrt((a.x * a.x) + (a.y * a.y));
     8e8:	a7 01       	movw	r20, r14
     8ea:	96 01       	movw	r18, r12
     8ec:	c7 01       	movw	r24, r14
     8ee:	b6 01       	movw	r22, r12
     8f0:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     8f4:	4b 01       	movw	r8, r22
     8f6:	5c 01       	movw	r10, r24
     8f8:	a3 01       	movw	r20, r6
     8fa:	92 01       	movw	r18, r4
     8fc:	c3 01       	movw	r24, r6
     8fe:	b2 01       	movw	r22, r4
     900:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     904:	9b 01       	movw	r18, r22
     906:	ac 01       	movw	r20, r24
     908:	c5 01       	movw	r24, r10
     90a:	b4 01       	movw	r22, r8
     90c:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     910:	0e 94 6e 25 	call	0x4adc	; 0x4adc <sqrt>
     914:	69 8b       	std	Y+17, r22	; 0x11
     916:	7a 8b       	std	Y+18, r23	; 0x12
     918:	8b 8b       	std	Y+19, r24	; 0x13
     91a:	9c 8b       	std	Y+20, r25	; 0x14
     91c:	29 81       	ldd	r18, Y+1	; 0x01
     91e:	3a 81       	ldd	r19, Y+2	; 0x02
     920:	4b 81       	ldd	r20, Y+3	; 0x03
     922:	5c 81       	ldd	r21, Y+4	; 0x04
     924:	ca 01       	movw	r24, r20
     926:	b9 01       	movw	r22, r18
     928:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     92c:	4b 01       	movw	r8, r22
     92e:	5c 01       	movw	r10, r24
     930:	2d 81       	ldd	r18, Y+5	; 0x05
     932:	3e 81       	ldd	r19, Y+6	; 0x06
     934:	4f 81       	ldd	r20, Y+7	; 0x07
     936:	58 85       	ldd	r21, Y+8	; 0x08
     938:	ca 01       	movw	r24, r20
     93a:	b9 01       	movw	r22, r18
     93c:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     940:	9b 01       	movw	r18, r22
     942:	ac 01       	movw	r20, r24
     944:	c5 01       	movw	r24, r10
     946:	b4 01       	movw	r22, r8
     948:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     94c:	0e 94 6e 25 	call	0x4adc	; 0x4adc <sqrt>
     950:	6d 87       	std	Y+13, r22	; 0x0d
     952:	7e 87       	std	Y+14, r23	; 0x0e
     954:	8f 87       	std	Y+15, r24	; 0x0f
     956:	98 8b       	std	Y+16, r25	; 0x10
		point->y - pose->y
	};
	
	double aCruzb = (dir.x * dirToBe.y) - (dir.y * dirToBe.x);
	double arg = (dir.x*dirToBe.x + dir.y * dirToBe.y) / (vectorLength(dir) * vectorLength(dirToBe));
	double deltaTheta = acos(arg);
     958:	29 81       	ldd	r18, Y+1	; 0x01
     95a:	3a 81       	ldd	r19, Y+2	; 0x02
     95c:	4b 81       	ldd	r20, Y+3	; 0x03
     95e:	5c 81       	ldd	r21, Y+4	; 0x04
     960:	c7 01       	movw	r24, r14
     962:	b6 01       	movw	r22, r12
     964:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     968:	4b 01       	movw	r8, r22
     96a:	5c 01       	movw	r10, r24
     96c:	2d 81       	ldd	r18, Y+5	; 0x05
     96e:	3e 81       	ldd	r19, Y+6	; 0x06
     970:	4f 81       	ldd	r20, Y+7	; 0x07
     972:	58 85       	ldd	r21, Y+8	; 0x08
     974:	c3 01       	movw	r24, r6
     976:	b2 01       	movw	r22, r4
     978:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     97c:	9b 01       	movw	r18, r22
     97e:	ac 01       	movw	r20, r24
     980:	c5 01       	movw	r24, r10
     982:	b4 01       	movw	r22, r8
     984:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     988:	4b 01       	movw	r8, r22
     98a:	5c 01       	movw	r10, r24
     98c:	29 89       	ldd	r18, Y+17	; 0x11
     98e:	3a 89       	ldd	r19, Y+18	; 0x12
     990:	4b 89       	ldd	r20, Y+19	; 0x13
     992:	5c 89       	ldd	r21, Y+20	; 0x14
     994:	6d 85       	ldd	r22, Y+13	; 0x0d
     996:	7e 85       	ldd	r23, Y+14	; 0x0e
     998:	8f 85       	ldd	r24, Y+15	; 0x0f
     99a:	98 89       	ldd	r25, Y+16	; 0x10
     99c:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     9a0:	9b 01       	movw	r18, r22
     9a2:	ac 01       	movw	r20, r24
     9a4:	c5 01       	movw	r24, r10
     9a6:	b4 01       	movw	r22, r8
     9a8:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
     9ac:	0e 94 b2 21 	call	0x4364	; 0x4364 <acos>
     9b0:	4b 01       	movw	r8, r22
     9b2:	5c 01       	movw	r10, r24
	
	if (aCruzb < 0){
     9b4:	2d 81       	ldd	r18, Y+5	; 0x05
     9b6:	3e 81       	ldd	r19, Y+6	; 0x06
     9b8:	4f 81       	ldd	r20, Y+7	; 0x07
     9ba:	58 85       	ldd	r21, Y+8	; 0x08
     9bc:	c7 01       	movw	r24, r14
     9be:	b6 01       	movw	r22, r12
     9c0:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     9c4:	6b 01       	movw	r12, r22
     9c6:	7c 01       	movw	r14, r24
     9c8:	29 81       	ldd	r18, Y+1	; 0x01
     9ca:	3a 81       	ldd	r19, Y+2	; 0x02
     9cc:	4b 81       	ldd	r20, Y+3	; 0x03
     9ce:	5c 81       	ldd	r21, Y+4	; 0x04
     9d0:	c3 01       	movw	r24, r6
     9d2:	b2 01       	movw	r22, r4
     9d4:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     9d8:	9b 01       	movw	r18, r22
     9da:	ac 01       	movw	r20, r24
     9dc:	c7 01       	movw	r24, r14
     9de:	b6 01       	movw	r22, r12
     9e0:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	a9 01       	movw	r20, r18
     9ea:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
     9ee:	87 fd       	sbrc	r24, 7
     9f0:	59 c0       	rjmp	.+178    	; 0xaa4 <mazeRunner+0x276>
	}
	
	//communication_log(LEVEL_INFO, "theta %.3f, %.3f", deltaTheta * 180.0 / M_PI, arg);
	
	//Make angle right or go
	if (deltaTheta > 0.0523599){
     9f2:	26 e5       	ldi	r18, 0x56	; 86
     9f4:	37 e7       	ldi	r19, 0x77	; 119
     9f6:	46 e5       	ldi	r20, 0x56	; 86
     9f8:	5d e3       	ldi	r21, 0x3D	; 61
     9fa:	c5 01       	movw	r24, r10
     9fc:	b4 01       	movw	r22, r8
     9fe:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
     a02:	18 16       	cp	r1, r24
     a04:	0c f4       	brge	.+2      	; 0xa08 <mazeRunner+0x1da>
     a06:	53 c0       	rjmp	.+166    	; 0xaae <mazeRunner+0x280>
		Motor_setVelocities(-(vr - 1000), -(vl - 1000));
		MVelocityL = -(vl - 1000);
		MVelocityR = -(vr - 1000);
	}
	else if (deltaTheta < -0.0523599){
     a08:	26 e5       	ldi	r18, 0x56	; 86
     a0a:	37 e7       	ldi	r19, 0x77	; 119
     a0c:	46 e5       	ldi	r20, 0x56	; 86
     a0e:	5d eb       	ldi	r21, 0xBD	; 189
     a10:	c5 01       	movw	r24, r10
     a12:	b4 01       	movw	r22, r8
     a14:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
     a18:	87 fd       	sbrc	r24, 7
     a1a:	2f c0       	rjmp	.+94     	; 0xa7a <mazeRunner+0x24c>
		Motor_setVelocities((vr - 1000), (vl - 1000));
		MVelocityL = (vl - 1000);
		MVelocityR = (vr - 1000);
	}
	else{
		Motor_setVelocities(-vr, vl);
     a1c:	e9 85       	ldd	r30, Y+9	; 0x09
     a1e:	fa 85       	ldd	r31, Y+10	; 0x0a
     a20:	f1 95       	neg	r31
     a22:	e1 95       	neg	r30
     a24:	f1 09       	sbc	r31, r1
     a26:	fa 83       	std	Y+2, r31	; 0x02
     a28:	e9 83       	std	Y+1, r30	; 0x01
     a2a:	69 85       	ldd	r22, Y+9	; 0x09
     a2c:	7a 85       	ldd	r23, Y+10	; 0x0a
     a2e:	cf 01       	movw	r24, r30
     a30:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <Motor_setVelocities>
		MVelocityL = vl;
     a34:	29 85       	ldd	r18, Y+9	; 0x09
     a36:	3a 85       	ldd	r19, Y+10	; 0x0a
     a38:	30 93 cd 03 	sts	0x03CD, r19	; 0x8003cd <__data_end+0x1>
     a3c:	20 93 cc 03 	sts	0x03CC, r18	; 0x8003cc <__data_end>
		MVelocityR = -vr;
     a40:	89 81       	ldd	r24, Y+1	; 0x01
     a42:	9a 81       	ldd	r25, Y+2	; 0x02
     a44:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <MVelocityR+0x1>
     a48:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <MVelocityR>
	}
}
     a4c:	64 96       	adiw	r28, 0x14	; 20
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	bf 90       	pop	r11
     a6a:	af 90       	pop	r10
     a6c:	9f 90       	pop	r9
     a6e:	8f 90       	pop	r8
     a70:	7f 90       	pop	r7
     a72:	6f 90       	pop	r6
     a74:	5f 90       	pop	r5
     a76:	4f 90       	pop	r4
     a78:	08 95       	ret
		Motor_setVelocities(-(vr - 1000), -(vl - 1000));
		MVelocityL = -(vl - 1000);
		MVelocityR = -(vr - 1000);
	}
	else if (deltaTheta < -0.0523599){
		Motor_setVelocities((vr - 1000), (vl - 1000));
     a7a:	29 85       	ldd	r18, Y+9	; 0x09
     a7c:	3a 85       	ldd	r19, Y+10	; 0x0a
     a7e:	28 5e       	subi	r18, 0xE8	; 232
     a80:	33 40       	sbci	r19, 0x03	; 3
     a82:	3a 83       	std	Y+2, r19	; 0x02
     a84:	29 83       	std	Y+1, r18	; 0x01
     a86:	b9 01       	movw	r22, r18
     a88:	c9 01       	movw	r24, r18
     a8a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <Motor_setVelocities>
		MVelocityL = (vl - 1000);
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	9a 81       	ldd	r25, Y+2	; 0x02
     a92:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <__data_end+0x1>
     a96:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <__data_end>
		MVelocityR = (vr - 1000);
     a9a:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <MVelocityR+0x1>
     a9e:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <MVelocityR>
     aa2:	d4 cf       	rjmp	.-88     	; 0xa4c <mazeRunner+0x21e>
	double aCruzb = (dir.x * dirToBe.y) - (dir.y * dirToBe.x);
	double arg = (dir.x*dirToBe.x + dir.y * dirToBe.y) / (vectorLength(dir) * vectorLength(dirToBe));
	double deltaTheta = acos(arg);
	
	if (aCruzb < 0){
		deltaTheta = -deltaTheta;
     aa4:	b7 fa       	bst	r11, 7
     aa6:	b0 94       	com	r11
     aa8:	b7 f8       	bld	r11, 7
     aaa:	b0 94       	com	r11
     aac:	a2 cf       	rjmp	.-188    	; 0x9f2 <mazeRunner+0x1c4>
	
	//communication_log(LEVEL_INFO, "theta %.3f, %.3f", deltaTheta * 180.0 / M_PI, arg);
	
	//Make angle right or go
	if (deltaTheta > 0.0523599){
		Motor_setVelocities(-(vr - 1000), -(vl - 1000));
     aae:	28 ee       	ldi	r18, 0xE8	; 232
     ab0:	33 e0       	ldi	r19, 0x03	; 3
     ab2:	89 85       	ldd	r24, Y+9	; 0x09
     ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ab6:	28 1b       	sub	r18, r24
     ab8:	39 0b       	sbc	r19, r25
     aba:	3a 83       	std	Y+2, r19	; 0x02
     abc:	29 83       	std	Y+1, r18	; 0x01
     abe:	b9 01       	movw	r22, r18
     ac0:	c9 01       	movw	r24, r18
     ac2:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <Motor_setVelocities>
		MVelocityL = -(vl - 1000);
     ac6:	e9 81       	ldd	r30, Y+1	; 0x01
     ac8:	fa 81       	ldd	r31, Y+2	; 0x02
     aca:	f0 93 cd 03 	sts	0x03CD, r31	; 0x8003cd <__data_end+0x1>
     ace:	e0 93 cc 03 	sts	0x03CC, r30	; 0x8003cc <__data_end>
		MVelocityR = -(vr - 1000);
     ad2:	f0 93 cf 03 	sts	0x03CF, r31	; 0x8003cf <MVelocityR+0x1>
     ad6:	e0 93 ce 03 	sts	0x03CE, r30	; 0x8003ce <MVelocityR>
     ada:	b8 cf       	rjmp	.-144    	; 0xa4c <mazeRunner+0x21e>

00000adc <goToCoordinate>:
		MVelocityL = vl;
		MVelocityR = -vr;
	}
}

void goToCoordinate(Pose_t* pose, const FPoint_t* point){
     adc:	4f 92       	push	r4
     ade:	5f 92       	push	r5
     ae0:	6f 92       	push	r6
     ae2:	7f 92       	push	r7
     ae4:	8f 92       	push	r8
     ae6:	9f 92       	push	r9
     ae8:	af 92       	push	r10
     aea:	bf 92       	push	r11
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	00 d0       	rcall	.+0      	; 0xafe <goToCoordinate+0x22>
     afe:	1f 92       	push	r1
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	6c 01       	movw	r12, r24
     b06:	8b 01       	movw	r16, r22
	Point_t curr = {
		.x = (int16_t)pose->x+1,
     b08:	fc 01       	movw	r30, r24
     b0a:	60 81       	ld	r22, Z
     b0c:	71 81       	ldd	r23, Z+1	; 0x01
     b0e:	82 81       	ldd	r24, Z+2	; 0x02
     b10:	93 81       	ldd	r25, Z+3	; 0x03
     b12:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
     b16:	7b 01       	movw	r14, r22
     b18:	ff ef       	ldi	r31, 0xFF	; 255
     b1a:	ef 1a       	sub	r14, r31
     b1c:	ff 0a       	sbc	r15, r31
		.y = (int16_t)pose->y+1
     b1e:	f6 01       	movw	r30, r12
     b20:	64 81       	ldd	r22, Z+4	; 0x04
     b22:	75 81       	ldd	r23, Z+5	; 0x05
     b24:	86 81       	ldd	r24, Z+6	; 0x06
     b26:	97 81       	ldd	r25, Z+7	; 0x07
     b28:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
     b2c:	6b 01       	movw	r12, r22
     b2e:	ff ef       	ldi	r31, 0xFF	; 255
     b30:	cf 1a       	sub	r12, r31
     b32:	df 0a       	sbc	r13, r31
	};
	Point_t toGo = {
		.x = (int16_t)point->x,
     b34:	f8 01       	movw	r30, r16
     b36:	60 81       	ld	r22, Z
     b38:	71 81       	ldd	r23, Z+1	; 0x01
     b3a:	82 81       	ldd	r24, Z+2	; 0x02
     b3c:	93 81       	ldd	r25, Z+3	; 0x03
     b3e:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
     b42:	4b 01       	movw	r8, r22
     b44:	5c 01       	movw	r10, r24
		.y = (int16_t)point->y
     b46:	f8 01       	movw	r30, r16
     b48:	64 81       	ldd	r22, Z+4	; 0x04
     b4a:	75 81       	ldd	r23, Z+5	; 0x05
     b4c:	86 81       	ldd	r24, Z+6	; 0x06
     b4e:	97 81       	ldd	r25, Z+7	; 0x07
     b50:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
     b54:	2b 01       	movw	r4, r22
     b56:	3c 01       	movw	r6, r24
	};
	
	Point_t* pointArray = malloc(2 * sizeof(Point_t));
     b58:	88 e0       	ldi	r24, 0x08	; 8
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <malloc>
     b60:	8c 01       	movw	r16, r24
	pointArray[0] = curr;
     b62:	fc 01       	movw	r30, r24
     b64:	f1 82       	std	Z+1, r15	; 0x01
     b66:	e0 82       	st	Z, r14
     b68:	d3 82       	std	Z+3, r13	; 0x03
     b6a:	c2 82       	std	Z+2, r12	; 0x02
	pointArray[1] = toGo;
     b6c:	95 82       	std	Z+5, r9	; 0x05
     b6e:	84 82       	std	Z+4, r8	; 0x04
     b70:	57 82       	std	Z+7, r5	; 0x07
     b72:	46 82       	std	Z+6, r4	; 0x06
	
	const Path_t pathTogo = {
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	1b 83       	std	Y+3, r17	; 0x03
     b7a:	0a 83       	std	Y+2, r16	; 0x02
		.pathLength = 2,
		.points = pointArray
	};
	
	pathFollower_setNewPath(&pathTogo);
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	0e 94 07 1a 	call	0x340e	; 0x340e <pathFollower_setNewPath>
	free(pointArray);
     b84:	c8 01       	movw	r24, r16
     b86:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <free>
	
	pathFollower_command(FOLLOWER_CMD_START);
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	0e 94 36 1a 	call	0x346c	; 0x346c <pathFollower_command>
	
}
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	ef 90       	pop	r14
     ba2:	df 90       	pop	r13
     ba4:	cf 90       	pop	r12
     ba6:	bf 90       	pop	r11
     ba8:	af 90       	pop	r10
     baa:	9f 90       	pop	r9
     bac:	8f 90       	pop	r8
     bae:	7f 90       	pop	r7
     bb0:	6f 90       	pop	r6
     bb2:	5f 90       	pop	r5
     bb4:	4f 90       	pop	r4
     bb6:	08 95       	ret

00000bb8 <getNewPoseForwarding>:
 *  Author: Algoritmi
 */ 

#include "Odometry.h"

Pose_t getNewPoseForwarding(Pose_t oldPose, int16_t dl, int16_t dr){
     bb8:	2f 92       	push	r2
     bba:	3f 92       	push	r3
     bbc:	4f 92       	push	r4
     bbe:	5f 92       	push	r5
     bc0:	6f 92       	push	r6
     bc2:	7f 92       	push	r7
     bc4:	8f 92       	push	r8
     bc6:	9f 92       	push	r9
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	60 97       	sbiw	r28, 0x10	; 16
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	1c 01       	movw	r2, r24
     bee:	c9 82       	std	Y+1, r12	; 0x01
     bf0:	da 82       	std	Y+2, r13	; 0x02
     bf2:	eb 82       	std	Y+3, r14	; 0x03
     bf4:	fc 82       	std	Y+4, r15	; 0x04
     bf6:	0d 83       	std	Y+5, r16	; 0x05
     bf8:	1e 83       	std	Y+6, r17	; 0x06
     bfa:	2f 83       	std	Y+7, r18	; 0x07
     bfc:	38 87       	std	Y+8, r19	; 0x08
     bfe:	49 87       	std	Y+9, r20	; 0x09
     c00:	5a 87       	std	Y+10, r21	; 0x0a
     c02:	6b 87       	std	Y+11, r22	; 0x0b
     c04:	7c 87       	std	Y+12, r23	; 0x0c
     c06:	49 84       	ldd	r4, Y+9	; 0x09
     c08:	5a 84       	ldd	r5, Y+10	; 0x0a
     c0a:	6b 84       	ldd	r6, Y+11	; 0x0b
     c0c:	7c 84       	ldd	r7, Y+12	; 0x0c
	int16_t d = (dl + dr) / 2;
	double deltaD = ((DistancePerTickR + DistancePerTickL) / 2) * d;
     c0e:	b5 01       	movw	r22, r10
     c10:	68 0d       	add	r22, r8
     c12:	79 1d       	adc	r23, r9
     c14:	77 fd       	sbrc	r23, 7
     c16:	61 c0       	rjmp	.+194    	; 0xcda <getNewPoseForwarding+0x122>
     c18:	75 95       	asr	r23
     c1a:	67 95       	ror	r22
     c1c:	07 2e       	mov	r0, r23
     c1e:	00 0c       	add	r0, r0
     c20:	88 0b       	sbc	r24, r24
     c22:	99 0b       	sbc	r25, r25
     c24:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
     c28:	23 e0       	ldi	r18, 0x03	; 3
     c2a:	39 e0       	ldi	r19, 0x09	; 9
     c2c:	42 e1       	ldi	r20, 0x12	; 18
     c2e:	5f e3       	ldi	r21, 0x3F	; 63
     c30:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     c34:	6b 01       	movw	r12, r22
     c36:	7c 01       	movw	r14, r24
	
	double deltaX = deltaD * cos(oldPose.theta);
     c38:	c3 01       	movw	r24, r6
     c3a:	b2 01       	movw	r22, r4
     c3c:	0e 94 35 22 	call	0x446a	; 0x446a <cos>
     c40:	6d 87       	std	Y+13, r22	; 0x0d
     c42:	7e 87       	std	Y+14, r23	; 0x0e
     c44:	8f 87       	std	Y+15, r24	; 0x0f
     c46:	98 8b       	std	Y+16, r25	; 0x10
	double deltaY = deltaD * sin(oldPose.theta);
     c48:	c3 01       	movw	r24, r6
     c4a:	b2 01       	movw	r22, r4
     c4c:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <sin>
     c50:	9b 01       	movw	r18, r22
     c52:	ac 01       	movw	r20, r24
	
	Pose_t newPose = {oldPose.x + deltaX, oldPose.y + deltaY, oldPose.theta};
     c54:	c7 01       	movw	r24, r14
     c56:	b6 01       	movw	r22, r12
     c58:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     c5c:	2d 81       	ldd	r18, Y+5	; 0x05
     c5e:	3e 81       	ldd	r19, Y+6	; 0x06
     c60:	4f 81       	ldd	r20, Y+7	; 0x07
     c62:	58 85       	ldd	r21, Y+8	; 0x08
     c64:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     c68:	4b 01       	movw	r8, r22
     c6a:	5c 01       	movw	r10, r24
	
	return newPose;
     c6c:	2d 85       	ldd	r18, Y+13	; 0x0d
     c6e:	3e 85       	ldd	r19, Y+14	; 0x0e
     c70:	4f 85       	ldd	r20, Y+15	; 0x0f
     c72:	58 89       	ldd	r21, Y+16	; 0x10
     c74:	c7 01       	movw	r24, r14
     c76:	b6 01       	movw	r22, r12
     c78:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     c7c:	9b 01       	movw	r18, r22
     c7e:	ac 01       	movw	r20, r24
     c80:	69 81       	ldd	r22, Y+1	; 0x01
     c82:	7a 81       	ldd	r23, Y+2	; 0x02
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	9c 81       	ldd	r25, Y+4	; 0x04
     c88:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     c8c:	f1 01       	movw	r30, r2
     c8e:	60 83       	st	Z, r22
     c90:	71 83       	std	Z+1, r23	; 0x01
     c92:	82 83       	std	Z+2, r24	; 0x02
     c94:	93 83       	std	Z+3, r25	; 0x03
     c96:	84 82       	std	Z+4, r8	; 0x04
     c98:	95 82       	std	Z+5, r9	; 0x05
     c9a:	a6 82       	std	Z+6, r10	; 0x06
     c9c:	b7 82       	std	Z+7, r11	; 0x07
     c9e:	40 86       	std	Z+8, r4	; 0x08
     ca0:	51 86       	std	Z+9, r5	; 0x09
     ca2:	62 86       	std	Z+10, r6	; 0x0a
     ca4:	73 86       	std	Z+11, r7	; 0x0b
}
     ca6:	c1 01       	movw	r24, r2
     ca8:	60 96       	adiw	r28, 0x10	; 16
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	bf 90       	pop	r11
     cc6:	af 90       	pop	r10
     cc8:	9f 90       	pop	r9
     cca:	8f 90       	pop	r8
     ccc:	7f 90       	pop	r7
     cce:	6f 90       	pop	r6
     cd0:	5f 90       	pop	r5
     cd2:	4f 90       	pop	r4
     cd4:	3f 90       	pop	r3
     cd6:	2f 90       	pop	r2
     cd8:	08 95       	ret

#include "Odometry.h"

Pose_t getNewPoseForwarding(Pose_t oldPose, int16_t dl, int16_t dr){
	int16_t d = (dl + dr) / 2;
	double deltaD = ((DistancePerTickR + DistancePerTickL) / 2) * d;
     cda:	6f 5f       	subi	r22, 0xFF	; 255
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	9c cf       	rjmp	.-200    	; 0xc18 <getNewPoseForwarding+0x60>

00000ce0 <getNewPoseNotForwarding>:
	Pose_t newPose = {oldPose.x + deltaX, oldPose.y + deltaY, oldPose.theta};
	
	return newPose;
}

Pose_t getNewPoseNotForwarding(Pose_t oldPose, int16_t dl, int16_t dr){
     ce0:	2f 92       	push	r2
     ce2:	3f 92       	push	r3
     ce4:	4f 92       	push	r4
     ce6:	5f 92       	push	r5
     ce8:	6f 92       	push	r6
     cea:	7f 92       	push	r7
     cec:	8f 92       	push	r8
     cee:	9f 92       	push	r9
     cf0:	af 92       	push	r10
     cf2:	bf 92       	push	r11
     cf4:	cf 92       	push	r12
     cf6:	df 92       	push	r13
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	60 97       	sbiw	r28, 0x10	; 16
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	1c 01       	movw	r2, r24
     d16:	c9 82       	std	Y+1, r12	; 0x01
     d18:	da 82       	std	Y+2, r13	; 0x02
     d1a:	eb 82       	std	Y+3, r14	; 0x03
     d1c:	fc 82       	std	Y+4, r15	; 0x04
     d1e:	0d 83       	std	Y+5, r16	; 0x05
     d20:	1e 83       	std	Y+6, r17	; 0x06
     d22:	2f 83       	std	Y+7, r18	; 0x07
     d24:	38 87       	std	Y+8, r19	; 0x08
     d26:	49 87       	std	Y+9, r20	; 0x09
     d28:	5a 87       	std	Y+10, r21	; 0x0a
     d2a:	6b 87       	std	Y+11, r22	; 0x0b
     d2c:	7c 87       	std	Y+12, r23	; 0x0c
     d2e:	c9 84       	ldd	r12, Y+9	; 0x09
     d30:	da 84       	ldd	r13, Y+10	; 0x0a
     d32:	eb 84       	ldd	r14, Y+11	; 0x0b
     d34:	fc 84       	ldd	r15, Y+12	; 0x0c
	double deltaDl = DistancePerTickL * dl;
     d36:	b5 01       	movw	r22, r10
     d38:	bb 0c       	add	r11, r11
     d3a:	88 0b       	sbc	r24, r24
     d3c:	99 0b       	sbc	r25, r25
     d3e:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
     d42:	25 e7       	ldi	r18, 0x75	; 117
     d44:	32 e0       	ldi	r19, 0x02	; 2
     d46:	42 e1       	ldi	r20, 0x12	; 18
     d48:	5f e3       	ldi	r21, 0x3F	; 63
     d4a:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     d4e:	2b 01       	movw	r4, r22
     d50:	3c 01       	movw	r6, r24
	double deltaDr = DistancePerTickR * dr;
     d52:	b4 01       	movw	r22, r8
     d54:	99 0c       	add	r9, r9
     d56:	88 0b       	sbc	r24, r24
     d58:	99 0b       	sbc	r25, r25
     d5a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
     d5e:	21 e9       	ldi	r18, 0x91	; 145
     d60:	3f e0       	ldi	r19, 0x0F	; 15
     d62:	42 e1       	ldi	r20, 0x12	; 18
     d64:	5f e3       	ldi	r21, 0x3F	; 63
     d66:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     d6a:	6d 87       	std	Y+13, r22	; 0x0d
     d6c:	7e 87       	std	Y+14, r23	; 0x0e
     d6e:	8f 87       	std	Y+15, r24	; 0x0f
     d70:	98 8b       	std	Y+16, r25	; 0x10
	
	double deltaTheta = (deltaDr - deltaDl) / AxleLength;
     d72:	a3 01       	movw	r20, r6
     d74:	92 01       	movw	r18, r4
     d76:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
     d7a:	4b 01       	movw	r8, r22
     d7c:	5c 01       	movw	r10, r24
	double deltaX = ((deltaDr + deltaDl)/(deltaDr - deltaDl)) * (AxleLength / 2) * (sin(oldPose.theta + deltaTheta) - sin(oldPose.theta));
     d7e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d80:	3e 85       	ldd	r19, Y+14	; 0x0e
     d82:	4f 85       	ldd	r20, Y+15	; 0x0f
     d84:	58 89       	ldd	r21, Y+16	; 0x10
     d86:	c3 01       	movw	r24, r6
     d88:	b2 01       	movw	r22, r4
     d8a:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     d8e:	a5 01       	movw	r20, r10
     d90:	94 01       	movw	r18, r8
     d92:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	4a e9       	ldi	r20, 0x9A	; 154
     d9c:	52 e4       	ldi	r21, 0x42	; 66
     d9e:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     da2:	6d 87       	std	Y+13, r22	; 0x0d
     da4:	7e 87       	std	Y+14, r23	; 0x0e
     da6:	8f 87       	std	Y+15, r24	; 0x0f
     da8:	98 8b       	std	Y+16, r25	; 0x10
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	4b e1       	ldi	r20, 0x1B	; 27
     db0:	53 e4       	ldi	r21, 0x43	; 67
     db2:	c5 01       	movw	r24, r10
     db4:	b4 01       	movw	r22, r8
     db6:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
     dba:	a7 01       	movw	r20, r14
     dbc:	96 01       	movw	r18, r12
     dbe:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     dc2:	4b 01       	movw	r8, r22
     dc4:	5c 01       	movw	r10, r24
     dc6:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <sin>
     dca:	2b 01       	movw	r4, r22
     dcc:	3c 01       	movw	r6, r24
     dce:	c7 01       	movw	r24, r14
     dd0:	b6 01       	movw	r22, r12
     dd2:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <sin>
     dd6:	9b 01       	movw	r18, r22
     dd8:	ac 01       	movw	r20, r24
     dda:	c3 01       	movw	r24, r6
     ddc:	b2 01       	movw	r22, r4
     dde:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
     de2:	2d 85       	ldd	r18, Y+13	; 0x0d
     de4:	3e 85       	ldd	r19, Y+14	; 0x0e
     de6:	4f 85       	ldd	r20, Y+15	; 0x0f
     de8:	58 89       	ldd	r21, Y+16	; 0x10
     dea:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     dee:	2b 01       	movw	r4, r22
     df0:	3c 01       	movw	r6, r24
	double deltaY = ((deltaDr + deltaDl)/(deltaDr - deltaDl)) * (AxleLength / 2) * (cos(oldPose.theta) - cos(oldPose.theta + deltaTheta));
     df2:	c7 01       	movw	r24, r14
     df4:	b6 01       	movw	r22, r12
     df6:	0e 94 35 22 	call	0x446a	; 0x446a <cos>
     dfa:	6b 01       	movw	r12, r22
     dfc:	7c 01       	movw	r14, r24
     dfe:	c5 01       	movw	r24, r10
     e00:	b4 01       	movw	r22, r8
     e02:	0e 94 35 22 	call	0x446a	; 0x446a <cos>
     e06:	9b 01       	movw	r18, r22
     e08:	ac 01       	movw	r20, r24
     e0a:	c7 01       	movw	r24, r14
     e0c:	b6 01       	movw	r22, r12
     e0e:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
     e12:	2d 85       	ldd	r18, Y+13	; 0x0d
     e14:	3e 85       	ldd	r19, Y+14	; 0x0e
     e16:	4f 85       	ldd	r20, Y+15	; 0x0f
     e18:	58 89       	ldd	r21, Y+16	; 0x10
     e1a:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
     e1e:	6b 01       	movw	r12, r22
     e20:	7c 01       	movw	r14, r24
	
	double newTheta = oldPose.theta + deltaTheta;
	if (newTheta > M_PI){
     e22:	2b ed       	ldi	r18, 0xDB	; 219
     e24:	3f e0       	ldi	r19, 0x0F	; 15
     e26:	49 e4       	ldi	r20, 0x49	; 73
     e28:	50 e4       	ldi	r21, 0x40	; 64
     e2a:	c5 01       	movw	r24, r10
     e2c:	b4 01       	movw	r22, r8
     e2e:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
     e32:	18 16       	cp	r1, r24
     e34:	0c f4       	brge	.+2      	; 0xe38 <getNewPoseNotForwarding+0x158>
     e36:	4d c0       	rjmp	.+154    	; 0xed2 <getNewPoseNotForwarding+0x1f2>
		newTheta -= 2 * M_PI;
	}
	else if (newTheta < -M_PI){
     e38:	2b ed       	ldi	r18, 0xDB	; 219
     e3a:	3f e0       	ldi	r19, 0x0F	; 15
     e3c:	49 e4       	ldi	r20, 0x49	; 73
     e3e:	50 ec       	ldi	r21, 0xC0	; 192
     e40:	c5 01       	movw	r24, r10
     e42:	b4 01       	movw	r22, r8
     e44:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
     e48:	87 ff       	sbrs	r24, 7
     e4a:	0a c0       	rjmp	.+20     	; 0xe60 <getNewPoseNotForwarding+0x180>
		newTheta += 2 * M_PI;
     e4c:	2b ed       	ldi	r18, 0xDB	; 219
     e4e:	3f e0       	ldi	r19, 0x0F	; 15
     e50:	49 ec       	ldi	r20, 0xC9	; 201
     e52:	50 e4       	ldi	r21, 0x40	; 64
     e54:	c5 01       	movw	r24, r10
     e56:	b4 01       	movw	r22, r8
     e58:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     e5c:	4b 01       	movw	r8, r22
     e5e:	5c 01       	movw	r10, r24
	}
	
	Pose_t newPose = {oldPose.x + deltaX, oldPose.y + deltaY, newTheta};
     e60:	2d 81       	ldd	r18, Y+5	; 0x05
     e62:	3e 81       	ldd	r19, Y+6	; 0x06
     e64:	4f 81       	ldd	r20, Y+7	; 0x07
     e66:	58 85       	ldd	r21, Y+8	; 0x08
     e68:	c7 01       	movw	r24, r14
     e6a:	b6 01       	movw	r22, r12
     e6c:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     e70:	6b 01       	movw	r12, r22
     e72:	7c 01       	movw	r14, r24
		
	return newPose;
     e74:	a3 01       	movw	r20, r6
     e76:	92 01       	movw	r18, r4
     e78:	69 81       	ldd	r22, Y+1	; 0x01
     e7a:	7a 81       	ldd	r23, Y+2	; 0x02
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	9c 81       	ldd	r25, Y+4	; 0x04
     e80:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
     e84:	f1 01       	movw	r30, r2
     e86:	60 83       	st	Z, r22
     e88:	71 83       	std	Z+1, r23	; 0x01
     e8a:	82 83       	std	Z+2, r24	; 0x02
     e8c:	93 83       	std	Z+3, r25	; 0x03
     e8e:	c4 82       	std	Z+4, r12	; 0x04
     e90:	d5 82       	std	Z+5, r13	; 0x05
     e92:	e6 82       	std	Z+6, r14	; 0x06
     e94:	f7 82       	std	Z+7, r15	; 0x07
     e96:	80 86       	std	Z+8, r8	; 0x08
     e98:	91 86       	std	Z+9, r9	; 0x09
     e9a:	a2 86       	std	Z+10, r10	; 0x0a
     e9c:	b3 86       	std	Z+11, r11	; 0x0b
}
     e9e:	c1 01       	movw	r24, r2
     ea0:	60 96       	adiw	r28, 0x10	; 16
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	af 90       	pop	r10
     ec0:	9f 90       	pop	r9
     ec2:	8f 90       	pop	r8
     ec4:	7f 90       	pop	r7
     ec6:	6f 90       	pop	r6
     ec8:	5f 90       	pop	r5
     eca:	4f 90       	pop	r4
     ecc:	3f 90       	pop	r3
     ece:	2f 90       	pop	r2
     ed0:	08 95       	ret
	double deltaX = ((deltaDr + deltaDl)/(deltaDr - deltaDl)) * (AxleLength / 2) * (sin(oldPose.theta + deltaTheta) - sin(oldPose.theta));
	double deltaY = ((deltaDr + deltaDl)/(deltaDr - deltaDl)) * (AxleLength / 2) * (cos(oldPose.theta) - cos(oldPose.theta + deltaTheta));
	
	double newTheta = oldPose.theta + deltaTheta;
	if (newTheta > M_PI){
		newTheta -= 2 * M_PI;
     ed2:	2b ed       	ldi	r18, 0xDB	; 219
     ed4:	3f e0       	ldi	r19, 0x0F	; 15
     ed6:	49 ec       	ldi	r20, 0xC9	; 201
     ed8:	50 e4       	ldi	r21, 0x40	; 64
     eda:	c5 01       	movw	r24, r10
     edc:	b4 01       	movw	r22, r8
     ede:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
     ee2:	4b 01       	movw	r8, r22
     ee4:	5c 01       	movw	r10, r24
     ee6:	bc cf       	rjmp	.-136    	; 0xe60 <getNewPoseNotForwarding+0x180>

00000ee8 <bumperInit>:
uint8_t leftBumpread(){
	if (leftBumpOn()){
		return 1;
	}
	return 0;
}
     ee8:	10 92 34 08 	sts	0x0834, r1	; 0x800834 <collisions>
     eec:	e7 e0       	ldi	r30, 0x07	; 7
     eee:	f1 e0       	ldi	r31, 0x01	; 1
     ef0:	80 81       	ld	r24, Z
     ef2:	8f 73       	andi	r24, 0x3F	; 63
     ef4:	80 83       	st	Z, r24
     ef6:	e8 e6       	ldi	r30, 0x68	; 104
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	84 60       	ori	r24, 0x04	; 4
     efe:	80 83       	st	Z, r24
     f00:	80 ec       	ldi	r24, 0xC0	; 192
     f02:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     f06:	08 95       	ret

00000f08 <rightBumpOn>:
     f08:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7e0106>
     f0c:	87 fd       	sbrc	r24, 7
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <rightBumpOn+0xc>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	08 95       	ret
     f14:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <collisions>
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <collisions>
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	08 95       	ret

00000f22 <leftBumpOn>:
     f22:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7e0106>
     f26:	86 ff       	sbrs	r24, 6
     f28:	07 c0       	rjmp	.+14     	; 0xf38 <leftBumpOn+0x16>
     f2a:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <collisions>
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <collisions>
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	08 95       	ret
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	08 95       	ret

00000f3c <getCollisions>:

uint8_t getCollisions(){
	return collisions;
}
     f3c:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <collisions>
     f40:	08 95       	ret

00000f42 <encoderInit>:
int16_t leftEncPulses;
int16_t rightEncPulses;

void encoderInit(){
	
	DDRB = 0x00;
     f42:	14 b8       	out	0x04, r1	; 4
	
	PORTB = 0xff;
     f44:	8f ef       	ldi	r24, 0xFF	; 255
     f46:	85 b9       	out	0x05, r24	; 5
	
	PCICR |= (1<<PCIE0);
     f48:	e8 e6       	ldi	r30, 0x68	; 104
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT7) | (1<<PCINT6) | (1<<PCINT5) | (1<<PCINT4);
     f52:	eb e6       	ldi	r30, 0x6B	; 107
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 6f       	ori	r24, 0xF0	; 240
     f5a:	80 83       	st	Z, r24
	leftEncPulses = 0;
	rightEncPulses = 0;
}

void statInit(){
	lastStatPinb = PINB;
     f5c:	83 b1       	in	r24, 0x03	; 3
     f5e:	80 93 33 08 	sts	0x0833, r24	; 0x800833 <lastStatPinb>
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT7) | (1<<PCINT6) | (1<<PCINT5) | (1<<PCINT4);
	
	statInit();
	
	leftEncPulses = 0;
     f62:	10 92 38 08 	sts	0x0838, r1	; 0x800838 <leftEncPulses+0x1>
     f66:	10 92 37 08 	sts	0x0837, r1	; 0x800837 <leftEncPulses>
	rightEncPulses = 0;
     f6a:	10 92 36 08 	sts	0x0836, r1	; 0x800836 <rightEncPulses+0x1>
     f6e:	10 92 35 08 	sts	0x0835, r1	; 0x800835 <rightEncPulses>
     f72:	08 95       	ret

00000f74 <statInit>:
}

void statInit(){
	lastStatPinb = PINB;
     f74:	83 b1       	in	r24, 0x03	; 3
     f76:	80 93 33 08 	sts	0x0833, r24	; 0x800833 <lastStatPinb>
     f7a:	08 95       	ret

00000f7c <rightEncFigure>:
}

enum direction rightEncFigure(){
	uint8_t pinb = PINB;
     f7c:	23 b1       	in	r18, 0x03	; 3
	uint8_t index = (
	(((lastStatPinb & (1 << rightEncoderA)) != 0) << 3) + 
     f7e:	90 91 33 08 	lds	r25, 0x0833	; 0x800833 <lastStatPinb>
	lastStatPinb = PINB;
}

enum direction rightEncFigure(){
	uint8_t pinb = PINB;
	uint8_t index = (
     f82:	99 1f       	adc	r25, r25
     f84:	99 27       	eor	r25, r25
     f86:	99 1f       	adc	r25, r25
     f88:	99 0f       	add	r25, r25
     f8a:	99 0f       	add	r25, r25
     f8c:	99 0f       	add	r25, r25
	(((lastStatPinb & (1 << rightEncoderA)) != 0) << 3) + 
	(((lastStatPinb & (1 << rightEncoderB)) != 0) << 2) +
     f8e:	80 91 33 08 	lds	r24, 0x0833	; 0x800833 <lastStatPinb>
	lastStatPinb = PINB;
}

enum direction rightEncFigure(){
	uint8_t pinb = PINB;
	uint8_t index = (
     f92:	e8 2f       	mov	r30, r24
     f94:	e0 74       	andi	r30, 0x40	; 64
     f96:	86 fd       	sbrc	r24, 6
     f98:	e4 e0       	ldi	r30, 0x04	; 4
     f9a:	82 2f       	mov	r24, r18
     f9c:	88 1f       	adc	r24, r24
     f9e:	88 27       	eor	r24, r24
     fa0:	88 1f       	adc	r24, r24
     fa2:	88 0f       	add	r24, r24
     fa4:	26 fb       	bst	r18, 6
     fa6:	22 27       	eor	r18, r18
     fa8:	20 f9       	bld	r18, 0
     faa:	92 0f       	add	r25, r18
     fac:	e9 0f       	add	r30, r25
     fae:	8e 0f       	add	r24, r30
     fb0:	91 e0       	ldi	r25, 0x01	; 1
	(((lastStatPinb & (1 << rightEncoderB)) != 0) << 2) +
	(((pinb & (1 << rightEncoderA)) != 0) << 1) +
	((pinb & (1 << rightEncoderB)) != 0)
	);
	
	rightEncPulsed = index == 4 || index == 8;
     fb2:	84 30       	cpi	r24, 0x04	; 4
     fb4:	19 f0       	breq	.+6      	; 0xfbc <rightEncFigure+0x40>
     fb6:	88 30       	cpi	r24, 0x08	; 8
     fb8:	09 f0       	breq	.+2      	; 0xfbc <rightEncFigure+0x40>
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <rightEncPulsed>
	
	return checkUpTable[index];
     fc0:	e8 2f       	mov	r30, r24
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	e6 5c       	subi	r30, 0xC6	; 198
     fc6:	fd 4f       	sbci	r31, 0xFD	; 253
}
     fc8:	80 81       	ld	r24, Z
     fca:	08 95       	ret

00000fcc <leftEncFigure>:

enum direction leftEncFigure(){
	uint8_t currStatPinb = PINB;
     fcc:	93 b1       	in	r25, 0x03	; 3
	uint8_t index = (
	(((lastStatPinb & (1 << leftEncoderA)) != 0) << 3) +
     fce:	80 91 33 08 	lds	r24, 0x0833	; 0x800833 <lastStatPinb>
	return checkUpTable[index];
}

enum direction leftEncFigure(){
	uint8_t currStatPinb = PINB;
	uint8_t index = (
     fd2:	e8 2f       	mov	r30, r24
     fd4:	e0 72       	andi	r30, 0x20	; 32
     fd6:	85 fd       	sbrc	r24, 5
     fd8:	e8 e0       	ldi	r30, 0x08	; 8
	(((lastStatPinb & (1 << leftEncoderA)) != 0) << 3) +
	(((lastStatPinb & (1 << leftEncoderB)) != 0) << 2) +
     fda:	80 91 33 08 	lds	r24, 0x0833	; 0x800833 <lastStatPinb>
	return checkUpTable[index];
}

enum direction leftEncFigure(){
	uint8_t currStatPinb = PINB;
	uint8_t index = (
     fde:	28 2f       	mov	r18, r24
     fe0:	20 71       	andi	r18, 0x10	; 16
     fe2:	84 fd       	sbrc	r24, 4
     fe4:	24 e0       	ldi	r18, 0x04	; 4
     fe6:	89 2f       	mov	r24, r25
     fe8:	80 72       	andi	r24, 0x20	; 32
     fea:	95 fd       	sbrc	r25, 5
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	92 95       	swap	r25
     ff0:	91 70       	andi	r25, 0x01	; 1
     ff2:	e9 0f       	add	r30, r25
     ff4:	e2 0f       	add	r30, r18
     ff6:	e8 0f       	add	r30, r24
     ff8:	81 e0       	ldi	r24, 0x01	; 1
	(((lastStatPinb & (1 << leftEncoderB)) != 0) << 2) +
	(((currStatPinb & (1 << leftEncoderA)) != 0) << 1) +
	((currStatPinb & (1 << leftEncoderB)) != 0)
	);
	
	leftEncPulsed = index == 4 || index == 8;
     ffa:	e4 30       	cpi	r30, 0x04	; 4
     ffc:	19 f0       	breq	.+6      	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     ffe:	e8 30       	cpi	r30, 0x08	; 8
    1000:	09 f0       	breq	.+2      	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	80 93 32 08 	sts	0x0832, r24	; 0x800832 <leftEncPulsed>
	
	return checkUpTable[index];
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	e6 5c       	subi	r30, 0xC6	; 198
    100c:	fd 4f       	sbci	r31, 0xFD	; 253
}
    100e:	80 81       	ld	r24, Z
    1010:	08 95       	ret

00001012 <getDistanceFront>:
#include <cfg/Infrared/Infrared_cfg.h>
#include <io/adc/adc.h>
#include <sensors/infrared.h>

double getDistanceFront(){
	return (distanceParamAFront + (distanceParamBFront / ADC_getFilteredValue(FrontChannel)));
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <ADC_getFilteredValue>
    1018:	bc 01       	movw	r22, r24
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__floatunsisf>
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	64 ee       	ldi	r22, 0xE4	; 228
    1028:	76 eb       	ldi	r23, 0xB6	; 182
    102a:	8c e8       	ldi	r24, 0x8C	; 140
    102c:	95 e4       	ldi	r25, 0x45	; 69
    102e:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
    1032:	22 ea       	ldi	r18, 0xA2	; 162
    1034:	33 e2       	ldi	r19, 0x23	; 35
    1036:	49 ed       	ldi	r20, 0xD9	; 217
    1038:	5f e3       	ldi	r21, 0x3F	; 63
    103a:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
	//return (ADC_getFilteredValue(FrontChannel));
	
}
    103e:	08 95       	ret

00001040 <getDistanceLeft>:

double getDistanceLeft(){
	return (distanceParamALeft + (distanceParamBLeft / ADC_getFilteredValue(LeftChannel)));
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <ADC_getFilteredValue>
    1046:	bc 01       	movw	r22, r24
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__floatunsisf>
    1050:	9b 01       	movw	r18, r22
    1052:	ac 01       	movw	r20, r24
    1054:	6b ed       	ldi	r22, 0xDB	; 219
    1056:	77 ef       	ldi	r23, 0xF7	; 247
    1058:	8c e7       	ldi	r24, 0x7C	; 124
    105a:	95 e4       	ldi	r25, 0x45	; 69
    105c:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
    1060:	2c e1       	ldi	r18, 0x1C	; 28
    1062:	3d ec       	ldi	r19, 0xCD	; 205
    1064:	4c e1       	ldi	r20, 0x1C	; 28
    1066:	50 e4       	ldi	r21, 0x40	; 64
    1068:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
	//return (distanceParamALeft / (ADC_getFilteredValue(LeftChannel) + distanceParamBLeft) + distanceParamCLeft) - LeftOffset;
	//return (ADC_getFilteredValue(LeftChannel));
	
}
    106c:	08 95       	ret

0000106e <getDistanceRight>:

double getDistanceRight(){
	return (distanceParamARight + (distanceParamBRight / ADC_getFilteredValue(RightChannel)));
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <ADC_getFilteredValue>
    1074:	bc 01       	movw	r22, r24
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__floatunsisf>
    107e:	9b 01       	movw	r18, r22
    1080:	ac 01       	movw	r20, r24
    1082:	6e e0       	ldi	r22, 0x0E	; 14
    1084:	7c ed       	ldi	r23, 0xDC	; 220
    1086:	85 e7       	ldi	r24, 0x75	; 117
    1088:	95 e4       	ldi	r25, 0x45	; 69
    108a:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
    108e:	2f e3       	ldi	r18, 0x3F	; 63
    1090:	35 ed       	ldi	r19, 0xD5	; 213
    1092:	44 e1       	ldi	r20, 0x14	; 20
    1094:	50 e4       	ldi	r21, 0x40	; 64
    1096:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
	//return (distanceParamARight / (ADC_getFilteredValue(RightChannel) + distanceParamBRight) + distanceParamCRight) - RightOffset;
	//return (ADC_getFilteredValue(RightChannel));
	
    109a:	08 95       	ret

0000109c <getGlobeWay>:
		maze[coordInMaze->x][coordInMaze->y].marksW +
		maze[coordInMaze->x][coordInMaze->y].marksA +
		maze[coordInMaze->x][coordInMaze->y].marksS +
		maze[coordInMaze->x][coordInMaze->y].marksD
	;
}
    109c:	cf 92       	push	r12
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	fc 01       	movw	r30, r24
    10a6:	c0 84       	ldd	r12, Z+8	; 0x08
    10a8:	d1 84       	ldd	r13, Z+9	; 0x09
    10aa:	e2 84       	ldd	r14, Z+10	; 0x0a
    10ac:	f3 84       	ldd	r15, Z+11	; 0x0b
    10ae:	21 e6       	ldi	r18, 0x61	; 97
    10b0:	3c e6       	ldi	r19, 0x6C	; 108
    10b2:	49 eb       	ldi	r20, 0xB9	; 185
    10b4:	5f e3       	ldi	r21, 0x3F	; 63
    10b6:	c7 01       	movw	r24, r14
    10b8:	b6 01       	movw	r22, r12
    10ba:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    10be:	87 fd       	sbrc	r24, 7
    10c0:	0b c0       	rjmp	.+22     	; 0x10d8 <getGlobeWay+0x3c>
    10c2:	2e e3       	ldi	r18, 0x3E	; 62
    10c4:	33 eb       	ldi	r19, 0xB3	; 179
    10c6:	48 ed       	ldi	r20, 0xD8	; 216
    10c8:	5f e3       	ldi	r21, 0x3F	; 63
    10ca:	c7 01       	movw	r24, r14
    10cc:	b6 01       	movw	r22, r12
    10ce:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
    10d2:	18 16       	cp	r1, r24
    10d4:	0c f0       	brlt	.+2      	; 0x10d8 <getGlobeWay+0x3c>
    10d6:	58 c0       	rjmp	.+176    	; 0x1188 <getGlobeWay+0xec>
    10d8:	2d e2       	ldi	r18, 0x2D	; 45
    10da:	3e e3       	ldi	r19, 0x3E	; 62
    10dc:	41 e4       	ldi	r20, 0x41	; 65
    10de:	50 e4       	ldi	r21, 0x40	; 64
    10e0:	c7 01       	movw	r24, r14
    10e2:	b6 01       	movw	r22, r12
    10e4:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    10e8:	87 fd       	sbrc	r24, 7
    10ea:	10 c0       	rjmp	.+32     	; 0x110c <getGlobeWay+0x70>
    10ec:	2b ed       	ldi	r18, 0xDB	; 219
    10ee:	3f e0       	ldi	r19, 0x0F	; 15
    10f0:	49 e4       	ldi	r20, 0x49	; 73
    10f2:	50 e4       	ldi	r21, 0x40	; 64
    10f4:	c7 01       	movw	r24, r14
    10f6:	b6 01       	movw	r22, r12
    10f8:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
    10fc:	18 16       	cp	r1, r24
    10fe:	34 f0       	brlt	.+12     	; 0x110c <getGlobeWay+0x70>
    1100:	83 e0       	ldi	r24, 0x03	; 3
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	df 90       	pop	r13
    1108:	cf 90       	pop	r12
    110a:	08 95       	ret
    110c:	2b ed       	ldi	r18, 0xDB	; 219
    110e:	3f e0       	ldi	r19, 0x0F	; 15
    1110:	49 e4       	ldi	r20, 0x49	; 73
    1112:	50 ec       	ldi	r21, 0xC0	; 192
    1114:	c7 01       	movw	r24, r14
    1116:	b6 01       	movw	r22, r12
    1118:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    111c:	87 fd       	sbrc	r24, 7
    111e:	0a c0       	rjmp	.+20     	; 0x1134 <getGlobeWay+0x98>
    1120:	2d e2       	ldi	r18, 0x2D	; 45
    1122:	3e e3       	ldi	r19, 0x3E	; 62
    1124:	41 e4       	ldi	r20, 0x41	; 65
    1126:	50 ec       	ldi	r21, 0xC0	; 192
    1128:	c7 01       	movw	r24, r14
    112a:	b6 01       	movw	r22, r12
    112c:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
    1130:	18 16       	cp	r1, r24
    1132:	34 f7       	brge	.-52     	; 0x1100 <getGlobeWay+0x64>
    1134:	26 ed       	ldi	r18, 0xD6	; 214
    1136:	35 e3       	ldi	r19, 0x35	; 53
    1138:	4a ef       	ldi	r20, 0xFA	; 250
    113a:	5d e3       	ldi	r21, 0x3D	; 61
    113c:	c7 01       	movw	r24, r14
    113e:	b6 01       	movw	r22, r12
    1140:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
    1144:	18 16       	cp	r1, r24
    1146:	84 f0       	brlt	.+32     	; 0x1168 <getGlobeWay+0xcc>
    1148:	26 ed       	ldi	r18, 0xD6	; 214
    114a:	35 e3       	ldi	r19, 0x35	; 53
    114c:	4a ef       	ldi	r20, 0xFA	; 250
    114e:	5d eb       	ldi	r21, 0xBD	; 189
    1150:	c7 01       	movw	r24, r14
    1152:	b6 01       	movw	r22, r12
    1154:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    1158:	87 fd       	sbrc	r24, 7
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <getGlobeWay+0xcc>
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	cf 90       	pop	r12
    1166:	08 95       	ret
    1168:	21 e6       	ldi	r18, 0x61	; 97
    116a:	3c e6       	ldi	r19, 0x6C	; 108
    116c:	49 eb       	ldi	r20, 0xB9	; 185
    116e:	5f eb       	ldi	r21, 0xBF	; 191
    1170:	c7 01       	movw	r24, r14
    1172:	b6 01       	movw	r22, r12
    1174:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
    1178:	87 fd       	sbrc	r24, 7
    117a:	0c c0       	rjmp	.+24     	; 0x1194 <getGlobeWay+0xf8>
    117c:	84 e0       	ldi	r24, 0x04	; 4
    117e:	ff 90       	pop	r15
    1180:	ef 90       	pop	r14
    1182:	df 90       	pop	r13
    1184:	cf 90       	pop	r12
    1186:	08 95       	ret
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	08 95       	ret
    1194:	2e e3       	ldi	r18, 0x3E	; 62
    1196:	33 eb       	ldi	r19, 0xB3	; 179
    1198:	48 ed       	ldi	r20, 0xD8	; 216
    119a:	5f eb       	ldi	r21, 0xBF	; 191
    119c:	c7 01       	movw	r24, r14
    119e:	b6 01       	movw	r22, r12
    11a0:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    11a4:	18 16       	cp	r1, r24
    11a6:	54 f7       	brge	.-44     	; 0x117c <getGlobeWay+0xe0>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	ab cf       	rjmp	.-170    	; 0x1102 <getGlobeWay+0x66>

000011ac <findGlobalWay>:
    11ac:	61 11       	cpse	r22, r1
    11ae:	0a c0       	rjmp	.+20     	; 0x11c4 <findGlobalWay+0x18>
    11b0:	88 23       	and	r24, r24
    11b2:	c1 f0       	breq	.+48     	; 0x11e4 <findGlobalWay+0x38>
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	d1 f0       	breq	.+52     	; 0x11ec <findGlobalWay+0x40>
    11b8:	83 30       	cpi	r24, 0x03	; 3
    11ba:	d1 f0       	breq	.+52     	; 0x11f0 <findGlobalWay+0x44>
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	41 f4       	brne	.+16     	; 0x11d0 <findGlobalWay+0x24>
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	08 95       	ret
    11c4:	63 30       	cpi	r22, 0x03	; 3
    11c6:	81 f0       	breq	.+32     	; 0x11e8 <findGlobalWay+0x3c>
    11c8:	61 30       	cpi	r22, 0x01	; 1
    11ca:	21 f0       	breq	.+8      	; 0x11d4 <findGlobalWay+0x28>
    11cc:	62 30       	cpi	r22, 0x02	; 2
    11ce:	c9 f0       	breq	.+50     	; 0x1202 <findGlobalWay+0x56>
    11d0:	84 e0       	ldi	r24, 0x04	; 4
    11d2:	08 95       	ret
    11d4:	88 23       	and	r24, r24
    11d6:	a1 f3       	breq	.-24     	; 0x11c0 <findGlobalWay+0x14>
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	51 f0       	breq	.+20     	; 0x11f0 <findGlobalWay+0x44>
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	31 f0       	breq	.+12     	; 0x11ec <findGlobalWay+0x40>
    11e0:	82 30       	cpi	r24, 0x02	; 2
    11e2:	b1 f7       	brne	.-20     	; 0x11d0 <findGlobalWay+0x24>
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	08 95       	ret
    11e8:	81 11       	cpse	r24, r1
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <findGlobalWay+0x48>
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	08 95       	ret
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	08 95       	ret
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	21 f3       	breq	.-56     	; 0x11c0 <findGlobalWay+0x14>
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	a1 f3       	breq	.-24     	; 0x11e4 <findGlobalWay+0x38>
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	41 f7       	brne	.-48     	; 0x11d0 <findGlobalWay+0x24>
    1200:	08 95       	ret
    1202:	88 23       	and	r24, r24
    1204:	a9 f3       	breq	.-22     	; 0x11f0 <findGlobalWay+0x44>
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	69 f3       	breq	.-38     	; 0x11e4 <findGlobalWay+0x38>
    120a:	83 30       	cpi	r24, 0x03	; 3
    120c:	c9 f2       	breq	.-78     	; 0x11c0 <findGlobalWay+0x14>
    120e:	82 30       	cpi	r24, 0x02	; 2
    1210:	f9 f6       	brne	.-66     	; 0x11d0 <findGlobalWay+0x24>
    1212:	ec cf       	rjmp	.-40     	; 0x11ec <findGlobalWay+0x40>

00001214 <setWall>:
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	8a 01       	movw	r16, r20
    121c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <findGlobalWay>
    1220:	c8 2f       	mov	r28, r24
    1222:	1f 92       	push	r1
    1224:	8f 93       	push	r24
    1226:	8a e4       	ldi	r24, 0x4A	; 74
    1228:	92 e0       	ldi	r25, 0x02	; 2
    122a:	9f 93       	push	r25
    122c:	8f 93       	push	r24
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	8f 93       	push	r24
    1232:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	c1 11       	cpse	r28, r1
    1242:	2b c0       	rjmp	.+86     	; 0x129a <setWall+0x86>
    1244:	f8 01       	movw	r30, r16
    1246:	60 81       	ld	r22, Z
    1248:	71 81       	ldd	r23, Z+1	; 0x01
    124a:	22 81       	ldd	r18, Z+2	; 0x02
    124c:	33 81       	ldd	r19, Z+3	; 0x03
    124e:	54 e1       	ldi	r21, 0x14	; 20
    1250:	52 9f       	mul	r21, r18
    1252:	f0 01       	movw	r30, r0
    1254:	53 9f       	mul	r21, r19
    1256:	f0 0d       	add	r31, r0
    1258:	11 24       	eor	r1, r1
    125a:	4c e8       	ldi	r20, 0x8C	; 140
    125c:	46 9f       	mul	r20, r22
    125e:	c0 01       	movw	r24, r0
    1260:	47 9f       	mul	r20, r23
    1262:	90 0d       	add	r25, r0
    1264:	11 24       	eor	r1, r1
    1266:	e8 0f       	add	r30, r24
    1268:	f9 1f       	adc	r31, r25
    126a:	e7 5c       	subi	r30, 0xC7	; 199
    126c:	f7 4f       	sbci	r31, 0xF7	; 247
    126e:	41 e0       	ldi	r20, 0x01	; 1
    1270:	42 8b       	std	Z+18, r20	; 0x12
    1272:	12 16       	cp	r1, r18
    1274:	13 06       	cpc	r1, r19
    1276:	6c f4       	brge	.+26     	; 0x1292 <setWall+0x7e>
    1278:	21 50       	subi	r18, 0x01	; 1
    127a:	31 09       	sbc	r19, r1
    127c:	52 9f       	mul	r21, r18
    127e:	f0 01       	movw	r30, r0
    1280:	53 9f       	mul	r21, r19
    1282:	f0 0d       	add	r31, r0
    1284:	11 24       	eor	r1, r1
    1286:	8e 0f       	add	r24, r30
    1288:	9f 1f       	adc	r25, r31
    128a:	fc 01       	movw	r30, r24
    128c:	e7 5c       	subi	r30, 0xC7	; 199
    128e:	f7 4f       	sbci	r31, 0xF7	; 247
    1290:	43 8b       	std	Z+19, r20	; 0x13
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	08 95       	ret
    129a:	c3 30       	cpi	r28, 0x03	; 3
    129c:	61 f1       	breq	.+88     	; 0x12f6 <setWall+0xe2>
    129e:	c1 30       	cpi	r28, 0x01	; 1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <setWall+0x90>
    12a2:	54 c0       	rjmp	.+168    	; 0x134c <setWall+0x138>
    12a4:	c2 30       	cpi	r28, 0x02	; 2
    12a6:	a9 f7       	brne	.-22     	; 0x1292 <setWall+0x7e>
    12a8:	f8 01       	movw	r30, r16
    12aa:	80 81       	ld	r24, Z
    12ac:	91 81       	ldd	r25, Z+1	; 0x01
    12ae:	22 81       	ldd	r18, Z+2	; 0x02
    12b0:	33 81       	ldd	r19, Z+3	; 0x03
    12b2:	44 e1       	ldi	r20, 0x14	; 20
    12b4:	42 9f       	mul	r20, r18
    12b6:	b0 01       	movw	r22, r0
    12b8:	43 9f       	mul	r20, r19
    12ba:	70 0d       	add	r23, r0
    12bc:	11 24       	eor	r1, r1
    12be:	5c e8       	ldi	r21, 0x8C	; 140
    12c0:	58 9f       	mul	r21, r24
    12c2:	f0 01       	movw	r30, r0
    12c4:	59 9f       	mul	r21, r25
    12c6:	f0 0d       	add	r31, r0
    12c8:	11 24       	eor	r1, r1
    12ca:	e6 0f       	add	r30, r22
    12cc:	f7 1f       	adc	r31, r23
    12ce:	e7 5c       	subi	r30, 0xC7	; 199
    12d0:	f7 4f       	sbci	r31, 0xF7	; 247
    12d2:	41 e0       	ldi	r20, 0x01	; 1
    12d4:	41 8b       	std	Z+17, r20	; 0x11
    12d6:	86 30       	cpi	r24, 0x06	; 6
    12d8:	91 05       	cpc	r25, r1
    12da:	dc f6       	brge	.-74     	; 0x1292 <setWall+0x7e>
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	58 9f       	mul	r21, r24
    12e0:	90 01       	movw	r18, r0
    12e2:	59 9f       	mul	r21, r25
    12e4:	30 0d       	add	r19, r0
    12e6:	11 24       	eor	r1, r1
    12e8:	fb 01       	movw	r30, r22
    12ea:	e2 0f       	add	r30, r18
    12ec:	f3 1f       	adc	r31, r19
    12ee:	e7 5c       	subi	r30, 0xC7	; 199
    12f0:	f7 4f       	sbci	r31, 0xF7	; 247
    12f2:	40 8b       	std	Z+16, r20	; 0x10
    12f4:	ce cf       	rjmp	.-100    	; 0x1292 <setWall+0x7e>
    12f6:	f8 01       	movw	r30, r16
    12f8:	80 81       	ld	r24, Z
    12fa:	91 81       	ldd	r25, Z+1	; 0x01
    12fc:	22 81       	ldd	r18, Z+2	; 0x02
    12fe:	33 81       	ldd	r19, Z+3	; 0x03
    1300:	44 e1       	ldi	r20, 0x14	; 20
    1302:	42 9f       	mul	r20, r18
    1304:	b0 01       	movw	r22, r0
    1306:	43 9f       	mul	r20, r19
    1308:	70 0d       	add	r23, r0
    130a:	11 24       	eor	r1, r1
    130c:	5c e8       	ldi	r21, 0x8C	; 140
    130e:	58 9f       	mul	r21, r24
    1310:	f0 01       	movw	r30, r0
    1312:	59 9f       	mul	r21, r25
    1314:	f0 0d       	add	r31, r0
    1316:	11 24       	eor	r1, r1
    1318:	e6 0f       	add	r30, r22
    131a:	f7 1f       	adc	r31, r23
    131c:	e7 5c       	subi	r30, 0xC7	; 199
    131e:	f7 4f       	sbci	r31, 0xF7	; 247
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	40 8b       	std	Z+16, r20	; 0x10
    1324:	18 16       	cp	r1, r24
    1326:	19 06       	cpc	r1, r25
    1328:	0c f0       	brlt	.+2      	; 0x132c <setWall+0x118>
    132a:	b3 cf       	rjmp	.-154    	; 0x1292 <setWall+0x7e>
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	58 9f       	mul	r21, r24
    1330:	90 01       	movw	r18, r0
    1332:	59 9f       	mul	r21, r25
    1334:	30 0d       	add	r19, r0
    1336:	11 24       	eor	r1, r1
    1338:	fb 01       	movw	r30, r22
    133a:	e2 0f       	add	r30, r18
    133c:	f3 1f       	adc	r31, r19
    133e:	e7 5c       	subi	r30, 0xC7	; 199
    1340:	f7 4f       	sbci	r31, 0xF7	; 247
    1342:	41 8b       	std	Z+17, r20	; 0x11
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret
    134c:	f8 01       	movw	r30, r16
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	22 81       	ldd	r18, Z+2	; 0x02
    1354:	33 81       	ldd	r19, Z+3	; 0x03
    1356:	44 e1       	ldi	r20, 0x14	; 20
    1358:	42 9f       	mul	r20, r18
    135a:	f0 01       	movw	r30, r0
    135c:	43 9f       	mul	r20, r19
    135e:	f0 0d       	add	r31, r0
    1360:	11 24       	eor	r1, r1
    1362:	5c e8       	ldi	r21, 0x8C	; 140
    1364:	56 9f       	mul	r21, r22
    1366:	c0 01       	movw	r24, r0
    1368:	57 9f       	mul	r21, r23
    136a:	90 0d       	add	r25, r0
    136c:	11 24       	eor	r1, r1
    136e:	e8 0f       	add	r30, r24
    1370:	f9 1f       	adc	r31, r25
    1372:	e7 5c       	subi	r30, 0xC7	; 199
    1374:	f7 4f       	sbci	r31, 0xF7	; 247
    1376:	c3 8b       	std	Z+19, r28	; 0x13
    1378:	26 30       	cpi	r18, 0x06	; 6
    137a:	31 05       	cpc	r19, r1
    137c:	0c f0       	brlt	.+2      	; 0x1380 <setWall+0x16c>
    137e:	89 cf       	rjmp	.-238    	; 0x1292 <setWall+0x7e>
    1380:	2f 5f       	subi	r18, 0xFF	; 255
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	42 9f       	mul	r20, r18
    1386:	f0 01       	movw	r30, r0
    1388:	43 9f       	mul	r20, r19
    138a:	f0 0d       	add	r31, r0
    138c:	11 24       	eor	r1, r1
    138e:	8e 0f       	add	r24, r30
    1390:	9f 1f       	adc	r25, r31
    1392:	fc 01       	movw	r30, r24
    1394:	e7 5c       	subi	r30, 0xC7	; 199
    1396:	f7 4f       	sbci	r31, 0xF7	; 247
    1398:	c2 8b       	std	Z+18, r28	; 0x12
    139a:	7b cf       	rjmp	.-266    	; 0x1292 <setWall+0x7e>

0000139c <marks>:
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	eb 01       	movw	r28, r22
    13a4:	14 2f       	mov	r17, r20
    13a6:	0e 94 4e 08 	call	0x109c	; 0x109c <getGlobeWay>
    13aa:	68 2f       	mov	r22, r24
    13ac:	81 2f       	mov	r24, r17
    13ae:	0e 94 d6 08 	call	0x11ac	; 0x11ac <findGlobalWay>
    13b2:	88 23       	and	r24, r24
    13b4:	69 f0       	breq	.+26     	; 0x13d0 <marks+0x34>
    13b6:	83 30       	cpi	r24, 0x03	; 3
    13b8:	29 f1       	breq	.+74     	; 0x1404 <marks+0x68>
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <marks+0x24>
    13be:	56 c0       	rjmp	.+172    	; 0x146c <marks+0xd0>
    13c0:	82 30       	cpi	r24, 0x02	; 2
    13c2:	d1 f1       	breq	.+116    	; 0x1438 <marks+0x9c>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	08 95       	ret
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	9b 81       	ldd	r25, Y+3	; 0x03
    13d4:	28 81       	ld	r18, Y
    13d6:	39 81       	ldd	r19, Y+1	; 0x01
    13d8:	44 e1       	ldi	r20, 0x14	; 20
    13da:	48 9f       	mul	r20, r24
    13dc:	f0 01       	movw	r30, r0
    13de:	49 9f       	mul	r20, r25
    13e0:	f0 0d       	add	r31, r0
    13e2:	11 24       	eor	r1, r1
    13e4:	4c e8       	ldi	r20, 0x8C	; 140
    13e6:	42 9f       	mul	r20, r18
    13e8:	c0 01       	movw	r24, r0
    13ea:	43 9f       	mul	r20, r19
    13ec:	90 0d       	add	r25, r0
    13ee:	11 24       	eor	r1, r1
    13f0:	e8 0f       	add	r30, r24
    13f2:	f9 1f       	adc	r31, r25
    13f4:	e7 5c       	subi	r30, 0xC7	; 199
    13f6:	f7 4f       	sbci	r31, 0xF7	; 247
    13f8:	84 85       	ldd	r24, Z+12	; 0x0c
    13fa:	95 85       	ldd	r25, Z+13	; 0x0d
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	08 95       	ret
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	9b 81       	ldd	r25, Y+3	; 0x03
    1408:	28 81       	ld	r18, Y
    140a:	39 81       	ldd	r19, Y+1	; 0x01
    140c:	44 e1       	ldi	r20, 0x14	; 20
    140e:	48 9f       	mul	r20, r24
    1410:	f0 01       	movw	r30, r0
    1412:	49 9f       	mul	r20, r25
    1414:	f0 0d       	add	r31, r0
    1416:	11 24       	eor	r1, r1
    1418:	4c e8       	ldi	r20, 0x8C	; 140
    141a:	42 9f       	mul	r20, r18
    141c:	c0 01       	movw	r24, r0
    141e:	43 9f       	mul	r20, r19
    1420:	90 0d       	add	r25, r0
    1422:	11 24       	eor	r1, r1
    1424:	e8 0f       	add	r30, r24
    1426:	f9 1f       	adc	r31, r25
    1428:	e7 5c       	subi	r30, 0xC7	; 199
    142a:	f7 4f       	sbci	r31, 0xF7	; 247
    142c:	82 85       	ldd	r24, Z+10	; 0x0a
    142e:	93 85       	ldd	r25, Z+11	; 0x0b
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	08 95       	ret
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	9b 81       	ldd	r25, Y+3	; 0x03
    143c:	28 81       	ld	r18, Y
    143e:	39 81       	ldd	r19, Y+1	; 0x01
    1440:	44 e1       	ldi	r20, 0x14	; 20
    1442:	48 9f       	mul	r20, r24
    1444:	f0 01       	movw	r30, r0
    1446:	49 9f       	mul	r20, r25
    1448:	f0 0d       	add	r31, r0
    144a:	11 24       	eor	r1, r1
    144c:	4c e8       	ldi	r20, 0x8C	; 140
    144e:	42 9f       	mul	r20, r18
    1450:	c0 01       	movw	r24, r0
    1452:	43 9f       	mul	r20, r19
    1454:	90 0d       	add	r25, r0
    1456:	11 24       	eor	r1, r1
    1458:	e8 0f       	add	r30, r24
    145a:	f9 1f       	adc	r31, r25
    145c:	e7 5c       	subi	r30, 0xC7	; 199
    145e:	f7 4f       	sbci	r31, 0xF7	; 247
    1460:	80 85       	ldd	r24, Z+8	; 0x08
    1462:	91 85       	ldd	r25, Z+9	; 0x09
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	08 95       	ret
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	9b 81       	ldd	r25, Y+3	; 0x03
    1470:	28 81       	ld	r18, Y
    1472:	39 81       	ldd	r19, Y+1	; 0x01
    1474:	44 e1       	ldi	r20, 0x14	; 20
    1476:	48 9f       	mul	r20, r24
    1478:	f0 01       	movw	r30, r0
    147a:	49 9f       	mul	r20, r25
    147c:	f0 0d       	add	r31, r0
    147e:	11 24       	eor	r1, r1
    1480:	4c e8       	ldi	r20, 0x8C	; 140
    1482:	42 9f       	mul	r20, r18
    1484:	c0 01       	movw	r24, r0
    1486:	43 9f       	mul	r20, r19
    1488:	90 0d       	add	r25, r0
    148a:	11 24       	eor	r1, r1
    148c:	e8 0f       	add	r30, r24
    148e:	f9 1f       	adc	r31, r25
    1490:	e7 5c       	subi	r30, 0xC7	; 199
    1492:	f7 4f       	sbci	r31, 0xF7	; 247
    1494:	86 85       	ldd	r24, Z+14	; 0x0e
    1496:	97 85       	ldd	r25, Z+15	; 0x0f
    1498:	97 cf       	rjmp	.-210    	; 0x13c8 <marks+0x2c>

0000149a <mark>:
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	eb 01       	movw	r28, r22
    14a2:	14 2f       	mov	r17, r20
    14a4:	0e 94 4e 08 	call	0x109c	; 0x109c <getGlobeWay>
    14a8:	68 2f       	mov	r22, r24
    14aa:	81 2f       	mov	r24, r17
    14ac:	0e 94 d6 08 	call	0x11ac	; 0x11ac <findGlobalWay>
    14b0:	88 23       	and	r24, r24
    14b2:	29 f1       	breq	.+74     	; 0x14fe <mark+0x64>
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	09 f4       	brne	.+2      	; 0x14ba <mark+0x20>
    14b8:	3f c0       	rjmp	.+126    	; 0x1538 <mark+0x9e>
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <mark+0x26>
    14be:	59 c0       	rjmp	.+178    	; 0x1572 <mark+0xd8>
    14c0:	82 30       	cpi	r24, 0x02	; 2
    14c2:	c9 f4       	brne	.+50     	; 0x14f6 <mark+0x5c>
    14c4:	28 81       	ld	r18, Y
    14c6:	39 81       	ldd	r19, Y+1	; 0x01
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	9b 81       	ldd	r25, Y+3	; 0x03
    14cc:	44 e1       	ldi	r20, 0x14	; 20
    14ce:	48 9f       	mul	r20, r24
    14d0:	f0 01       	movw	r30, r0
    14d2:	49 9f       	mul	r20, r25
    14d4:	f0 0d       	add	r31, r0
    14d6:	11 24       	eor	r1, r1
    14d8:	4c e8       	ldi	r20, 0x8C	; 140
    14da:	42 9f       	mul	r20, r18
    14dc:	c0 01       	movw	r24, r0
    14de:	43 9f       	mul	r20, r19
    14e0:	90 0d       	add	r25, r0
    14e2:	11 24       	eor	r1, r1
    14e4:	e8 0f       	add	r30, r24
    14e6:	f9 1f       	adc	r31, r25
    14e8:	e7 5c       	subi	r30, 0xC7	; 199
    14ea:	f7 4f       	sbci	r31, 0xF7	; 247
    14ec:	80 85       	ldd	r24, Z+8	; 0x08
    14ee:	91 85       	ldd	r25, Z+9	; 0x09
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	91 87       	std	Z+9, r25	; 0x09
    14f4:	80 87       	std	Z+8, r24	; 0x08
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	08 95       	ret
    14fe:	28 81       	ld	r18, Y
    1500:	39 81       	ldd	r19, Y+1	; 0x01
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	9b 81       	ldd	r25, Y+3	; 0x03
    1506:	44 e1       	ldi	r20, 0x14	; 20
    1508:	48 9f       	mul	r20, r24
    150a:	f0 01       	movw	r30, r0
    150c:	49 9f       	mul	r20, r25
    150e:	f0 0d       	add	r31, r0
    1510:	11 24       	eor	r1, r1
    1512:	4c e8       	ldi	r20, 0x8C	; 140
    1514:	42 9f       	mul	r20, r18
    1516:	c0 01       	movw	r24, r0
    1518:	43 9f       	mul	r20, r19
    151a:	90 0d       	add	r25, r0
    151c:	11 24       	eor	r1, r1
    151e:	e8 0f       	add	r30, r24
    1520:	f9 1f       	adc	r31, r25
    1522:	e7 5c       	subi	r30, 0xC7	; 199
    1524:	f7 4f       	sbci	r31, 0xF7	; 247
    1526:	84 85       	ldd	r24, Z+12	; 0x0c
    1528:	95 85       	ldd	r25, Z+13	; 0x0d
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	95 87       	std	Z+13, r25	; 0x0d
    152e:	84 87       	std	Z+12, r24	; 0x0c
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	08 95       	ret
    1538:	28 81       	ld	r18, Y
    153a:	39 81       	ldd	r19, Y+1	; 0x01
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	9b 81       	ldd	r25, Y+3	; 0x03
    1540:	44 e1       	ldi	r20, 0x14	; 20
    1542:	48 9f       	mul	r20, r24
    1544:	f0 01       	movw	r30, r0
    1546:	49 9f       	mul	r20, r25
    1548:	f0 0d       	add	r31, r0
    154a:	11 24       	eor	r1, r1
    154c:	4c e8       	ldi	r20, 0x8C	; 140
    154e:	42 9f       	mul	r20, r18
    1550:	c0 01       	movw	r24, r0
    1552:	43 9f       	mul	r20, r19
    1554:	90 0d       	add	r25, r0
    1556:	11 24       	eor	r1, r1
    1558:	e8 0f       	add	r30, r24
    155a:	f9 1f       	adc	r31, r25
    155c:	e7 5c       	subi	r30, 0xC7	; 199
    155e:	f7 4f       	sbci	r31, 0xF7	; 247
    1560:	82 85       	ldd	r24, Z+10	; 0x0a
    1562:	93 85       	ldd	r25, Z+11	; 0x0b
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	93 87       	std	Z+11, r25	; 0x0b
    1568:	82 87       	std	Z+10, r24	; 0x0a
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	08 95       	ret
    1572:	28 81       	ld	r18, Y
    1574:	39 81       	ldd	r19, Y+1	; 0x01
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	9b 81       	ldd	r25, Y+3	; 0x03
    157a:	44 e1       	ldi	r20, 0x14	; 20
    157c:	48 9f       	mul	r20, r24
    157e:	f0 01       	movw	r30, r0
    1580:	49 9f       	mul	r20, r25
    1582:	f0 0d       	add	r31, r0
    1584:	11 24       	eor	r1, r1
    1586:	4c e8       	ldi	r20, 0x8C	; 140
    1588:	42 9f       	mul	r20, r18
    158a:	c0 01       	movw	r24, r0
    158c:	43 9f       	mul	r20, r19
    158e:	90 0d       	add	r25, r0
    1590:	11 24       	eor	r1, r1
    1592:	e8 0f       	add	r30, r24
    1594:	f9 1f       	adc	r31, r25
    1596:	e7 5c       	subi	r30, 0xC7	; 199
    1598:	f7 4f       	sbci	r31, 0xF7	; 247
    159a:	86 85       	ldd	r24, Z+14	; 0x0e
    159c:	97 85       	ldd	r25, Z+15	; 0x0f
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	97 87       	std	Z+15, r25	; 0x0f
    15a2:	86 87       	std	Z+14, r24	; 0x0e
    15a4:	a8 cf       	rjmp	.-176    	; 0x14f6 <mark+0x5c>

000015a6 <isWalled>:

bool isWalled(Pose_t* pose, coordinate* coordInMaze, LocalWay dirToCheck){
    15a6:	1f 93       	push	r17
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	eb 01       	movw	r28, r22
    15ae:	14 2f       	mov	r17, r20
	GlobeWay showing = getGlobeWay(pose);
    15b0:	0e 94 4e 08 	call	0x109c	; 0x109c <getGlobeWay>
	GlobeWay wayToCheck = findGlobalWay(dirToCheck, showing);
    15b4:	68 2f       	mov	r22, r24
    15b6:	81 2f       	mov	r24, r17
    15b8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <findGlobalWay>
	bool out = true;
	if (wayToCheck == NORTH){
    15bc:	88 23       	and	r24, r24
    15be:	61 f0       	breq	.+24     	; 0x15d8 <isWalled+0x32>
		out = maze[coordInMaze->x][coordInMaze->y].wallW;
	}
	else if (wayToCheck == WEST){
    15c0:	83 30       	cpi	r24, 0x03	; 3
    15c2:	19 f1       	breq	.+70     	; 0x160a <isWalled+0x64>
		out = maze[coordInMaze->x][coordInMaze->y].wallA;
	}
	else if (wayToCheck == SOUTH){
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <isWalled+0x24>
    15c8:	52 c0       	rjmp	.+164    	; 0x166e <isWalled+0xc8>
		out = maze[coordInMaze->x][coordInMaze->y].wallS;
	}
	else if (wayToCheck == EAST){
    15ca:	82 30       	cpi	r24, 0x02	; 2
    15cc:	b9 f1       	breq	.+110    	; 0x163c <isWalled+0x96>
}

bool isWalled(Pose_t* pose, coordinate* coordInMaze, LocalWay dirToCheck){
	GlobeWay showing = getGlobeWay(pose);
	GlobeWay wayToCheck = findGlobalWay(dirToCheck, showing);
	bool out = true;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if (wayToCheck == EAST){
		out = maze[coordInMaze->x][coordInMaze->y].wallD;
	}
	return out;
}
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	1f 91       	pop	r17
    15d6:	08 95       	ret
bool isWalled(Pose_t* pose, coordinate* coordInMaze, LocalWay dirToCheck){
	GlobeWay showing = getGlobeWay(pose);
	GlobeWay wayToCheck = findGlobalWay(dirToCheck, showing);
	bool out = true;
	if (wayToCheck == NORTH){
		out = maze[coordInMaze->x][coordInMaze->y].wallW;
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	9b 81       	ldd	r25, Y+3	; 0x03
    15dc:	28 81       	ld	r18, Y
    15de:	39 81       	ldd	r19, Y+1	; 0x01
    15e0:	44 e1       	ldi	r20, 0x14	; 20
    15e2:	48 9f       	mul	r20, r24
    15e4:	f0 01       	movw	r30, r0
    15e6:	49 9f       	mul	r20, r25
    15e8:	f0 0d       	add	r31, r0
    15ea:	11 24       	eor	r1, r1
    15ec:	4c e8       	ldi	r20, 0x8C	; 140
    15ee:	42 9f       	mul	r20, r18
    15f0:	c0 01       	movw	r24, r0
    15f2:	43 9f       	mul	r20, r19
    15f4:	90 0d       	add	r25, r0
    15f6:	11 24       	eor	r1, r1
    15f8:	e8 0f       	add	r30, r24
    15fa:	f9 1f       	adc	r31, r25
    15fc:	e7 5c       	subi	r30, 0xC7	; 199
    15fe:	f7 4f       	sbci	r31, 0xF7	; 247
    1600:	82 89       	ldd	r24, Z+18	; 0x12
	}
	else if (wayToCheck == EAST){
		out = maze[coordInMaze->x][coordInMaze->y].wallD;
	}
	return out;
}
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	08 95       	ret
	bool out = true;
	if (wayToCheck == NORTH){
		out = maze[coordInMaze->x][coordInMaze->y].wallW;
	}
	else if (wayToCheck == WEST){
		out = maze[coordInMaze->x][coordInMaze->y].wallA;
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	9b 81       	ldd	r25, Y+3	; 0x03
    160e:	28 81       	ld	r18, Y
    1610:	39 81       	ldd	r19, Y+1	; 0x01
    1612:	44 e1       	ldi	r20, 0x14	; 20
    1614:	48 9f       	mul	r20, r24
    1616:	f0 01       	movw	r30, r0
    1618:	49 9f       	mul	r20, r25
    161a:	f0 0d       	add	r31, r0
    161c:	11 24       	eor	r1, r1
    161e:	4c e8       	ldi	r20, 0x8C	; 140
    1620:	42 9f       	mul	r20, r18
    1622:	c0 01       	movw	r24, r0
    1624:	43 9f       	mul	r20, r19
    1626:	90 0d       	add	r25, r0
    1628:	11 24       	eor	r1, r1
    162a:	e8 0f       	add	r30, r24
    162c:	f9 1f       	adc	r31, r25
    162e:	e7 5c       	subi	r30, 0xC7	; 199
    1630:	f7 4f       	sbci	r31, 0xF7	; 247
    1632:	80 89       	ldd	r24, Z+16	; 0x10
	}
	else if (wayToCheck == EAST){
		out = maze[coordInMaze->x][coordInMaze->y].wallD;
	}
	return out;
}
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	08 95       	ret
	}
	else if (wayToCheck == SOUTH){
		out = maze[coordInMaze->x][coordInMaze->y].wallS;
	}
	else if (wayToCheck == EAST){
		out = maze[coordInMaze->x][coordInMaze->y].wallD;
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	9b 81       	ldd	r25, Y+3	; 0x03
    1640:	28 81       	ld	r18, Y
    1642:	39 81       	ldd	r19, Y+1	; 0x01
    1644:	44 e1       	ldi	r20, 0x14	; 20
    1646:	48 9f       	mul	r20, r24
    1648:	f0 01       	movw	r30, r0
    164a:	49 9f       	mul	r20, r25
    164c:	f0 0d       	add	r31, r0
    164e:	11 24       	eor	r1, r1
    1650:	4c e8       	ldi	r20, 0x8C	; 140
    1652:	42 9f       	mul	r20, r18
    1654:	c0 01       	movw	r24, r0
    1656:	43 9f       	mul	r20, r19
    1658:	90 0d       	add	r25, r0
    165a:	11 24       	eor	r1, r1
    165c:	e8 0f       	add	r30, r24
    165e:	f9 1f       	adc	r31, r25
    1660:	e7 5c       	subi	r30, 0xC7	; 199
    1662:	f7 4f       	sbci	r31, 0xF7	; 247
    1664:	81 89       	ldd	r24, Z+17	; 0x11
	}
	return out;
}
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	08 95       	ret
	}
	else if (wayToCheck == WEST){
		out = maze[coordInMaze->x][coordInMaze->y].wallA;
	}
	else if (wayToCheck == SOUTH){
		out = maze[coordInMaze->x][coordInMaze->y].wallS;
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	9b 81       	ldd	r25, Y+3	; 0x03
    1672:	28 81       	ld	r18, Y
    1674:	39 81       	ldd	r19, Y+1	; 0x01
    1676:	44 e1       	ldi	r20, 0x14	; 20
    1678:	48 9f       	mul	r20, r24
    167a:	f0 01       	movw	r30, r0
    167c:	49 9f       	mul	r20, r25
    167e:	f0 0d       	add	r31, r0
    1680:	11 24       	eor	r1, r1
    1682:	4c e8       	ldi	r20, 0x8C	; 140
    1684:	42 9f       	mul	r20, r18
    1686:	c0 01       	movw	r24, r0
    1688:	43 9f       	mul	r20, r19
    168a:	90 0d       	add	r25, r0
    168c:	11 24       	eor	r1, r1
    168e:	e8 0f       	add	r30, r24
    1690:	f9 1f       	adc	r31, r25
    1692:	e7 5c       	subi	r30, 0xC7	; 199
    1694:	f7 4f       	sbci	r31, 0xF7	; 247
    1696:	83 89       	ldd	r24, Z+19	; 0x13
    1698:	9b cf       	rjmp	.-202    	; 0x15d0 <isWalled+0x2a>

0000169a <wayLessMarks>:
		out = maze[coordInMaze->x][coordInMaze->y].wallD;
	}
	return out;
}

LocalWay wayLessMarks(Pose_t* pose, coordinate* coordInMaze){
    169a:	af 92       	push	r10
    169c:	bf 92       	push	r11
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	ec 01       	movw	r28, r24
    16ae:	8b 01       	movw	r16, r22
	LocalWay less = F;
	int lessMarks = 9999;
	
	int temp = marks(pose, coordInMaze, W);
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	0e 94 ce 09 	call	0x139c	; 0x139c <marks>
    16b6:	7c 01       	movw	r14, r24
	if (temp < lessMarks && !isWalled(pose, coordInMaze, W)){
    16b8:	8f e0       	ldi	r24, 0x0F	; 15
    16ba:	e8 16       	cp	r14, r24
    16bc:	87 e2       	ldi	r24, 0x27	; 39
    16be:	f8 06       	cpc	r15, r24
    16c0:	44 f4       	brge	.+16     	; 0x16d2 <wayLessMarks+0x38>
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	b8 01       	movw	r22, r16
    16c6:	ce 01       	movw	r24, r28
    16c8:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <isWalled>
    16cc:	88 23       	and	r24, r24
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <wayLessMarks+0x38>
    16d0:	4a c0       	rjmp	.+148    	; 0x1766 <wayLessMarks+0xcc>
	return out;
}

LocalWay wayLessMarks(Pose_t* pose, coordinate* coordInMaze){
	LocalWay less = F;
	int lessMarks = 9999;
    16d2:	2f e0       	ldi	r18, 0x0F	; 15
    16d4:	e2 2e       	mov	r14, r18
    16d6:	27 e2       	ldi	r18, 0x27	; 39
    16d8:	f2 2e       	mov	r15, r18
	}
	return out;
}

LocalWay wayLessMarks(Pose_t* pose, coordinate* coordInMaze){
	LocalWay less = F;
    16da:	34 e0       	ldi	r19, 0x04	; 4
    16dc:	d3 2e       	mov	r13, r19
	if (temp < lessMarks && !isWalled(pose, coordInMaze, W)){
		less = W;
		lessMarks = temp;
	}
	
	temp = marks(pose, coordInMaze, A);
    16de:	41 e0       	ldi	r20, 0x01	; 1
    16e0:	b8 01       	movw	r22, r16
    16e2:	ce 01       	movw	r24, r28
    16e4:	0e 94 ce 09 	call	0x139c	; 0x139c <marks>
    16e8:	5c 01       	movw	r10, r24
	if (temp < lessMarks && !isWalled(pose, coordInMaze, A)){
    16ea:	8e 15       	cp	r24, r14
    16ec:	9f 05       	cpc	r25, r15
    16ee:	3c f4       	brge	.+14     	; 0x16fe <wayLessMarks+0x64>
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	b8 01       	movw	r22, r16
    16f4:	ce 01       	movw	r24, r28
    16f6:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <isWalled>
    16fa:	88 23       	and	r24, r24
    16fc:	81 f1       	breq	.+96     	; 0x175e <wayLessMarks+0xc4>
		less = A;
		lessMarks = temp;
	}
	
	temp = marks(pose, coordInMaze, S);
    16fe:	42 e0       	ldi	r20, 0x02	; 2
    1700:	b8 01       	movw	r22, r16
    1702:	ce 01       	movw	r24, r28
    1704:	0e 94 ce 09 	call	0x139c	; 0x139c <marks>
    1708:	5c 01       	movw	r10, r24
	if (temp < lessMarks && !isWalled(pose, coordInMaze, S)){
    170a:	8e 15       	cp	r24, r14
    170c:	9f 05       	cpc	r25, r15
    170e:	3c f4       	brge	.+14     	; 0x171e <wayLessMarks+0x84>
    1710:	42 e0       	ldi	r20, 0x02	; 2
    1712:	b8 01       	movw	r22, r16
    1714:	ce 01       	movw	r24, r28
    1716:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <isWalled>
    171a:	88 23       	and	r24, r24
    171c:	e1 f0       	breq	.+56     	; 0x1756 <wayLessMarks+0xbc>
		less = S;
		lessMarks = temp;
	}
	
	temp = marks(pose, coordInMaze, D);
    171e:	43 e0       	ldi	r20, 0x03	; 3
    1720:	b8 01       	movw	r22, r16
    1722:	ce 01       	movw	r24, r28
    1724:	0e 94 ce 09 	call	0x139c	; 0x139c <marks>
	if (temp < lessMarks && !isWalled(pose, coordInMaze, D)){
    1728:	8e 15       	cp	r24, r14
    172a:	9f 05       	cpc	r25, r15
    172c:	4c f4       	brge	.+18     	; 0x1740 <wayLessMarks+0xa6>
    172e:	43 e0       	ldi	r20, 0x03	; 3
    1730:	b8 01       	movw	r22, r16
    1732:	ce 01       	movw	r24, r28
    1734:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <isWalled>
    1738:	81 11       	cpse	r24, r1
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <wayLessMarks+0xa6>
		less = D;
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	d8 2e       	mov	r13, r24
		lessMarks = temp;
	}
	return less;
}
    1740:	8d 2d       	mov	r24, r13
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	df 90       	pop	r13
    1750:	bf 90       	pop	r11
    1752:	af 90       	pop	r10
    1754:	08 95       	ret
		less = A;
		lessMarks = temp;
	}
	
	temp = marks(pose, coordInMaze, S);
	if (temp < lessMarks && !isWalled(pose, coordInMaze, S)){
    1756:	75 01       	movw	r14, r10
		less = S;
    1758:	92 e0       	ldi	r25, 0x02	; 2
    175a:	d9 2e       	mov	r13, r25
    175c:	e0 cf       	rjmp	.-64     	; 0x171e <wayLessMarks+0x84>
		less = W;
		lessMarks = temp;
	}
	
	temp = marks(pose, coordInMaze, A);
	if (temp < lessMarks && !isWalled(pose, coordInMaze, A)){
    175e:	75 01       	movw	r14, r10
		less = A;
    1760:	dd 24       	eor	r13, r13
    1762:	d3 94       	inc	r13
    1764:	cc cf       	rjmp	.-104    	; 0x16fe <wayLessMarks+0x64>
	LocalWay less = F;
	int lessMarks = 9999;
	
	int temp = marks(pose, coordInMaze, W);
	if (temp < lessMarks && !isWalled(pose, coordInMaze, W)){
		less = W;
    1766:	d1 2c       	mov	r13, r1
    1768:	ba cf       	rjmp	.-140    	; 0x16de <wayLessMarks+0x44>

0000176a <setDestination>:
		lessMarks = temp;
	}
	return less;
}

void setDestination(Pose_t* pose, coordinate* coordInMaze, LocalWay dirToGo){
    176a:	2f 92       	push	r2
    176c:	3f 92       	push	r3
    176e:	4f 92       	push	r4
    1770:	5f 92       	push	r5
    1772:	6f 92       	push	r6
    1774:	7f 92       	push	r7
    1776:	8f 92       	push	r8
    1778:	9f 92       	push	r9
    177a:	af 92       	push	r10
    177c:	bf 92       	push	r11
    177e:	cf 92       	push	r12
    1780:	df 92       	push	r13
    1782:	ef 92       	push	r14
    1784:	ff 92       	push	r15
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	00 d0       	rcall	.+0      	; 0x1790 <setDestination+0x26>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <setDestination+0x28>
    1792:	1f 92       	push	r1
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	7b 01       	movw	r14, r22
    179a:	14 2f       	mov	r17, r20
	GlobeWay showing = getGlobeWay(pose);
    179c:	0e 94 4e 08 	call	0x109c	; 0x109c <getGlobeWay>
    17a0:	08 2f       	mov	r16, r24
	communication_log(LEVEL_INFO, "showing: %d", showing);
    17a2:	1f 92       	push	r1
    17a4:	8f 93       	push	r24
    17a6:	84 e5       	ldi	r24, 0x54	; 84
    17a8:	92 e0       	ldi	r25, 0x02	; 2
    17aa:	9f 93       	push	r25
    17ac:	8f 93       	push	r24
    17ae:	42 e0       	ldi	r20, 0x02	; 2
    17b0:	d4 2e       	mov	r13, r20
    17b2:	df 92       	push	r13
    17b4:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
	communication_log(LEVEL_INFO, "dirToGo %d", dirToGo);
    17b8:	1f 92       	push	r1
    17ba:	1f 93       	push	r17
    17bc:	80 e6       	ldi	r24, 0x60	; 96
    17be:	92 e0       	ldi	r25, 0x02	; 2
    17c0:	9f 93       	push	r25
    17c2:	8f 93       	push	r24
    17c4:	df 92       	push	r13
    17c6:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
	GlobeWay wayToGo = findGlobalWay(dirToGo, showing);
    17ca:	60 2f       	mov	r22, r16
    17cc:	81 2f       	mov	r24, r17
    17ce:	0e 94 d6 08 	call	0x11ac	; 0x11ac <findGlobalWay>
    17d2:	b8 2e       	mov	r11, r24
	coordinate destination = {.x = coordInMaze->x, .y = coordInMaze->y};
    17d4:	f7 01       	movw	r30, r14
    17d6:	80 80       	ld	r8, Z
    17d8:	91 80       	ldd	r9, Z+1	; 0x01
    17da:	02 81       	ldd	r16, Z+2	; 0x02
    17dc:	13 81       	ldd	r17, Z+3	; 0x03
	
	Point_t curr = {
		.x = maze[coordInMaze->x][coordInMaze->y].x,
    17de:	84 e1       	ldi	r24, 0x14	; 20
    17e0:	80 9f       	mul	r24, r16
    17e2:	60 01       	movw	r12, r0
    17e4:	81 9f       	mul	r24, r17
    17e6:	d0 0c       	add	r13, r0
    17e8:	11 24       	eor	r1, r1
    17ea:	2c e8       	ldi	r18, 0x8C	; 140
    17ec:	28 9d       	mul	r18, r8
    17ee:	c0 01       	movw	r24, r0
    17f0:	29 9d       	mul	r18, r9
    17f2:	90 0d       	add	r25, r0
    17f4:	11 24       	eor	r1, r1
    17f6:	8c 0d       	add	r24, r12
    17f8:	9d 1d       	adc	r25, r13
    17fa:	9c 01       	movw	r18, r24
    17fc:	27 5c       	subi	r18, 0xC7	; 199
    17fe:	37 4f       	sbci	r19, 0xF7	; 247
    1800:	69 01       	movw	r12, r18
	communication_log(LEVEL_INFO, "showing: %d", showing);
	communication_log(LEVEL_INFO, "dirToGo %d", dirToGo);
	GlobeWay wayToGo = findGlobalWay(dirToGo, showing);
	coordinate destination = {.x = coordInMaze->x, .y = coordInMaze->y};
	
	Point_t curr = {
    1802:	f9 01       	movw	r30, r18
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    1810:	2b 01       	movw	r4, r22
    1812:	3c 01       	movw	r6, r24
    1814:	f6 01       	movw	r30, r12
    1816:	64 81       	ldd	r22, Z+4	; 0x04
    1818:	75 81       	ldd	r23, Z+5	; 0x05
    181a:	86 81       	ldd	r24, Z+6	; 0x06
    181c:	97 81       	ldd	r25, Z+7	; 0x07
    181e:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
	
	 //int factorX = 0;
	 //int factorY = 0;
	 //
	
	if (wayToGo == NORTH){
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	b1 10       	cpse	r11, r1
    182e:	89 c0       	rjmp	.+274    	; 0x1942 <setDestination+0x1d8>
		destination.y -= 1;
    1830:	01 50       	subi	r16, 0x01	; 1
    1832:	11 09       	sbc	r17, r1
		//factorY = -50;
		curr.y += 10;
    1834:	fb 01       	movw	r30, r22
    1836:	3a 96       	adiw	r30, 0x0a	; 10
    1838:	fd 83       	std	Y+5, r31	; 0x05
    183a:	ec 83       	std	Y+4, r30	; 0x04
	communication_log(LEVEL_INFO, "showing: %d", showing);
	communication_log(LEVEL_INFO, "dirToGo %d", dirToGo);
	GlobeWay wayToGo = findGlobalWay(dirToGo, showing);
	coordinate destination = {.x = coordInMaze->x, .y = coordInMaze->y};
	
	Point_t curr = {
    183c:	12 01       	movw	r2, r4
		destination.x += 1;
		//factorX = -50;
		curr.x += 10;
	}
	
	if (destination.y < 0){
    183e:	17 fd       	sbrc	r17, 7
    1840:	8e c0       	rjmp	.+284    	; 0x195e <setDestination+0x1f4>
		toGo.x = maze[coordInMaze->x][coordInMaze->y].x;// + factorX;
		toGo.y = 1000;// + factorY;
	}
	else if (destination.y > 6){
    1842:	07 30       	cpi	r16, 0x07	; 7
    1844:	11 05       	cpc	r17, r1
    1846:	0c f0       	brlt	.+2      	; 0x184a <setDestination+0xe0>
    1848:	90 c0       	rjmp	.+288    	; 0x196a <setDestination+0x200>
		toGo.x = maze[coordInMaze->x][coordInMaze->y].x;// + factorX;
		toGo.y = -1000;// + factorY;
	}
	else if(destination.x < 0){
    184a:	97 fc       	sbrc	r9, 7
    184c:	b7 c0       	rjmp	.+366    	; 0x19bc <setDestination+0x252>
		toGo.y = maze[coordInMaze->x][coordInMaze->y].y;// + factorY;
		toGo.x = -1000;// + factorX;
	}
	else if (destination.x > 6){
    184e:	27 e0       	ldi	r18, 0x07	; 7
    1850:	82 16       	cp	r8, r18
    1852:	91 04       	cpc	r9, r1
    1854:	0c f0       	brlt	.+2      	; 0x1858 <setDestination+0xee>
    1856:	a3 c0       	rjmp	.+326    	; 0x199e <setDestination+0x234>
		toGo.y = maze[coordInMaze->x][coordInMaze->y].y;// + factorY;
		toGo.x = 1000;// + factorX;
	}
	else{
		toGo.x = maze[destination.x][destination.y].x;// + factorX;
    1858:	84 e1       	ldi	r24, 0x14	; 20
    185a:	80 9f       	mul	r24, r16
    185c:	60 01       	movw	r12, r0
    185e:	81 9f       	mul	r24, r17
    1860:	d0 0c       	add	r13, r0
    1862:	11 24       	eor	r1, r1
    1864:	2c e8       	ldi	r18, 0x8C	; 140
    1866:	28 9d       	mul	r18, r8
    1868:	c0 01       	movw	r24, r0
    186a:	29 9d       	mul	r18, r9
    186c:	90 0d       	add	r25, r0
    186e:	11 24       	eor	r1, r1
    1870:	8c 0d       	add	r24, r12
    1872:	9d 1d       	adc	r25, r13
    1874:	fc 01       	movw	r30, r24
    1876:	e7 5c       	subi	r30, 0xC7	; 199
    1878:	f7 4f       	sbci	r31, 0xF7	; 247
    187a:	6f 01       	movw	r12, r30
    187c:	60 81       	ld	r22, Z
    187e:	71 81       	ldd	r23, Z+1	; 0x01
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    1888:	5b 01       	movw	r10, r22
		toGo.y = maze[destination.x][destination.y].y;// + factorY;
    188a:	f6 01       	movw	r30, r12
    188c:	64 81       	ldd	r22, Z+4	; 0x04
    188e:	75 81       	ldd	r23, Z+5	; 0x05
    1890:	86 81       	ldd	r24, Z+6	; 0x06
    1892:	97 81       	ldd	r25, Z+7	; 0x07
    1894:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    1898:	3b 01       	movw	r6, r22
	}
	
	//communication_log(LEVEL_INFO, "curr x: %d, y: %d", curr.x, curr.y);
	//communication_log(LEVEL_INFO, "dest x: %d, y: %d", toGo.x, toGo.y);
	
	Point_t* pointArray = malloc(2 * sizeof(Point_t));
    189a:	88 e0       	ldi	r24, 0x08	; 8
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <malloc>
    18a2:	6c 01       	movw	r12, r24
	pointArray[0] = curr;
    18a4:	fc 01       	movw	r30, r24
    18a6:	31 82       	std	Z+1, r3	; 0x01
    18a8:	20 82       	st	Z, r2
    18aa:	2c 81       	ldd	r18, Y+4	; 0x04
    18ac:	3d 81       	ldd	r19, Y+5	; 0x05
    18ae:	33 83       	std	Z+3, r19	; 0x03
    18b0:	22 83       	std	Z+2, r18	; 0x02
	pointArray[1] = toGo;
    18b2:	b5 82       	std	Z+5, r11	; 0x05
    18b4:	a4 82       	std	Z+4, r10	; 0x04
    18b6:	77 82       	std	Z+7, r7	; 0x07
    18b8:	66 82       	std	Z+6, r6	; 0x06
	
	const Path_t pathTogo = {
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	db 82       	std	Y+3, r13	; 0x03
    18c0:	ca 82       	std	Y+2, r12	; 0x02
		.pathLength = 2,
		.points = pointArray
	};
	
	pathFollower_setNewPath(&pathTogo);
    18c2:	ce 01       	movw	r24, r28
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	0e 94 07 1a 	call	0x340e	; 0x340e <pathFollower_setNewPath>
	free(pointArray);
    18ca:	c6 01       	movw	r24, r12
    18cc:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <free>
	
	lastCoordInMaze.x = coordInMaze->x;
    18d0:	f7 01       	movw	r30, r14
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <lastCoordInMaze+0x1>
    18da:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <lastCoordInMaze>
	lastCoordInMaze.y = coordInMaze->y;
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <lastCoordInMaze+0x3>
    18e6:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <lastCoordInMaze+0x2>
	currDestination.x = destination.x;
    18ea:	90 92 0b 02 	sts	0x020B, r9	; 0x80020b <currDestination+0x1>
    18ee:	80 92 0a 02 	sts	0x020A, r8	; 0x80020a <currDestination>
	currDestination.y = destination.y;
    18f2:	10 93 0d 02 	sts	0x020D, r17	; 0x80020d <currDestination+0x3>
    18f6:	00 93 0c 02 	sts	0x020C, r16	; 0x80020c <currDestination+0x2>
	currDestinationCoords.x = toGo.x;
    18fa:	b0 92 d1 03 	sts	0x03D1, r11	; 0x8003d1 <currDestinationCoords+0x1>
    18fe:	a0 92 d0 03 	sts	0x03D0, r10	; 0x8003d0 <currDestinationCoords>
	currDestinationCoords.y = toGo.y;
    1902:	70 92 d3 03 	sts	0x03D3, r7	; 0x8003d3 <currDestinationCoords+0x3>
    1906:	60 92 d2 03 	sts	0x03D2, r6	; 0x8003d2 <currDestinationCoords+0x2>
	coordInMaze->x = destination.x;
    190a:	91 82       	std	Z+1, r9	; 0x01
    190c:	80 82       	st	Z, r8
	coordInMaze->y = destination.y;
    190e:	13 83       	std	Z+3, r17	; 0x03
    1910:	02 83       	std	Z+2, r16	; 0x02
}
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	df 90       	pop	r13
    192a:	cf 90       	pop	r12
    192c:	bf 90       	pop	r11
    192e:	af 90       	pop	r10
    1930:	9f 90       	pop	r9
    1932:	8f 90       	pop	r8
    1934:	7f 90       	pop	r7
    1936:	6f 90       	pop	r6
    1938:	5f 90       	pop	r5
    193a:	4f 90       	pop	r4
    193c:	3f 90       	pop	r3
    193e:	2f 90       	pop	r2
    1940:	08 95       	ret
	if (wayToGo == NORTH){
		destination.y -= 1;
		//factorY = -50;
		curr.y += 10;
	}
	else if (wayToGo == WEST){
    1942:	f3 e0       	ldi	r31, 0x03	; 3
    1944:	bf 16       	cp	r11, r31
    1946:	b9 f0       	breq	.+46     	; 0x1976 <setDestination+0x20c>
		destination.x -= 1;
		//factorX = 50;
		curr.x -= 10;
	}
	else if (wayToGo == SOUTH){
    1948:	e1 e0       	ldi	r30, 0x01	; 1
    194a:	be 16       	cp	r11, r30
    194c:	71 f1       	breq	.+92     	; 0x19aa <setDestination+0x240>
		destination.y += 1;
		//factorY = 50;
		curr.y -= 10;
	}
	else if (wayToGo == EAST){
    194e:	32 e0       	ldi	r19, 0x02	; 2
    1950:	b3 16       	cp	r11, r19
    1952:	d9 f0       	breq	.+54     	; 0x198a <setDestination+0x220>
	communication_log(LEVEL_INFO, "showing: %d", showing);
	communication_log(LEVEL_INFO, "dirToGo %d", dirToGo);
	GlobeWay wayToGo = findGlobalWay(dirToGo, showing);
	coordinate destination = {.x = coordInMaze->x, .y = coordInMaze->y};
	
	Point_t curr = {
    1954:	7d 83       	std	Y+5, r23	; 0x05
    1956:	6c 83       	std	Y+4, r22	; 0x04
    1958:	12 01       	movw	r2, r4
		destination.x += 1;
		//factorX = -50;
		curr.x += 10;
	}
	
	if (destination.y < 0){
    195a:	17 ff       	sbrs	r17, 7
    195c:	72 cf       	rjmp	.-284    	; 0x1842 <setDestination+0xd8>
		toGo.x = maze[coordInMaze->x][coordInMaze->y].x;// + factorX;
    195e:	52 01       	movw	r10, r4
		toGo.y = 1000;// + factorY;
    1960:	38 ee       	ldi	r19, 0xE8	; 232
    1962:	63 2e       	mov	r6, r19
    1964:	33 e0       	ldi	r19, 0x03	; 3
    1966:	73 2e       	mov	r7, r19
    1968:	98 cf       	rjmp	.-208    	; 0x189a <setDestination+0x130>
	}
	else if (destination.y > 6){
		toGo.x = maze[coordInMaze->x][coordInMaze->y].x;// + factorX;
    196a:	52 01       	movw	r10, r4
		toGo.y = -1000;// + factorY;
    196c:	28 e1       	ldi	r18, 0x18	; 24
    196e:	62 2e       	mov	r6, r18
    1970:	2c ef       	ldi	r18, 0xFC	; 252
    1972:	72 2e       	mov	r7, r18
    1974:	92 cf       	rjmp	.-220    	; 0x189a <setDestination+0x130>
		destination.y -= 1;
		//factorY = -50;
		curr.y += 10;
	}
	else if (wayToGo == WEST){
		destination.x -= 1;
    1976:	21 e0       	ldi	r18, 0x01	; 1
    1978:	82 1a       	sub	r8, r18
    197a:	91 08       	sbc	r9, r1
		//factorX = 50;
		curr.x -= 10;
    197c:	12 01       	movw	r2, r4
    197e:	3a e0       	ldi	r19, 0x0A	; 10
    1980:	23 1a       	sub	r2, r19
    1982:	31 08       	sbc	r3, r1
	communication_log(LEVEL_INFO, "showing: %d", showing);
	communication_log(LEVEL_INFO, "dirToGo %d", dirToGo);
	GlobeWay wayToGo = findGlobalWay(dirToGo, showing);
	coordinate destination = {.x = coordInMaze->x, .y = coordInMaze->y};
	
	Point_t curr = {
    1984:	7d 83       	std	Y+5, r23	; 0x05
    1986:	6c 83       	std	Y+4, r22	; 0x04
    1988:	5a cf       	rjmp	.-332    	; 0x183e <setDestination+0xd4>
		destination.y += 1;
		//factorY = 50;
		curr.y -= 10;
	}
	else if (wayToGo == EAST){
		destination.x += 1;
    198a:	ef ef       	ldi	r30, 0xFF	; 255
    198c:	8e 1a       	sub	r8, r30
    198e:	9e 0a       	sbc	r9, r30
		//factorX = -50;
		curr.x += 10;
    1990:	12 01       	movw	r2, r4
    1992:	fa e0       	ldi	r31, 0x0A	; 10
    1994:	2f 0e       	add	r2, r31
    1996:	31 1c       	adc	r3, r1
	communication_log(LEVEL_INFO, "showing: %d", showing);
	communication_log(LEVEL_INFO, "dirToGo %d", dirToGo);
	GlobeWay wayToGo = findGlobalWay(dirToGo, showing);
	coordinate destination = {.x = coordInMaze->x, .y = coordInMaze->y};
	
	Point_t curr = {
    1998:	7d 83       	std	Y+5, r23	; 0x05
    199a:	6c 83       	std	Y+4, r22	; 0x04
    199c:	50 cf       	rjmp	.-352    	; 0x183e <setDestination+0xd4>
	else if(destination.x < 0){
		toGo.y = maze[coordInMaze->x][coordInMaze->y].y;// + factorY;
		toGo.x = -1000;// + factorX;
	}
	else if (destination.x > 6){
		toGo.y = maze[coordInMaze->x][coordInMaze->y].y;// + factorY;
    199e:	3b 01       	movw	r6, r22
		toGo.x = 1000;// + factorX;
    19a0:	88 ee       	ldi	r24, 0xE8	; 232
    19a2:	a8 2e       	mov	r10, r24
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	b8 2e       	mov	r11, r24
    19a8:	78 cf       	rjmp	.-272    	; 0x189a <setDestination+0x130>
		destination.x -= 1;
		//factorX = 50;
		curr.x -= 10;
	}
	else if (wayToGo == SOUTH){
		destination.y += 1;
    19aa:	0f 5f       	subi	r16, 0xFF	; 255
    19ac:	1f 4f       	sbci	r17, 0xFF	; 255
		//factorY = 50;
		curr.y -= 10;
    19ae:	9b 01       	movw	r18, r22
    19b0:	2a 50       	subi	r18, 0x0A	; 10
    19b2:	31 09       	sbc	r19, r1
    19b4:	3d 83       	std	Y+5, r19	; 0x05
    19b6:	2c 83       	std	Y+4, r18	; 0x04
	communication_log(LEVEL_INFO, "showing: %d", showing);
	communication_log(LEVEL_INFO, "dirToGo %d", dirToGo);
	GlobeWay wayToGo = findGlobalWay(dirToGo, showing);
	coordinate destination = {.x = coordInMaze->x, .y = coordInMaze->y};
	
	Point_t curr = {
    19b8:	12 01       	movw	r2, r4
    19ba:	41 cf       	rjmp	.-382    	; 0x183e <setDestination+0xd4>
	else if (destination.y > 6){
		toGo.x = maze[coordInMaze->x][coordInMaze->y].x;// + factorX;
		toGo.y = -1000;// + factorY;
	}
	else if(destination.x < 0){
		toGo.y = maze[coordInMaze->x][coordInMaze->y].y;// + factorY;
    19bc:	3b 01       	movw	r6, r22
		toGo.x = -1000;// + factorX;
    19be:	98 e1       	ldi	r25, 0x18	; 24
    19c0:	a9 2e       	mov	r10, r25
    19c2:	9c ef       	ldi	r25, 0xFC	; 252
    19c4:	b9 2e       	mov	r11, r25
    19c6:	69 cf       	rjmp	.-302    	; 0x189a <setDestination+0x130>

000019c8 <haveGreed>:
	currDestinationCoords.y = toGo.y;
	coordInMaze->x = destination.x;
	coordInMaze->y = destination.y;
}

bool haveGreed(Pose_t* pose, coordinate* coordInMaze, GlobeWay showing){
    19c8:	ef 92       	push	r14
    19ca:	ff 92       	push	r15
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	7c 01       	movw	r14, r24
    19d4:	eb 01       	movw	r28, r22
    19d6:	14 2f       	mov	r17, r20
	if (coordInMaze->x < 6 &&
    19d8:	88 81       	ld	r24, Y
    19da:	99 81       	ldd	r25, Y+1	; 0x01
    19dc:	9c 01       	movw	r18, r24
    19de:	21 50       	subi	r18, 0x01	; 1
    19e0:	31 09       	sbc	r19, r1
    19e2:	25 30       	cpi	r18, 0x05	; 5
    19e4:	31 05       	cpc	r19, r1
    19e6:	80 f4       	brcc	.+32     	; 0x1a08 <haveGreed+0x40>
	coordInMaze->x > 0 &&
	coordInMaze->y < 6 &&
    19e8:	2a 81       	ldd	r18, Y+2	; 0x02
    19ea:	3b 81       	ldd	r19, Y+3	; 0x03
    19ec:	a9 01       	movw	r20, r18
    19ee:	41 50       	subi	r20, 0x01	; 1
    19f0:	51 09       	sbc	r21, r1
    19f2:	45 30       	cpi	r20, 0x05	; 5
    19f4:	51 05       	cpc	r21, r1
    19f6:	08 f0       	brcs	.+2      	; 0x19fa <haveGreed+0x32>
    19f8:	4a c0       	rjmp	.+148    	; 0x1a8e <haveGreed+0xc6>
	coordInMaze->y > 0 ){
		return false;
    19fa:	80 e0       	ldi	r24, 0x00	; 0
			setDestination(pose, coordInMaze, W);
			return true;
		}
	}
	return false;
}
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	1f 91       	pop	r17
    1a02:	ff 90       	pop	r15
    1a04:	ef 90       	pop	r14
    1a06:	08 95       	ret
	coordInMaze->x > 0 &&
	coordInMaze->y < 6 &&
	coordInMaze->y > 0 ){
		return false;
	}
	if (coordInMaze->x == 6 && (!(maze[coordInMaze->x][coordInMaze->y].wallD))){
    1a08:	2a 81       	ldd	r18, Y+2	; 0x02
    1a0a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a0c:	86 30       	cpi	r24, 0x06	; 6
    1a0e:	91 05       	cpc	r25, r1
    1a10:	31 f5       	brne	.+76     	; 0x1a5e <haveGreed+0x96>
    1a12:	44 e1       	ldi	r20, 0x14	; 20
    1a14:	42 9f       	mul	r20, r18
    1a16:	f0 01       	movw	r30, r0
    1a18:	43 9f       	mul	r20, r19
    1a1a:	f0 0d       	add	r31, r0
    1a1c:	11 24       	eor	r1, r1
    1a1e:	ee 56       	subi	r30, 0x6E	; 110
    1a20:	f4 4f       	sbci	r31, 0xF4	; 244
    1a22:	40 81       	ld	r20, Z
    1a24:	41 11       	cpse	r20, r1
    1a26:	33 c0       	rjmp	.+102    	; 0x1a8e <haveGreed+0xc6>
		communication_log(LEVEL_INFO, "wallD is false");
    1a28:	8b e6       	ldi	r24, 0x6B	; 107
    1a2a:	92 e0       	ldi	r25, 0x02	; 2
    1a2c:	9f 93       	push	r25
    1a2e:	8f 93       	push	r24
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	8f 93       	push	r24
    1a34:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
		if (showing == EAST){
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	12 30       	cpi	r17, 0x02	; 2
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <haveGreed+0x7c>
    1a42:	40 c0       	rjmp	.+128    	; 0x1ac4 <haveGreed+0xfc>
			setDestination(pose, coordInMaze, W);
			return true;
		}
		if (showing == NORTH){
    1a44:	11 23       	and	r17, r17
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <haveGreed+0x82>
    1a48:	5f c0       	rjmp	.+190    	; 0x1b08 <haveGreed+0x140>
			setDestination(pose, coordInMaze, D);
			return true;
		}
		if (showing == WEST){
    1a4a:	13 30       	cpi	r17, 0x03	; 3
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <haveGreed+0x88>
    1a4e:	55 c0       	rjmp	.+170    	; 0x1afa <haveGreed+0x132>
			setDestination(pose, coordInMaze, S);
			return true;
		}
		if (showing == SOUTH){
    1a50:	11 30       	cpi	r17, 0x01	; 1
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <haveGreed+0x8e>
    1a54:	60 c0       	rjmp	.+192    	; 0x1b16 <haveGreed+0x14e>
    1a56:	88 81       	ld	r24, Y
    1a58:	99 81       	ldd	r25, Y+1	; 0x01
    1a5a:	2a 81       	ldd	r18, Y+2	; 0x02
    1a5c:	3b 81       	ldd	r19, Y+3	; 0x03
			setDestination(pose, coordInMaze, A);
			return true;
		}
	}
	if (coordInMaze->x == 0 && !maze[coordInMaze->x][coordInMaze->y].wallA){
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	b1 f4       	brne	.+44     	; 0x1a8e <haveGreed+0xc6>
    1a62:	44 e1       	ldi	r20, 0x14	; 20
    1a64:	42 9f       	mul	r20, r18
    1a66:	f0 01       	movw	r30, r0
    1a68:	43 9f       	mul	r20, r19
    1a6a:	f0 0d       	add	r31, r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	e7 5c       	subi	r30, 0xC7	; 199
    1a70:	f7 4f       	sbci	r31, 0xF7	; 247
    1a72:	40 89       	ldd	r20, Z+16	; 0x10
    1a74:	41 11       	cpse	r20, r1
    1a76:	0b c0       	rjmp	.+22     	; 0x1a8e <haveGreed+0xc6>
		if (showing == EAST){
    1a78:	12 30       	cpi	r17, 0x02	; 2
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <haveGreed+0xb6>
    1a7c:	3e c0       	rjmp	.+124    	; 0x1afa <haveGreed+0x132>
			setDestination(pose, coordInMaze, S);
			return true;
		}
		if (showing == NORTH){
    1a7e:	11 23       	and	r17, r17
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <haveGreed+0xbc>
    1a82:	49 c0       	rjmp	.+146    	; 0x1b16 <haveGreed+0x14e>
			setDestination(pose, coordInMaze, A);
			return true;
		}
		if (showing == WEST){
    1a84:	13 30       	cpi	r17, 0x03	; 3
    1a86:	f1 f0       	breq	.+60     	; 0x1ac4 <haveGreed+0xfc>
			setDestination(pose, coordInMaze, W);
			return true;
		}
		if (showing == SOUTH){
    1a88:	11 30       	cpi	r17, 0x01	; 1
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <haveGreed+0xc6>
    1a8c:	3d c0       	rjmp	.+122    	; 0x1b08 <haveGreed+0x140>
			setDestination(pose, coordInMaze, D);
			return true;
		}
	}
	if (coordInMaze->y == 0 && !maze[coordInMaze->x][coordInMaze->y].wallW){
    1a8e:	21 15       	cp	r18, r1
    1a90:	31 05       	cpc	r19, r1
    1a92:	f9 f0       	breq	.+62     	; 0x1ad2 <haveGreed+0x10a>
		if (showing == SOUTH){
			setDestination(pose, coordInMaze, S);
			return true;
		}
	}
	if (coordInMaze->y == 6 && !maze[coordInMaze->x][coordInMaze->y].wallS){
    1a94:	26 30       	cpi	r18, 0x06	; 6
    1a96:	31 05       	cpc	r19, r1
    1a98:	09 f0       	breq	.+2      	; 0x1a9c <haveGreed+0xd4>
    1a9a:	af cf       	rjmp	.-162    	; 0x19fa <haveGreed+0x32>
    1a9c:	2c e8       	ldi	r18, 0x8C	; 140
    1a9e:	28 9f       	mul	r18, r24
    1aa0:	f0 01       	movw	r30, r0
    1aa2:	29 9f       	mul	r18, r25
    1aa4:	f0 0d       	add	r31, r0
    1aa6:	11 24       	eor	r1, r1
    1aa8:	ec 53       	subi	r30, 0x3C	; 60
    1aaa:	f7 4f       	sbci	r31, 0xF7	; 247
    1aac:	80 81       	ld	r24, Z
    1aae:	81 11       	cpse	r24, r1
    1ab0:	a4 cf       	rjmp	.-184    	; 0x19fa <haveGreed+0x32>
		if (showing == EAST){
    1ab2:	12 30       	cpi	r17, 0x02	; 2
    1ab4:	49 f1       	breq	.+82     	; 0x1b08 <haveGreed+0x140>
			setDestination(pose, coordInMaze, D);
			return true;
		}
		if (showing == NORTH){
    1ab6:	11 23       	and	r17, r17
    1ab8:	01 f1       	breq	.+64     	; 0x1afa <haveGreed+0x132>
			setDestination(pose, coordInMaze, S);
			return true;
		}
		if (showing == WEST){
    1aba:	13 30       	cpi	r17, 0x03	; 3
    1abc:	61 f1       	breq	.+88     	; 0x1b16 <haveGreed+0x14e>
			setDestination(pose, coordInMaze, A);
			return true;
		}
		if (showing == SOUTH){
    1abe:	11 30       	cpi	r17, 0x01	; 1
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <haveGreed+0xfc>
    1ac2:	9b cf       	rjmp	.-202    	; 0x19fa <haveGreed+0x32>
		return false;
	}
	if (coordInMaze->x == 6 && (!(maze[coordInMaze->x][coordInMaze->y].wallD))){
		communication_log(LEVEL_INFO, "wallD is false");
		if (showing == EAST){
			setDestination(pose, coordInMaze, W);
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	be 01       	movw	r22, r28
    1ac8:	c7 01       	movw	r24, r14
    1aca:	0e 94 b5 0b 	call	0x176a	; 0x176a <setDestination>
			return true;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	95 cf       	rjmp	.-214    	; 0x19fc <haveGreed+0x34>
		if (showing == SOUTH){
			setDestination(pose, coordInMaze, D);
			return true;
		}
	}
	if (coordInMaze->y == 0 && !maze[coordInMaze->x][coordInMaze->y].wallW){
    1ad2:	2c e8       	ldi	r18, 0x8C	; 140
    1ad4:	28 9f       	mul	r18, r24
    1ad6:	f0 01       	movw	r30, r0
    1ad8:	29 9f       	mul	r18, r25
    1ada:	f0 0d       	add	r31, r0
    1adc:	11 24       	eor	r1, r1
    1ade:	e7 5c       	subi	r30, 0xC7	; 199
    1ae0:	f7 4f       	sbci	r31, 0xF7	; 247
    1ae2:	82 89       	ldd	r24, Z+18	; 0x12
    1ae4:	81 11       	cpse	r24, r1
    1ae6:	89 cf       	rjmp	.-238    	; 0x19fa <haveGreed+0x32>
		if (showing == EAST){
    1ae8:	12 30       	cpi	r17, 0x02	; 2
    1aea:	a9 f0       	breq	.+42     	; 0x1b16 <haveGreed+0x14e>
			setDestination(pose, coordInMaze, A);
			return true;
		}
		if (showing == NORTH){
    1aec:	11 23       	and	r17, r17
    1aee:	51 f3       	breq	.-44     	; 0x1ac4 <haveGreed+0xfc>
			setDestination(pose, coordInMaze, W);
			return true;
		}
		if (showing == WEST){
    1af0:	13 30       	cpi	r17, 0x03	; 3
    1af2:	51 f0       	breq	.+20     	; 0x1b08 <haveGreed+0x140>
			setDestination(pose, coordInMaze, D);
			return true;
		}
		if (showing == SOUTH){
    1af4:	11 30       	cpi	r17, 0x01	; 1
    1af6:	09 f0       	breq	.+2      	; 0x1afa <haveGreed+0x132>
    1af8:	80 cf       	rjmp	.-256    	; 0x19fa <haveGreed+0x32>
		if (showing == NORTH){
			setDestination(pose, coordInMaze, D);
			return true;
		}
		if (showing == WEST){
			setDestination(pose, coordInMaze, S);
    1afa:	42 e0       	ldi	r20, 0x02	; 2
    1afc:	be 01       	movw	r22, r28
    1afe:	c7 01       	movw	r24, r14
    1b00:	0e 94 b5 0b 	call	0x176a	; 0x176a <setDestination>
			return true;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	7a cf       	rjmp	.-268    	; 0x19fc <haveGreed+0x34>
		if (showing == EAST){
			setDestination(pose, coordInMaze, W);
			return true;
		}
		if (showing == NORTH){
			setDestination(pose, coordInMaze, D);
    1b08:	43 e0       	ldi	r20, 0x03	; 3
    1b0a:	be 01       	movw	r22, r28
    1b0c:	c7 01       	movw	r24, r14
    1b0e:	0e 94 b5 0b 	call	0x176a	; 0x176a <setDestination>
			return true;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	73 cf       	rjmp	.-282    	; 0x19fc <haveGreed+0x34>
		if (showing == WEST){
			setDestination(pose, coordInMaze, S);
			return true;
		}
		if (showing == SOUTH){
			setDestination(pose, coordInMaze, A);
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	be 01       	movw	r22, r28
    1b1a:	c7 01       	movw	r24, r14
    1b1c:	0e 94 b5 0b 	call	0x176a	; 0x176a <setDestination>
			return true;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	6c cf       	rjmp	.-296    	; 0x19fc <haveGreed+0x34>

00001b24 <startOpt>:
	}
	return false;
}

void startOpt(Pose_t* pose, bool* done, StateName* status){
	if (*done){
    1b24:	fb 01       	movw	r30, r22
    1b26:	80 81       	ld	r24, Z
    1b28:	88 23       	and	r24, r24
    1b2a:	21 f0       	breq	.+8      	; 0x1b34 <startOpt+0x10>
		*done = false;
    1b2c:	10 82       	st	Z, r1
		*status = CORE;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	fa 01       	movw	r30, r20
    1b32:	80 83       	st	Z, r24
    1b34:	08 95       	ret

00001b36 <coreOpt>:
	}
}

void coreOpt(Pose_t* pose, bool* done, StateName* status, coordinate* coordInMaze){
    1b36:	af 92       	push	r10
    1b38:	bf 92       	push	r11
    1b3a:	cf 92       	push	r12
    1b3c:	df 92       	push	r13
    1b3e:	ef 92       	push	r14
    1b40:	ff 92       	push	r15
    1b42:	0f 93       	push	r16
    1b44:	1f 93       	push	r17
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	7c 01       	movw	r14, r24
    1b4c:	5b 01       	movw	r10, r22
    1b4e:	6a 01       	movw	r12, r20
    1b50:	e9 01       	movw	r28, r18
	communication_log(LEVEL_INFO, "x: %d, y: %d", coordInMaze->x, coordInMaze->y);
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	8f 93       	push	r24
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	8f 93       	push	r24
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	8f 93       	push	r24
    1b5e:	88 81       	ld	r24, Y
    1b60:	8f 93       	push	r24
    1b62:	8a e7       	ldi	r24, 0x7A	; 122
    1b64:	92 e0       	ldi	r25, 0x02	; 2
    1b66:	9f 93       	push	r25
    1b68:	8f 93       	push	r24
    1b6a:	02 e0       	ldi	r16, 0x02	; 2
    1b6c:	0f 93       	push	r16
    1b6e:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
	int8_t ways = 0;
	GlobeWay showing = getGlobeWay(pose);
    1b72:	c7 01       	movw	r24, r14
    1b74:	0e 94 4e 08 	call	0x109c	; 0x109c <getGlobeWay>
    1b78:	18 2f       	mov	r17, r24
	if (showing == UNCLEAR){
    1b7a:	8d b7       	in	r24, 0x3d	; 61
    1b7c:	9e b7       	in	r25, 0x3e	; 62
    1b7e:	07 96       	adiw	r24, 0x07	; 7
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	9e bf       	out	0x3e, r25	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	8d bf       	out	0x3d, r24	; 61
    1b8a:	14 30       	cpi	r17, 0x04	; 4
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <coreOpt+0x5a>
    1b8e:	8d c0       	rjmp	.+282    	; 0x1caa <coreOpt+0x174>
		*status = TURN;
		return;
	}
	if (coordInMaze->x < 0 || coordInMaze->x > 6 || coordInMaze->y < 0 || coordInMaze->x > 6){
    1b90:	88 81       	ld	r24, Y
    1b92:	99 81       	ldd	r25, Y+1	; 0x01
    1b94:	07 97       	sbiw	r24, 0x07	; 7
    1b96:	08 f0       	brcs	.+2      	; 0x1b9a <coreOpt+0x64>
    1b98:	68 c0       	rjmp	.+208    	; 0x1c6a <coreOpt+0x134>
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9e:	97 fd       	sbrc	r25, 7
    1ba0:	64 c0       	rjmp	.+200    	; 0x1c6a <coreOpt+0x134>
		*status = END;
		communication_log(LEVEL_INFO, "I'm out!");
		return;
	}
	if (getDistanceFront() > (2 * 6.053)){
    1ba2:	0e 94 09 08 	call	0x1012	; 0x1012 <getDistanceFront>
    1ba6:	2d e2       	ldi	r18, 0x2D	; 45
    1ba8:	32 eb       	ldi	r19, 0xB2	; 178
    1baa:	41 e4       	ldi	r20, 0x41	; 65
    1bac:	51 e4       	ldi	r21, 0x41	; 65
    1bae:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	0c f0       	brlt	.+2      	; 0x1bb8 <coreOpt+0x82>
    1bb6:	72 c0       	rjmp	.+228    	; 0x1c9c <coreOpt+0x166>
		ways++;
    1bb8:	01 e0       	ldi	r16, 0x01	; 1
	else{
		setWall(W, showing, coordInMaze);
		//communication_log(LEVEL_INFO, "setting wall front!");
	
	}
	if (getDistanceLeft() > (2 * 13.2)){
    1bba:	0e 94 20 08 	call	0x1040	; 0x1040 <getDistanceLeft>
    1bbe:	23 e3       	ldi	r18, 0x33	; 51
    1bc0:	33 e3       	ldi	r19, 0x33	; 51
    1bc2:	43 ed       	ldi	r20, 0xD3	; 211
    1bc4:	51 e4       	ldi	r21, 0x41	; 65
    1bc6:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	0c f0       	brlt	.+2      	; 0x1bd0 <coreOpt+0x9a>
    1bce:	7f c0       	rjmp	.+254    	; 0x1cce <coreOpt+0x198>
		ways++;
    1bd0:	0f 5f       	subi	r16, 0xFF	; 255
	}
	else{
		setWall(A, showing, coordInMaze);
	}
	if (getDistanceRight() > (9)){
    1bd2:	0e 94 37 08 	call	0x106e	; 0x106e <getDistanceRight>
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e1       	ldi	r20, 0x10	; 16
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	0c f0       	brlt	.+2      	; 0x1be8 <coreOpt+0xb2>
    1be6:	6d c0       	rjmp	.+218    	; 0x1cc2 <coreOpt+0x18c>
		ways++;
    1be8:	0f 5f       	subi	r16, 0xFF	; 255
	}
	else{
		setWall(D, showing, coordInMaze);
	}
	if (haveGreed(pose, coordInMaze, showing)){
    1bea:	41 2f       	mov	r20, r17
    1bec:	be 01       	movw	r22, r28
    1bee:	c7 01       	movw	r24, r14
    1bf0:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <haveGreed>
    1bf4:	81 11       	cpse	r24, r1
    1bf6:	5c c0       	rjmp	.+184    	; 0x1cb0 <coreOpt+0x17a>
		pathFollower_command(FOLLOWER_CMD_START);
		*status = MOVE;
		*done = false;
	}
	else if (ways > 1){
    1bf8:	02 30       	cpi	r16, 0x02	; 2
    1bfa:	0c f4       	brge	.+2      	; 0x1bfe <coreOpt+0xc8>
    1bfc:	6e c0       	rjmp	.+220    	; 0x1cda <coreOpt+0x1a4>
		*status = INPLACE;
    1bfe:	85 e0       	ldi	r24, 0x05	; 5
    1c00:	f6 01       	movw	r30, r12
    1c02:	80 83       	st	Z, r24
		*done = false;
    1c04:	f5 01       	movw	r30, r10
    1c06:	10 82       	st	Z, r1
	else{
		*status = INWAY;
		*done = false;
	}
	communication_log(LEVEL_INFO, "WA %d, WD%d, WW%d, WS%d", maze[coordInMaze->x][coordInMaze->y].wallA,
	maze[coordInMaze->x][coordInMaze->y].wallD, maze[coordInMaze->x][coordInMaze->y].wallW, maze[coordInMaze->x][coordInMaze->y].wallS);
    1c08:	28 81       	ld	r18, Y
    1c0a:	39 81       	ldd	r19, Y+1	; 0x01
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c10:	44 e1       	ldi	r20, 0x14	; 20
    1c12:	48 9f       	mul	r20, r24
    1c14:	f0 01       	movw	r30, r0
    1c16:	49 9f       	mul	r20, r25
    1c18:	f0 0d       	add	r31, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	4c e8       	ldi	r20, 0x8C	; 140
    1c1e:	42 9f       	mul	r20, r18
    1c20:	c0 01       	movw	r24, r0
    1c22:	43 9f       	mul	r20, r19
    1c24:	90 0d       	add	r25, r0
    1c26:	11 24       	eor	r1, r1
    1c28:	e8 0f       	add	r30, r24
    1c2a:	f9 1f       	adc	r31, r25
    1c2c:	e7 5c       	subi	r30, 0xC7	; 199
    1c2e:	f7 4f       	sbci	r31, 0xF7	; 247
	} 
	else{
		*status = INWAY;
		*done = false;
	}
	communication_log(LEVEL_INFO, "WA %d, WD%d, WW%d, WS%d", maze[coordInMaze->x][coordInMaze->y].wallA,
    1c30:	83 89       	ldd	r24, Z+19	; 0x13
    1c32:	1f 92       	push	r1
    1c34:	8f 93       	push	r24
    1c36:	82 89       	ldd	r24, Z+18	; 0x12
    1c38:	1f 92       	push	r1
    1c3a:	8f 93       	push	r24
    1c3c:	81 89       	ldd	r24, Z+17	; 0x11
    1c3e:	1f 92       	push	r1
    1c40:	8f 93       	push	r24
    1c42:	80 89       	ldd	r24, Z+16	; 0x10
    1c44:	1f 92       	push	r1
    1c46:	8f 93       	push	r24
    1c48:	80 e9       	ldi	r24, 0x90	; 144
    1c4a:	92 e0       	ldi	r25, 0x02	; 2
    1c4c:	9f 93       	push	r25
    1c4e:	8f 93       	push	r24
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	8f 93       	push	r24
    1c54:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
    1c58:	8d b7       	in	r24, 0x3d	; 61
    1c5a:	9e b7       	in	r25, 0x3e	; 62
    1c5c:	0b 96       	adiw	r24, 0x0b	; 11
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	9e bf       	out	0x3e, r25	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	8d bf       	out	0x3d, r24	; 61
    1c68:	0e c0       	rjmp	.+28     	; 0x1c86 <coreOpt+0x150>
	if (showing == UNCLEAR){
		*status = TURN;
		return;
	}
	if (coordInMaze->x < 0 || coordInMaze->x > 6 || coordInMaze->y < 0 || coordInMaze->x > 6){
		*status = END;
    1c6a:	86 e0       	ldi	r24, 0x06	; 6
    1c6c:	f6 01       	movw	r30, r12
    1c6e:	80 83       	st	Z, r24
		communication_log(LEVEL_INFO, "I'm out!");
    1c70:	87 e8       	ldi	r24, 0x87	; 135
    1c72:	92 e0       	ldi	r25, 0x02	; 2
    1c74:	9f 93       	push	r25
    1c76:	8f 93       	push	r24
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	8f 93       	push	r24
    1c7c:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
		return;
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
		*status = INWAY;
		*done = false;
	}
	communication_log(LEVEL_INFO, "WA %d, WD%d, WW%d, WS%d", maze[coordInMaze->x][coordInMaze->y].wallA,
	maze[coordInMaze->x][coordInMaze->y].wallD, maze[coordInMaze->x][coordInMaze->y].wallW, maze[coordInMaze->x][coordInMaze->y].wallS);
}
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	1f 91       	pop	r17
    1c8c:	0f 91       	pop	r16
    1c8e:	ff 90       	pop	r15
    1c90:	ef 90       	pop	r14
    1c92:	df 90       	pop	r13
    1c94:	cf 90       	pop	r12
    1c96:	bf 90       	pop	r11
    1c98:	af 90       	pop	r10
    1c9a:	08 95       	ret
	}
	if (getDistanceFront() > (2 * 6.053)){
		ways++;
	}
	else{
		setWall(W, showing, coordInMaze);
    1c9c:	ae 01       	movw	r20, r28
    1c9e:	61 2f       	mov	r22, r17
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	0e 94 0a 09 	call	0x1214	; 0x1214 <setWall>
	}
}

void coreOpt(Pose_t* pose, bool* done, StateName* status, coordinate* coordInMaze){
	communication_log(LEVEL_INFO, "x: %d, y: %d", coordInMaze->x, coordInMaze->y);
	int8_t ways = 0;
    1ca6:	00 e0       	ldi	r16, 0x00	; 0
    1ca8:	88 cf       	rjmp	.-240    	; 0x1bba <coreOpt+0x84>
	GlobeWay showing = getGlobeWay(pose);
	if (showing == UNCLEAR){
		*status = TURN;
    1caa:	f6 01       	movw	r30, r12
    1cac:	00 83       	st	Z, r16
		return;
    1cae:	eb cf       	rjmp	.-42     	; 0x1c86 <coreOpt+0x150>
	}
	else{
		setWall(D, showing, coordInMaze);
	}
	if (haveGreed(pose, coordInMaze, showing)){
		pathFollower_command(FOLLOWER_CMD_START);
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	0e 94 36 1a 	call	0x346c	; 0x346c <pathFollower_command>
		*status = MOVE;
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	f6 01       	movw	r30, r12
    1cba:	80 83       	st	Z, r24
		*done = false;
    1cbc:	f5 01       	movw	r30, r10
    1cbe:	10 82       	st	Z, r1
    1cc0:	a3 cf       	rjmp	.-186    	; 0x1c08 <coreOpt+0xd2>
	}
	if (getDistanceRight() > (9)){
		ways++;
	}
	else{
		setWall(D, showing, coordInMaze);
    1cc2:	ae 01       	movw	r20, r28
    1cc4:	61 2f       	mov	r22, r17
    1cc6:	83 e0       	ldi	r24, 0x03	; 3
    1cc8:	0e 94 0a 09 	call	0x1214	; 0x1214 <setWall>
    1ccc:	8e cf       	rjmp	.-228    	; 0x1bea <coreOpt+0xb4>
	}
	if (getDistanceLeft() > (2 * 13.2)){
		ways++;
	}
	else{
		setWall(A, showing, coordInMaze);
    1cce:	ae 01       	movw	r20, r28
    1cd0:	61 2f       	mov	r22, r17
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	0e 94 0a 09 	call	0x1214	; 0x1214 <setWall>
    1cd8:	7c cf       	rjmp	.-264    	; 0x1bd2 <coreOpt+0x9c>
	else if (ways > 1){
		*status = INPLACE;
		*done = false;
	} 
	else{
		*status = INWAY;
    1cda:	84 e0       	ldi	r24, 0x04	; 4
    1cdc:	f6 01       	movw	r30, r12
    1cde:	80 83       	st	Z, r24
		*done = false;
    1ce0:	f5 01       	movw	r30, r10
    1ce2:	10 82       	st	Z, r1
    1ce4:	91 cf       	rjmp	.-222    	; 0x1c08 <coreOpt+0xd2>

00001ce6 <inWayOpt>:
	}
	communication_log(LEVEL_INFO, "WA %d, WD%d, WW%d, WS%d", maze[coordInMaze->x][coordInMaze->y].wallA,
	maze[coordInMaze->x][coordInMaze->y].wallD, maze[coordInMaze->x][coordInMaze->y].wallW, maze[coordInMaze->x][coordInMaze->y].wallS);
}

void inWayOpt(Pose_t* pose, bool* done, StateName* status, coordinate* coordInMaze){
    1ce6:	af 92       	push	r10
    1ce8:	bf 92       	push	r11
    1cea:	cf 92       	push	r12
    1cec:	df 92       	push	r13
    1cee:	ff 92       	push	r15
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	ec 01       	movw	r28, r24
    1cfa:	6b 01       	movw	r12, r22
    1cfc:	5a 01       	movw	r10, r20
    1cfe:	89 01       	movw	r16, r18
	LocalWay toGo = W;
	//communication_log(LEVEL_INFO, "isWalledW: %d", isWalled(pose,coordInMaze, W));
	//communication_log(LEVEL_INFO, "isWalledN: %d", maze[coordInMaze->x][coordInMaze->y].wallW);
	
	if (isWalled(pose, coordInMaze, W)){
    1d00:	40 e0       	ldi	r20, 0x00	; 0
    1d02:	b9 01       	movw	r22, r18
    1d04:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <isWalled>
    1d08:	88 23       	and	r24, r24
    1d0a:	51 f0       	breq	.+20     	; 0x1d20 <inWayOpt+0x3a>
		if (!isWalled(pose, coordInMaze, A)){
    1d0c:	41 e0       	ldi	r20, 0x01	; 1
    1d0e:	b8 01       	movw	r22, r16
    1d10:	ce 01       	movw	r24, r28
    1d12:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <isWalled>
    1d16:	81 11       	cpse	r24, r1
    1d18:	24 c0       	rjmp	.+72     	; 0x1d62 <inWayOpt+0x7c>
			toGo = A;
    1d1a:	ff 24       	eor	r15, r15
    1d1c:	f3 94       	inc	r15
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <inWayOpt+0x3c>
	communication_log(LEVEL_INFO, "WA %d, WD%d, WW%d, WS%d", maze[coordInMaze->x][coordInMaze->y].wallA,
	maze[coordInMaze->x][coordInMaze->y].wallD, maze[coordInMaze->x][coordInMaze->y].wallW, maze[coordInMaze->x][coordInMaze->y].wallS);
}

void inWayOpt(Pose_t* pose, bool* done, StateName* status, coordinate* coordInMaze){
	LocalWay toGo = W;
    1d20:	f1 2c       	mov	r15, r1
		}
		else{
			toGo = S;
		}
	}
	if (toGo != S && marks(pose, coordInMaze, toGo) >= 2){
    1d22:	4f 2d       	mov	r20, r15
    1d24:	b8 01       	movw	r22, r16
    1d26:	ce 01       	movw	r24, r28
    1d28:	0e 94 ce 09 	call	0x139c	; 0x139c <marks>
    1d2c:	02 97       	sbiw	r24, 0x02	; 2
    1d2e:	14 f0       	brlt	.+4      	; 0x1d34 <inWayOpt+0x4e>
		toGo = S;
    1d30:	92 e0       	ldi	r25, 0x02	; 2
    1d32:	f9 2e       	mov	r15, r25
	}
	
	setDestination(pose, coordInMaze, toGo);
    1d34:	4f 2d       	mov	r20, r15
    1d36:	b8 01       	movw	r22, r16
    1d38:	ce 01       	movw	r24, r28
    1d3a:	0e 94 b5 0b 	call	0x176a	; 0x176a <setDestination>
	pathFollower_command(FOLLOWER_CMD_START);
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	0e 94 36 1a 	call	0x346c	; 0x346c <pathFollower_command>
	
	*status = MOVE;
    1d44:	83 e0       	ldi	r24, 0x03	; 3
    1d46:	f5 01       	movw	r30, r10
    1d48:	80 83       	st	Z, r24
	*done = false;
    1d4a:	f6 01       	movw	r30, r12
    1d4c:	10 82       	st	Z, r1
}
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	ff 90       	pop	r15
    1d58:	df 90       	pop	r13
    1d5a:	cf 90       	pop	r12
    1d5c:	bf 90       	pop	r11
    1d5e:	af 90       	pop	r10
    1d60:	08 95       	ret
	
	if (isWalled(pose, coordInMaze, W)){
		if (!isWalled(pose, coordInMaze, A)){
			toGo = A;
		}
		else if (!isWalled(pose, coordInMaze, D)){
    1d62:	43 e0       	ldi	r20, 0x03	; 3
    1d64:	b8 01       	movw	r22, r16
    1d66:	ce 01       	movw	r24, r28
    1d68:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <isWalled>
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	e0 cf       	rjmp	.-64     	; 0x1d30 <inWayOpt+0x4a>
			toGo = D;
    1d70:	83 e0       	ldi	r24, 0x03	; 3
    1d72:	f8 2e       	mov	r15, r24
    1d74:	d6 cf       	rjmp	.-84     	; 0x1d22 <inWayOpt+0x3c>

00001d76 <inPlaceOpt>:
	
	*status = MOVE;
	*done = false;
}

void inPlaceOpt(Pose_t* pose, bool* done, StateName* status, coordinate* coordInMaze){
    1d76:	bf 92       	push	r11
    1d78:	cf 92       	push	r12
    1d7a:	df 92       	push	r13
    1d7c:	ef 92       	push	r14
    1d7e:	ff 92       	push	r15
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	8c 01       	movw	r16, r24
    1d8a:	6b 01       	movw	r12, r22
    1d8c:	7a 01       	movw	r14, r20
    1d8e:	e9 01       	movw	r28, r18
	}
}

int allMarksAround(coordinate* coordInMaze){
	return 
		maze[coordInMaze->x][coordInMaze->y].marksW +
    1d90:	28 81       	ld	r18, Y
    1d92:	39 81       	ldd	r19, Y+1	; 0x01
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	9b 81       	ldd	r25, Y+3	; 0x03
		maze[coordInMaze->x][coordInMaze->y].marksA +
    1d98:	44 e1       	ldi	r20, 0x14	; 20
    1d9a:	48 9f       	mul	r20, r24
    1d9c:	f0 01       	movw	r30, r0
    1d9e:	49 9f       	mul	r20, r25
    1da0:	f0 0d       	add	r31, r0
    1da2:	11 24       	eor	r1, r1
    1da4:	4c e8       	ldi	r20, 0x8C	; 140
    1da6:	42 9f       	mul	r20, r18
    1da8:	c0 01       	movw	r24, r0
    1daa:	43 9f       	mul	r20, r19
    1dac:	90 0d       	add	r25, r0
    1dae:	11 24       	eor	r1, r1
    1db0:	e8 0f       	add	r30, r24
    1db2:	f9 1f       	adc	r31, r25
    1db4:	e7 5c       	subi	r30, 0xC7	; 199
    1db6:	f7 4f       	sbci	r31, 0xF7	; 247
	}
}

int allMarksAround(coordinate* coordInMaze){
	return 
		maze[coordInMaze->x][coordInMaze->y].marksW +
    1db8:	22 85       	ldd	r18, Z+10	; 0x0a
    1dba:	33 85       	ldd	r19, Z+11	; 0x0b
    1dbc:	84 85       	ldd	r24, Z+12	; 0x0c
    1dbe:	95 85       	ldd	r25, Z+13	; 0x0d
    1dc0:	82 0f       	add	r24, r18
    1dc2:	93 1f       	adc	r25, r19
    1dc4:	26 85       	ldd	r18, Z+14	; 0x0e
    1dc6:	37 85       	ldd	r19, Z+15	; 0x0f
    1dc8:	82 0f       	add	r24, r18
    1dca:	93 1f       	adc	r25, r19
    1dcc:	20 85       	ldd	r18, Z+8	; 0x08
    1dce:	31 85       	ldd	r19, Z+9	; 0x09
    1dd0:	82 0f       	add	r24, r18
    1dd2:	93 1f       	adc	r25, r19
}

void inPlaceOpt(Pose_t* pose, bool* done, StateName* status, coordinate* coordInMaze){
	int marksAround = allMarksAround(coordInMaze);
	bool explorationOver = false;
	if (marksAround == 0){
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	a1 f1       	breq	.+104    	; 0x1e40 <inPlaceOpt+0xca>
		}
		mark(pose,coordInMaze, distance);
		setDestination(pose, coordInMaze, distance);
		pathFollower_command(FOLLOWER_CMD_START);
	}
	else if (marksAround >= 1 && marks(pose, coordInMaze, S) == 0 && !isWalled(pose, coordInMaze, S)){
    1dd8:	7c f0       	brlt	.+30     	; 0x1df8 <inPlaceOpt+0x82>
    1dda:	42 e0       	ldi	r20, 0x02	; 2
    1ddc:	be 01       	movw	r22, r28
    1dde:	c8 01       	movw	r24, r16
    1de0:	0e 94 ce 09 	call	0x139c	; 0x139c <marks>
    1de4:	89 2b       	or	r24, r25
    1de6:	41 f4       	brne	.+16     	; 0x1df8 <inPlaceOpt+0x82>
    1de8:	42 e0       	ldi	r20, 0x02	; 2
    1dea:	be 01       	movw	r22, r28
    1dec:	c8 01       	movw	r24, r16
    1dee:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <isWalled>
    1df2:	88 23       	and	r24, r24
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <inPlaceOpt+0x82>
    1df6:	5b c0       	rjmp	.+182    	; 0x1eae <inPlaceOpt+0x138>
		mark(pose, coordInMaze, S);
		setDestination(pose, coordInMaze, S);
		pathFollower_command(FOLLOWER_CMD_START);
	}

	else if (marks(pose, coordInMaze, wayLessMarks(pose, coordInMaze)) >= 2){
    1df8:	be 01       	movw	r22, r28
    1dfa:	c8 01       	movw	r24, r16
    1dfc:	0e 94 4d 0b 	call	0x169a	; 0x169a <wayLessMarks>
    1e00:	b8 2e       	mov	r11, r24
    1e02:	48 2f       	mov	r20, r24
    1e04:	be 01       	movw	r22, r28
    1e06:	c8 01       	movw	r24, r16
    1e08:	0e 94 ce 09 	call	0x139c	; 0x139c <marks>
    1e0c:	02 97       	sbiw	r24, 0x02	; 2
    1e0e:	ac f1       	brlt	.+106    	; 0x1e7a <inPlaceOpt+0x104>
		explorationOver = true;
		communication_log(LEVEL_INFO, "Exploration is over. couldn't find a way out!");
    1e10:	88 ea       	ldi	r24, 0xA8	; 168
    1e12:	92 e0       	ldi	r25, 0x02	; 2
    1e14:	9f 93       	push	r25
    1e16:	8f 93       	push	r24
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	8f 93       	push	r24
    1e1c:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
		setDestination(pose, coordInMaze, wayLeastMarks);
		pathFollower_command(FOLLOWER_CMD_START);
	}
	
	if (explorationOver){
		*status = END;
    1e20:	86 e0       	ldi	r24, 0x06	; 6
    1e22:	f7 01       	movw	r30, r14
    1e24:	80 83       	st	Z, r24
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
	}
	else{
		*status = MOVE;
		*done = false;
	}
}
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	bf 90       	pop	r11
    1e3e:	08 95       	ret

void inPlaceOpt(Pose_t* pose, bool* done, StateName* status, coordinate* coordInMaze){
	int marksAround = allMarksAround(coordInMaze);
	bool explorationOver = false;
	if (marksAround == 0){
		mark(pose, coordInMaze, S);
    1e40:	42 e0       	ldi	r20, 0x02	; 2
    1e42:	be 01       	movw	r22, r28
    1e44:	c8 01       	movw	r24, r16
    1e46:	0e 94 4d 0a 	call	0x149a	; 0x149a <mark>
		LocalWay distance = S;
		if (!isWalled(pose, coordInMaze, W)){
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	be 01       	movw	r22, r28
    1e4e:	c8 01       	movw	r24, r16
    1e50:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <isWalled>
    1e54:	88 23       	and	r24, r24
    1e56:	49 f1       	breq	.+82     	; 0x1eaa <inPlaceOpt+0x134>
			distance = W;
		}
		else if (!isWalled(pose, coordInMaze, A)){
    1e58:	41 e0       	ldi	r20, 0x01	; 1
    1e5a:	be 01       	movw	r22, r28
    1e5c:	c8 01       	movw	r24, r16
    1e5e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <isWalled>
    1e62:	88 23       	and	r24, r24
    1e64:	81 f1       	breq	.+96     	; 0x1ec6 <inPlaceOpt+0x150>
			distance = A;
		}
		else if (!isWalled(pose, coordInMaze, D)){
    1e66:	43 e0       	ldi	r20, 0x03	; 3
    1e68:	be 01       	movw	r22, r28
    1e6a:	c8 01       	movw	r24, r16
    1e6c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <isWalled>
    1e70:	81 11       	cpse	r24, r1
    1e72:	2c c0       	rjmp	.+88     	; 0x1ecc <inPlaceOpt+0x156>
			distance = D;
    1e74:	93 e0       	ldi	r25, 0x03	; 3
    1e76:	b9 2e       	mov	r11, r25
    1e78:	05 c0       	rjmp	.+10     	; 0x1e84 <inPlaceOpt+0x10e>
		explorationOver = true;
		communication_log(LEVEL_INFO, "Exploration is over. couldn't find a way out!");
	}
	else{
		LocalWay wayLeastMarks = wayLessMarks(pose, coordInMaze);
		mark(pose, coordInMaze, S);
    1e7a:	42 e0       	ldi	r20, 0x02	; 2
    1e7c:	be 01       	movw	r22, r28
    1e7e:	c8 01       	movw	r24, r16
    1e80:	0e 94 4d 0a 	call	0x149a	; 0x149a <mark>
		mark(pose, coordInMaze, wayLeastMarks);
    1e84:	4b 2d       	mov	r20, r11
    1e86:	be 01       	movw	r22, r28
    1e88:	c8 01       	movw	r24, r16
    1e8a:	0e 94 4d 0a 	call	0x149a	; 0x149a <mark>
		setDestination(pose, coordInMaze, wayLeastMarks);
    1e8e:	4b 2d       	mov	r20, r11
    1e90:	be 01       	movw	r22, r28
    1e92:	c8 01       	movw	r24, r16
    1e94:	0e 94 b5 0b 	call	0x176a	; 0x176a <setDestination>
		pathFollower_command(FOLLOWER_CMD_START);
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	0e 94 36 1a 	call	0x346c	; 0x346c <pathFollower_command>
	
	if (explorationOver){
		*status = END;
	}
	else{
		*status = MOVE;
    1e9e:	83 e0       	ldi	r24, 0x03	; 3
    1ea0:	f7 01       	movw	r30, r14
    1ea2:	80 83       	st	Z, r24
		*done = false;
    1ea4:	f6 01       	movw	r30, r12
    1ea6:	10 82       	st	Z, r1
    1ea8:	c1 cf       	rjmp	.-126    	; 0x1e2c <inPlaceOpt+0xb6>
	bool explorationOver = false;
	if (marksAround == 0){
		mark(pose, coordInMaze, S);
		LocalWay distance = S;
		if (!isWalled(pose, coordInMaze, W)){
			distance = W;
    1eaa:	b1 2c       	mov	r11, r1
    1eac:	eb cf       	rjmp	.-42     	; 0x1e84 <inPlaceOpt+0x10e>
		mark(pose,coordInMaze, distance);
		setDestination(pose, coordInMaze, distance);
		pathFollower_command(FOLLOWER_CMD_START);
	}
	else if (marksAround >= 1 && marks(pose, coordInMaze, S) == 0 && !isWalled(pose, coordInMaze, S)){
		mark(pose, coordInMaze, S);
    1eae:	42 e0       	ldi	r20, 0x02	; 2
    1eb0:	be 01       	movw	r22, r28
    1eb2:	c8 01       	movw	r24, r16
    1eb4:	0e 94 4d 0a 	call	0x149a	; 0x149a <mark>
		mark(pose, coordInMaze, S);
    1eb8:	42 e0       	ldi	r20, 0x02	; 2
    1eba:	be 01       	movw	r22, r28
    1ebc:	c8 01       	movw	r24, r16
    1ebe:	0e 94 4d 0a 	call	0x149a	; 0x149a <mark>
		setDestination(pose, coordInMaze, S);
    1ec2:	42 e0       	ldi	r20, 0x02	; 2
    1ec4:	e5 cf       	rjmp	.-54     	; 0x1e90 <inPlaceOpt+0x11a>
		LocalWay distance = S;
		if (!isWalled(pose, coordInMaze, W)){
			distance = W;
		}
		else if (!isWalled(pose, coordInMaze, A)){
			distance = A;
    1ec6:	bb 24       	eor	r11, r11
    1ec8:	b3 94       	inc	r11
    1eca:	dc cf       	rjmp	.-72     	; 0x1e84 <inPlaceOpt+0x10e>
void inPlaceOpt(Pose_t* pose, bool* done, StateName* status, coordinate* coordInMaze){
	int marksAround = allMarksAround(coordInMaze);
	bool explorationOver = false;
	if (marksAround == 0){
		mark(pose, coordInMaze, S);
		LocalWay distance = S;
    1ecc:	82 e0       	ldi	r24, 0x02	; 2
    1ece:	b8 2e       	mov	r11, r24
    1ed0:	d9 cf       	rjmp	.-78     	; 0x1e84 <inPlaceOpt+0x10e>

00001ed2 <moveOpt>:
		*status = MOVE;
		*done = false;
	}
}

void moveOpt(Pose_t* pose, bool* done, StateName* status, coordinate* coordInMaze){
    1ed2:	2f 92       	push	r2
    1ed4:	3f 92       	push	r3
    1ed6:	4f 92       	push	r4
    1ed8:	5f 92       	push	r5
    1eda:	6f 92       	push	r6
    1edc:	7f 92       	push	r7
    1ede:	8f 92       	push	r8
    1ee0:	9f 92       	push	r9
    1ee2:	af 92       	push	r10
    1ee4:	bf 92       	push	r11
    1ee6:	cf 92       	push	r12
    1ee8:	df 92       	push	r13
    1eea:	ef 92       	push	r14
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	8c 01       	movw	r16, r24
    1ef8:	7b 01       	movw	r14, r22
    1efa:	6a 01       	movw	r12, r20
    1efc:	19 01       	movw	r2, r18
	bool reached = false;
	if (!pathFollower_getStatus()->enabled){
    1efe:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <pathFollower_status>
    1f02:	81 11       	cpse	r24, r1
    1f04:	05 c0       	rjmp	.+10     	; 0x1f10 <moveOpt+0x3e>
		*status = CORE;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	fa 01       	movw	r30, r20
    1f0a:	80 83       	st	Z, r24
		*done = false;
    1f0c:	fb 01       	movw	r30, r22
    1f0e:	10 82       	st	Z, r1
	}
	if ((pose->x > (currDestinationCoords.x - 120) && pose->y > (currDestinationCoords.y - 120)) &&
    1f10:	f8 01       	movw	r30, r16
    1f12:	80 80       	ld	r8, Z
    1f14:	91 80       	ldd	r9, Z+1	; 0x01
    1f16:	a2 80       	ldd	r10, Z+2	; 0x02
    1f18:	b3 80       	ldd	r11, Z+3	; 0x03
    1f1a:	c0 91 d0 03 	lds	r28, 0x03D0	; 0x8003d0 <currDestinationCoords>
    1f1e:	d0 91 d1 03 	lds	r29, 0x03D1	; 0x8003d1 <currDestinationCoords+0x1>
    1f22:	be 01       	movw	r22, r28
    1f24:	68 57       	subi	r22, 0x78	; 120
    1f26:	71 09       	sbc	r23, r1
    1f28:	07 2e       	mov	r0, r23
    1f2a:	00 0c       	add	r0, r0
    1f2c:	88 0b       	sbc	r24, r24
    1f2e:	99 0b       	sbc	r25, r25
    1f30:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    1f34:	9b 01       	movw	r18, r22
    1f36:	ac 01       	movw	r20, r24
    1f38:	c5 01       	movw	r24, r10
    1f3a:	b4 01       	movw	r22, r8
    1f3c:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    1f40:	18 16       	cp	r1, r24
    1f42:	d4 f4       	brge	.+52     	; 0x1f78 <moveOpt+0xa6>
    1f44:	f8 01       	movw	r30, r16
    1f46:	44 80       	ldd	r4, Z+4	; 0x04
    1f48:	55 80       	ldd	r5, Z+5	; 0x05
    1f4a:	66 80       	ldd	r6, Z+6	; 0x06
    1f4c:	77 80       	ldd	r7, Z+7	; 0x07
    1f4e:	00 91 d2 03 	lds	r16, 0x03D2	; 0x8003d2 <currDestinationCoords+0x2>
    1f52:	10 91 d3 03 	lds	r17, 0x03D3	; 0x8003d3 <currDestinationCoords+0x3>
    1f56:	b8 01       	movw	r22, r16
    1f58:	68 57       	subi	r22, 0x78	; 120
    1f5a:	71 09       	sbc	r23, r1
    1f5c:	07 2e       	mov	r0, r23
    1f5e:	00 0c       	add	r0, r0
    1f60:	88 0b       	sbc	r24, r24
    1f62:	99 0b       	sbc	r25, r25
    1f64:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    1f68:	9b 01       	movw	r18, r22
    1f6a:	ac 01       	movw	r20, r24
    1f6c:	c3 01       	movw	r24, r6
    1f6e:	b2 01       	movw	r22, r4
    1f70:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    1f74:	18 16       	cp	r1, r24
    1f76:	d4 f0       	brlt	.+52     	; 0x1fac <moveOpt+0xda>
		*done = false;
	}
}

void moveOpt(Pose_t* pose, bool* done, StateName* status, coordinate* coordInMaze){
	bool reached = false;
    1f78:	c0 e0       	ldi	r28, 0x00	; 0
	}
	if ((pose->x > (currDestinationCoords.x - 120) && pose->y > (currDestinationCoords.y - 120)) &&
		(pose->x < (currDestinationCoords.x + 120) && pose->y < (currDestinationCoords.y + 120))){
		reached = true;
	}
	if (MVelocityR < 0 && MVelocityL > 0 && (getDistanceFront() < 3.5)){
    1f7a:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <MVelocityR>
    1f7e:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <MVelocityR+0x1>
    1f82:	97 fd       	sbrc	r25, 7
    1f84:	3c c0       	rjmp	.+120    	; 0x1ffe <moveOpt+0x12c>
		if ((coordInMaze->x != lastCoordInMaze.x || coordInMaze->y != lastCoordInMaze.y) && !reached){
			coordInMaze->x = lastCoordInMaze.x;
			coordInMaze->y = lastCoordInMaze.y;
		}
	}
}
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	df 90       	pop	r13
    1f94:	cf 90       	pop	r12
    1f96:	bf 90       	pop	r11
    1f98:	af 90       	pop	r10
    1f9a:	9f 90       	pop	r9
    1f9c:	8f 90       	pop	r8
    1f9e:	7f 90       	pop	r7
    1fa0:	6f 90       	pop	r6
    1fa2:	5f 90       	pop	r5
    1fa4:	4f 90       	pop	r4
    1fa6:	3f 90       	pop	r3
    1fa8:	2f 90       	pop	r2
    1faa:	08 95       	ret
	bool reached = false;
	if (!pathFollower_getStatus()->enabled){
		*status = CORE;
		*done = false;
	}
	if ((pose->x > (currDestinationCoords.x - 120) && pose->y > (currDestinationCoords.y - 120)) &&
    1fac:	c8 58       	subi	r28, 0x88	; 136
    1fae:	df 4f       	sbci	r29, 0xFF	; 255
    1fb0:	be 01       	movw	r22, r28
    1fb2:	dd 0f       	add	r29, r29
    1fb4:	88 0b       	sbc	r24, r24
    1fb6:	99 0b       	sbc	r25, r25
    1fb8:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    1fbc:	9b 01       	movw	r18, r22
    1fbe:	ac 01       	movw	r20, r24
    1fc0:	c5 01       	movw	r24, r10
    1fc2:	b4 01       	movw	r22, r8
    1fc4:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
    1fc8:	87 ff       	sbrs	r24, 7
    1fca:	d6 cf       	rjmp	.-84     	; 0x1f78 <moveOpt+0xa6>
		(pose->x < (currDestinationCoords.x + 120) && pose->y < (currDestinationCoords.y + 120))){
    1fcc:	b8 01       	movw	r22, r16
    1fce:	68 58       	subi	r22, 0x88	; 136
    1fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd2:	07 2e       	mov	r0, r23
    1fd4:	00 0c       	add	r0, r0
    1fd6:	88 0b       	sbc	r24, r24
    1fd8:	99 0b       	sbc	r25, r25
    1fda:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    1fde:	9b 01       	movw	r18, r22
    1fe0:	ac 01       	movw	r20, r24
    1fe2:	c3 01       	movw	r24, r6
    1fe4:	b2 01       	movw	r22, r4
    1fe6:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
    1fea:	c8 2f       	mov	r28, r24
    1fec:	cc 1f       	adc	r28, r28
    1fee:	cc 27       	eor	r28, r28
    1ff0:	cc 1f       	adc	r28, r28
		reached = true;
	}
	if (MVelocityR < 0 && MVelocityL > 0 && (getDistanceFront() < 3.5)){
    1ff2:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <MVelocityR>
    1ff6:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <MVelocityR+0x1>
    1ffa:	97 ff       	sbrs	r25, 7
    1ffc:	c4 cf       	rjmp	.-120    	; 0x1f86 <moveOpt+0xb4>
    1ffe:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
    2002:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <__data_end+0x1>
    2006:	18 16       	cp	r1, r24
    2008:	19 06       	cpc	r1, r25
    200a:	0c f0       	brlt	.+2      	; 0x200e <__DATA_REGION_LENGTH__+0xe>
    200c:	bc cf       	rjmp	.-136    	; 0x1f86 <moveOpt+0xb4>
    200e:	0e 94 09 08 	call	0x1012	; 0x1012 <getDistanceFront>
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e6       	ldi	r20, 0x60	; 96
    2018:	50 e4       	ldi	r21, 0x40	; 64
    201a:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
    201e:	87 ff       	sbrs	r24, 7
    2020:	b2 cf       	rjmp	.-156    	; 0x1f86 <moveOpt+0xb4>
		communication_log(LEVEL_INFO, "MoveOpt: L %d, R %d", MVelocityL, MVelocityR);
    2022:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <MVelocityR+0x1>
    2026:	8f 93       	push	r24
    2028:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <MVelocityR>
    202c:	8f 93       	push	r24
    202e:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <__data_end+0x1>
    2032:	8f 93       	push	r24
    2034:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
    2038:	8f 93       	push	r24
    203a:	86 ed       	ldi	r24, 0xD6	; 214
    203c:	92 e0       	ldi	r25, 0x02	; 2
    203e:	9f 93       	push	r25
    2040:	8f 93       	push	r24
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	8f 93       	push	r24
    2046:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
		pathFollower_command(FOLLOWER_CMD_PAUSE);
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	0e 94 36 1a 	call	0x346c	; 0x346c <pathFollower_command>
		Motor_stopAll();
    2050:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Motor_stopAll>
		*status = CORE;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	f6 01       	movw	r30, r12
    2058:	80 83       	st	Z, r24
		*done = false;
    205a:	f7 01       	movw	r30, r14
    205c:	10 82       	st	Z, r1
		MVelocityL = 0;
    205e:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <__data_end+0x1>
    2062:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <__data_end>
		MVelocityR = 0;
    2066:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <MVelocityR+0x1>
    206a:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <MVelocityR>
		if ((coordInMaze->x != lastCoordInMaze.x || coordInMaze->y != lastCoordInMaze.y) && !reached){
    206e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <lastCoordInMaze>
    2072:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <lastCoordInMaze+0x1>
    2076:	2d b7       	in	r18, 0x3d	; 61
    2078:	3e b7       	in	r19, 0x3e	; 62
    207a:	29 5f       	subi	r18, 0xF9	; 249
    207c:	3f 4f       	sbci	r19, 0xFF	; 255
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	3e bf       	out	0x3e, r19	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	2d bf       	out	0x3d, r18	; 61
    2088:	f1 01       	movw	r30, r2
    208a:	20 81       	ld	r18, Z
    208c:	31 81       	ldd	r19, Z+1	; 0x01
    208e:	28 17       	cp	r18, r24
    2090:	39 07       	cpc	r19, r25
    2092:	61 f0       	breq	.+24     	; 0x20ac <__DATA_REGION_LENGTH__+0xac>
    2094:	c1 11       	cpse	r28, r1
    2096:	77 cf       	rjmp	.-274    	; 0x1f86 <moveOpt+0xb4>
			coordInMaze->x = lastCoordInMaze.x;
    2098:	f1 01       	movw	r30, r2
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
			coordInMaze->y = lastCoordInMaze.y;
    209e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <lastCoordInMaze+0x2>
    20a2:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <lastCoordInMaze+0x3>
    20a6:	93 83       	std	Z+3, r25	; 0x03
    20a8:	82 83       	std	Z+2, r24	; 0x02
		}
	}
}
    20aa:	6d cf       	rjmp	.-294    	; 0x1f86 <moveOpt+0xb4>
		Motor_stopAll();
		*status = CORE;
		*done = false;
		MVelocityL = 0;
		MVelocityR = 0;
		if ((coordInMaze->x != lastCoordInMaze.x || coordInMaze->y != lastCoordInMaze.y) && !reached){
    20ac:	42 81       	ldd	r20, Z+2	; 0x02
    20ae:	53 81       	ldd	r21, Z+3	; 0x03
    20b0:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <lastCoordInMaze+0x2>
    20b4:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <lastCoordInMaze+0x3>
    20b8:	42 17       	cp	r20, r18
    20ba:	53 07       	cpc	r21, r19
    20bc:	59 f7       	brne	.-42     	; 0x2094 <__DATA_REGION_LENGTH__+0x94>
    20be:	63 cf       	rjmp	.-314    	; 0x1f86 <moveOpt+0xb4>

000020c0 <turnOpt>:
			coordInMaze->y = lastCoordInMaze.y;
		}
	}
}

void turnOpt(Pose_t* pose, bool* done, StateName* status){
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	eb 01       	movw	r28, r22
    20ca:	8a 01       	movw	r16, r20
	GlobeWay showing = getGlobeWay(pose);
    20cc:	0e 94 4e 08 	call	0x109c	; 0x109c <getGlobeWay>
	if (showing == UNCLEAR){
    20d0:	84 30       	cpi	r24, 0x04	; 4
    20d2:	49 f0       	breq	.+18     	; 0x20e6 <turnOpt+0x26>
		Motor_setVelocities(1000, 1000);
	}
	else{
		*status = CORE;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	f8 01       	movw	r30, r16
    20d8:	80 83       	st	Z, r24
		*done = false;
    20da:	18 82       	st	Y, r1
	}
}
    20dc:	df 91       	pop	r29
    20de:	cf 91       	pop	r28
    20e0:	1f 91       	pop	r17
    20e2:	0f 91       	pop	r16
    20e4:	08 95       	ret
}

void turnOpt(Pose_t* pose, bool* done, StateName* status){
	GlobeWay showing = getGlobeWay(pose);
	if (showing == UNCLEAR){
		Motor_setVelocities(1000, 1000);
    20e6:	68 ee       	ldi	r22, 0xE8	; 232
    20e8:	73 e0       	ldi	r23, 0x03	; 3
    20ea:	88 ee       	ldi	r24, 0xE8	; 232
    20ec:	93 e0       	ldi	r25, 0x03	; 3
	}
	else{
		*status = CORE;
		*done = false;
	}
}
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	1f 91       	pop	r17
    20f4:	0f 91       	pop	r16
}

void turnOpt(Pose_t* pose, bool* done, StateName* status){
	GlobeWay showing = getGlobeWay(pose);
	if (showing == UNCLEAR){
		Motor_setVelocities(1000, 1000);
    20f6:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <Motor_setVelocities>

000020fa <coordLookup>:
#include "Maze.h"
#include <math.h>

cell maze[7][7];

coordinate coordLookup(int i, int j){
    20fa:	4f 92       	push	r4
    20fc:	5f 92       	push	r5
    20fe:	6f 92       	push	r6
    2100:	7f 92       	push	r7
    2102:	8f 92       	push	r8
    2104:	9f 92       	push	r9
    2106:	af 92       	push	r10
    2108:	bf 92       	push	r11
    210a:	cf 92       	push	r12
    210c:	df 92       	push	r13
    210e:	ef 92       	push	r14
    2110:	ff 92       	push	r15
    2112:	7b 01       	movw	r14, r22
	coordinate out = {
		.x = round(253.3 * i),
    2114:	bc 01       	movw	r22, r24
    2116:	99 0f       	add	r25, r25
    2118:	88 0b       	sbc	r24, r24
    211a:	99 0b       	sbc	r25, r25
    211c:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    2120:	2d ec       	ldi	r18, 0xCD	; 205
    2122:	3c e4       	ldi	r19, 0x4C	; 76
    2124:	4d e7       	ldi	r20, 0x7D	; 125
    2126:	53 e4       	ldi	r21, 0x43	; 67
    2128:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
    212c:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <round>
    2130:	2b 01       	movw	r4, r22
    2132:	3c 01       	movw	r6, r24
		.y = round(253.3 * j)
    2134:	b7 01       	movw	r22, r14
    2136:	ff 0c       	add	r15, r15
    2138:	88 0b       	sbc	r24, r24
    213a:	99 0b       	sbc	r25, r25
    213c:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    2140:	2d ec       	ldi	r18, 0xCD	; 205
    2142:	3c e4       	ldi	r19, 0x4C	; 76
    2144:	4d e7       	ldi	r20, 0x7D	; 125
    2146:	53 e4       	ldi	r21, 0x43	; 67
    2148:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
    214c:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <round>
    2150:	4b 01       	movw	r8, r22
    2152:	5c 01       	movw	r10, r24
	};
	return out;
    2154:	c3 01       	movw	r24, r6
    2156:	b2 01       	movw	r22, r4
    2158:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    215c:	6b 01       	movw	r12, r22
    215e:	c5 01       	movw	r24, r10
    2160:	b4 01       	movw	r22, r8
    2162:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    2166:	7b 01       	movw	r14, r22
}
    2168:	c7 01       	movw	r24, r14
    216a:	b6 01       	movw	r22, r12
    216c:	ff 90       	pop	r15
    216e:	ef 90       	pop	r14
    2170:	df 90       	pop	r13
    2172:	cf 90       	pop	r12
    2174:	bf 90       	pop	r11
    2176:	af 90       	pop	r10
    2178:	9f 90       	pop	r9
    217a:	8f 90       	pop	r8
    217c:	7f 90       	pop	r7
    217e:	6f 90       	pop	r6
    2180:	5f 90       	pop	r5
    2182:	4f 90       	pop	r4
    2184:	08 95       	ret

00002186 <makeCell>:

cell makeCell(int i, int j){
    2186:	8f 92       	push	r8
    2188:	9f 92       	push	r9
    218a:	af 92       	push	r10
    218c:	bf 92       	push	r11
    218e:	cf 92       	push	r12
    2190:	df 92       	push	r13
    2192:	ef 92       	push	r14
    2194:	ff 92       	push	r15
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	ec 01       	movw	r28, r24
    219c:	cb 01       	movw	r24, r22
	coordinate t = coordLookup(i - 3 , 3 - j);
    219e:	63 e0       	ldi	r22, 0x03	; 3
    21a0:	70 e0       	ldi	r23, 0x00	; 0
    21a2:	64 1b       	sub	r22, r20
    21a4:	75 0b       	sbc	r23, r21
    21a6:	03 97       	sbiw	r24, 0x03	; 3
    21a8:	0e 94 7d 10 	call	0x20fa	; 0x20fa <coordLookup>
    21ac:	6b 01       	movw	r12, r22
    21ae:	7c 01       	movw	r14, r24
	cell out = {t.x, t.y, 0, 0, 0, 0, false, false, false, false};
    21b0:	b7 01       	movw	r22, r14
    21b2:	ff 0c       	add	r15, r15
    21b4:	88 0b       	sbc	r24, r24
    21b6:	99 0b       	sbc	r25, r25
    21b8:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    21bc:	4b 01       	movw	r8, r22
    21be:	5c 01       	movw	r10, r24
	return out;
    21c0:	b6 01       	movw	r22, r12
    21c2:	dd 0c       	add	r13, r13
    21c4:	88 0b       	sbc	r24, r24
    21c6:	99 0b       	sbc	r25, r25
    21c8:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    21cc:	68 83       	st	Y, r22
    21ce:	79 83       	std	Y+1, r23	; 0x01
    21d0:	8a 83       	std	Y+2, r24	; 0x02
    21d2:	9b 83       	std	Y+3, r25	; 0x03
    21d4:	8c 82       	std	Y+4, r8	; 0x04
    21d6:	9d 82       	std	Y+5, r9	; 0x05
    21d8:	ae 82       	std	Y+6, r10	; 0x06
    21da:	bf 82       	std	Y+7, r11	; 0x07
    21dc:	19 86       	std	Y+9, r1	; 0x09
    21de:	18 86       	std	Y+8, r1	; 0x08
    21e0:	1b 86       	std	Y+11, r1	; 0x0b
    21e2:	1a 86       	std	Y+10, r1	; 0x0a
    21e4:	1d 86       	std	Y+13, r1	; 0x0d
    21e6:	1c 86       	std	Y+12, r1	; 0x0c
    21e8:	1f 86       	std	Y+15, r1	; 0x0f
    21ea:	1e 86       	std	Y+14, r1	; 0x0e
    21ec:	18 8a       	std	Y+16, r1	; 0x10
    21ee:	19 8a       	std	Y+17, r1	; 0x11
    21f0:	1a 8a       	std	Y+18, r1	; 0x12
    21f2:	1b 8a       	std	Y+19, r1	; 0x13
}
    21f4:	ce 01       	movw	r24, r28
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	ff 90       	pop	r15
    21fc:	ef 90       	pop	r14
    21fe:	df 90       	pop	r13
    2200:	cf 90       	pop	r12
    2202:	bf 90       	pop	r11
    2204:	af 90       	pop	r10
    2206:	9f 90       	pop	r9
    2208:	8f 90       	pop	r8
    220a:	08 95       	ret

0000220c <mazeInit>:

void mazeInit(){
    220c:	8f 92       	push	r8
    220e:	9f 92       	push	r9
    2210:	af 92       	push	r10
    2212:	bf 92       	push	r11
    2214:	cf 92       	push	r12
    2216:	df 92       	push	r13
    2218:	ef 92       	push	r14
    221a:	ff 92       	push	r15
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	64 97       	sbiw	r28, 0x14	; 20
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
	for (int j = 0; j < 7; j++){
    2234:	c1 2c       	mov	r12, r1
    2236:	d1 2c       	mov	r13, r1
		for (int i = 0; i < 7; i++){
			maze[i][j] = makeCell(i, j);
    2238:	84 e1       	ldi	r24, 0x14	; 20
    223a:	98 2e       	mov	r9, r24
    223c:	9c e8       	ldi	r25, 0x8C	; 140
    223e:	89 2e       	mov	r8, r25
	coordinate t = coordLookup(i - 3 , 3 - j);
	cell out = {t.x, t.y, 0, 0, 0, 0, false, false, false, false};
	return out;
}

void mazeInit(){
    2240:	e1 2c       	mov	r14, r1
    2242:	f1 2c       	mov	r15, r1
	for (int j = 0; j < 7; j++){
		for (int i = 0; i < 7; i++){
			maze[i][j] = makeCell(i, j);
    2244:	9c 9c       	mul	r9, r12
    2246:	50 01       	movw	r10, r0
    2248:	9d 9c       	mul	r9, r13
    224a:	b0 0c       	add	r11, r0
    224c:	11 24       	eor	r1, r1
    224e:	8e 9c       	mul	r8, r14
    2250:	80 01       	movw	r16, r0
    2252:	8f 9c       	mul	r8, r15
    2254:	10 0d       	add	r17, r0
    2256:	11 24       	eor	r1, r1
    2258:	0a 0d       	add	r16, r10
    225a:	1b 1d       	adc	r17, r11
    225c:	07 5c       	subi	r16, 0xC7	; 199
    225e:	17 4f       	sbci	r17, 0xF7	; 247
    2260:	a6 01       	movw	r20, r12
    2262:	b7 01       	movw	r22, r14
    2264:	ce 01       	movw	r24, r28
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	0e 94 c3 10 	call	0x2186	; 0x2186 <makeCell>
    226c:	fe 01       	movw	r30, r28
    226e:	31 96       	adiw	r30, 0x01	; 1
    2270:	d8 01       	movw	r26, r16
    2272:	89 2d       	mov	r24, r9
    2274:	01 90       	ld	r0, Z+
    2276:	0d 92       	st	X+, r0
    2278:	8a 95       	dec	r24
    227a:	e1 f7       	brne	.-8      	; 0x2274 <mazeInit+0x68>
	return out;
}

void mazeInit(){
	for (int j = 0; j < 7; j++){
		for (int i = 0; i < 7; i++){
    227c:	8f ef       	ldi	r24, 0xFF	; 255
    227e:	e8 1a       	sub	r14, r24
    2280:	f8 0a       	sbc	r15, r24
    2282:	87 e0       	ldi	r24, 0x07	; 7
    2284:	e8 16       	cp	r14, r24
    2286:	f1 04       	cpc	r15, r1
    2288:	11 f7       	brne	.-60     	; 0x224e <mazeInit+0x42>
	cell out = {t.x, t.y, 0, 0, 0, 0, false, false, false, false};
	return out;
}

void mazeInit(){
	for (int j = 0; j < 7; j++){
    228a:	8f ef       	ldi	r24, 0xFF	; 255
    228c:	c8 1a       	sub	r12, r24
    228e:	d8 0a       	sbc	r13, r24
    2290:	87 e0       	ldi	r24, 0x07	; 7
    2292:	c8 16       	cp	r12, r24
    2294:	d1 04       	cpc	r13, r1
    2296:	a1 f6       	brne	.-88     	; 0x2240 <mazeInit+0x34>
		for (int i = 0; i < 7; i++){
			maze[i][j] = makeCell(i, j);
		}
	}
    2298:	64 96       	adiw	r28, 0x14	; 20
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	ff 90       	pop	r15
    22ae:	ef 90       	pop	r14
    22b0:	df 90       	pop	r13
    22b2:	cf 90       	pop	r12
    22b4:	bf 90       	pop	r11
    22b6:	af 90       	pop	r10
    22b8:	9f 90       	pop	r9
    22ba:	8f 90       	pop	r8
    22bc:	08 95       	ret

000022be <aprilFools>:
			Motor_stopAll();
			doneHere = false;
    }
}

void aprilFools(const uint8_t* packet, const uint16_t size){
    22be:	dc 01       	movw	r26, r24
	Pose_t* payload = (Pose_t*) packet;
	pose.x = payload->x;
    22c0:	4d 91       	ld	r20, X+
    22c2:	5d 91       	ld	r21, X+
    22c4:	6d 91       	ld	r22, X+
    22c6:	7c 91       	ld	r23, X
    22c8:	13 97       	sbiw	r26, 0x03	; 3
    22ca:	e0 e2       	ldi	r30, 0x20	; 32
    22cc:	f2 e0       	ldi	r31, 0x02	; 2
    22ce:	40 83       	st	Z, r20
    22d0:	51 83       	std	Z+1, r21	; 0x01
    22d2:	62 83       	std	Z+2, r22	; 0x02
    22d4:	73 83       	std	Z+3, r23	; 0x03
	pose.y = payload->y;
    22d6:	14 96       	adiw	r26, 0x04	; 4
    22d8:	4d 91       	ld	r20, X+
    22da:	5d 91       	ld	r21, X+
    22dc:	6d 91       	ld	r22, X+
    22de:	7c 91       	ld	r23, X
    22e0:	17 97       	sbiw	r26, 0x07	; 7
    22e2:	44 83       	std	Z+4, r20	; 0x04
    22e4:	55 83       	std	Z+5, r21	; 0x05
    22e6:	66 83       	std	Z+6, r22	; 0x06
    22e8:	77 83       	std	Z+7, r23	; 0x07
	pose.theta = payload->theta;
    22ea:	18 96       	adiw	r26, 0x08	; 8
    22ec:	8d 91       	ld	r24, X+
    22ee:	9d 91       	ld	r25, X+
    22f0:	0d 90       	ld	r0, X+
    22f2:	bc 91       	ld	r27, X
    22f4:	a0 2d       	mov	r26, r0
    22f6:	80 87       	std	Z+8, r24	; 0x08
    22f8:	91 87       	std	Z+9, r25	; 0x09
    22fa:	a2 87       	std	Z+10, r26	; 0x0a
    22fc:	b3 87       	std	Z+11, r27	; 0x0b
    22fe:	08 95       	ret

00002300 <commDebug>:



// callback function for communication channel CH_IN_DEBUG (Debug View in HWPCS)
static void commDebug(const uint8_t* packet, const uint16_t size) {
    communication_log(LEVEL_FINE, "received %" PRIu16 " bytes", size);
    2300:	7f 93       	push	r23
    2302:	6f 93       	push	r22
    2304:	8a ee       	ldi	r24, 0xEA	; 234
    2306:	92 e0       	ldi	r25, 0x02	; 2
    2308:	9f 93       	push	r25
    230a:	8f 93       	push	r24
    230c:	83 e0       	ldi	r24, 0x03	; 3
    230e:	8f 93       	push	r24
    2310:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
}
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	08 95       	ret

00002320 <commUserCommand>:


// callback function for communication channel CH_IN_USER_COMMAND (User Command View in HWPCS)
static void commUserCommand(const uint8_t* packet, const uint16_t size) {
    UserCommand_t* cmd = (UserCommand_t*) packet;
    switch (cmd->id) {
    2320:	dc 01       	movw	r26, r24
    2322:	ec 91       	ld	r30, X
    2324:	8e 2f       	mov	r24, r30
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	89 30       	cpi	r24, 0x09	; 9
    232a:	91 05       	cpc	r25, r1
    232c:	08 f0       	brcs	.+2      	; 0x2330 <commUserCommand+0x10>
    232e:	60 c0       	rjmp	.+192    	; 0x23f0 <commUserCommand+0xd0>
    2330:	fc 01       	movw	r30, r24
    2332:	ee 58       	subi	r30, 0x8E	; 142
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	0c 94 c9 29 	jmp	0x5392	; 0x5392 <__tablejump2__>
		case 5: //Explore Labyrinth
			doneHere = true;
			communication_log(LEVEL_INFO, "Labyrinth Exploration started!");
			break;
		case 6: //reset pose
			pose.theta = M_PI_2;
    233a:	8b ed       	ldi	r24, 0xDB	; 219
    233c:	9f e0       	ldi	r25, 0x0F	; 15
    233e:	a9 ec       	ldi	r26, 0xC9	; 201
    2340:	bf e3       	ldi	r27, 0x3F	; 63
    2342:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <pose+0x8>
    2346:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <pose+0x9>
    234a:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <pose+0xa>
    234e:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <pose+0xb>
			pose.x = 10;
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a0 e2       	ldi	r26, 0x20	; 32
    2358:	b1 e4       	ldi	r27, 0x41	; 65
    235a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <pose>
    235e:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <pose+0x1>
    2362:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <pose+0x2>
    2366:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <pose+0x3>
			pose.y = 10;
    236a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <pose+0x4>
    236e:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <pose+0x5>
    2372:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <pose+0x6>
    2376:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <pose+0x7>
		case 7:
			communication_log(LEVEL_INFO, "x:%d , y:%d", (int16_t)maze[4][4].x, (int16_t)maze[4][4].y);
    237a:	60 91 bd 0a 	lds	r22, 0x0ABD	; 0x800abd <maze+0x284>
    237e:	70 91 be 0a 	lds	r23, 0x0ABE	; 0x800abe <maze+0x285>
    2382:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <maze+0x286>
    2386:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <maze+0x287>
    238a:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    238e:	7f 93       	push	r23
    2390:	6f 93       	push	r22
    2392:	60 91 b9 0a 	lds	r22, 0x0AB9	; 0x800ab9 <maze+0x280>
    2396:	70 91 ba 0a 	lds	r23, 0x0ABA	; 0x800aba <maze+0x281>
    239a:	80 91 bb 0a 	lds	r24, 0x0ABB	; 0x800abb <maze+0x282>
    239e:	90 91 bc 0a 	lds	r25, 0x0ABC	; 0x800abc <maze+0x283>
    23a2:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    23a6:	7f 93       	push	r23
    23a8:	6f 93       	push	r22
    23aa:	85 e5       	ldi	r24, 0x55	; 85
    23ac:	93 e0       	ldi	r25, 0x03	; 3
    23ae:	9f 93       	push	r25
    23b0:	8f 93       	push	r24
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	8f 93       	push	r24
    23b6:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
    23ba:	8d b7       	in	r24, 0x3d	; 61
    23bc:	9e b7       	in	r25, 0x3e	; 62
    23be:	07 96       	adiw	r24, 0x07	; 7
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	9e bf       	out	0x3e, r25	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	8d bf       	out	0x3d, r24	; 61
		case 8: //Stop lab Exploration
			pathFollower_command(FOLLOWER_CMD_RESET);
    23ca:	83 e0       	ldi	r24, 0x03	; 3
    23cc:	0e 94 36 1a 	call	0x346c	; 0x346c <pathFollower_command>
			coord.x = 3;
    23d0:	83 e0       	ldi	r24, 0x03	; 3
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <coord+0x1>
    23d8:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <coord>
			coord.y = 3;
    23dc:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <coord+0x3>
    23e0:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <coord+0x2>
			stat = START;
    23e4:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <stat>
			Motor_stopAll();
    23e8:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Motor_stopAll>
			doneHere = false;
    23ec:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <doneHere>
    23f0:	08 95       	ret
// callback function for communication channel CH_IN_USER_COMMAND (User Command View in HWPCS)
static void commUserCommand(const uint8_t* packet, const uint16_t size) {
    UserCommand_t* cmd = (UserCommand_t*) packet;
    switch (cmd->id) {
		case 0: // command ID 0: stop motors
			Motor_stopAll();
    23f2:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Motor_stopAll>
			movementstat = NOTMOVING;
    23f6:	82 e0       	ldi	r24, 0x02	; 2
    23f8:	80 93 0d 0c 	sts	0x0C0D, r24	; 0x800c0d <movementstat>
			break;
    23fc:	08 95       	ret
		case 1: // command ID 1: turn on spot
			Motor_setVelocities(-1500, 0);
    23fe:	60 e0       	ldi	r22, 0x00	; 0
    2400:	70 e0       	ldi	r23, 0x00	; 0
    2402:	84 e2       	ldi	r24, 0x24	; 36
    2404:	9a ef       	ldi	r25, 0xFA	; 250
    2406:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <Motor_setVelocities>
			movementstat = TURNING;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	80 93 0d 0c 	sts	0x0C0D, r24	; 0x800c0d <movementstat>
			break;
    2410:	08 95       	ret
		case 2: // command ID 2: drive forwards
			Motor_setVelocities(-3000, 3000);
    2412:	68 eb       	ldi	r22, 0xB8	; 184
    2414:	7b e0       	ldi	r23, 0x0B	; 11
    2416:	88 e4       	ldi	r24, 0x48	; 72
    2418:	94 ef       	ldi	r25, 0xF4	; 244
    241a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <Motor_setVelocities>
			movementstat = FORWARDING;
    241e:	10 92 0d 0c 	sts	0x0C0D, r1	; 0x800c0d <movementstat>
			break;
    2422:	08 95       	ret
		case 3: // command ID 3 : Switch navigation mode
			inMaze = !inMaze;
    2424:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <inMaze>
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	89 27       	eor	r24, r25
    242c:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <inMaze>
		
			if (inMaze){
    2430:	88 23       	and	r24, r24
    2432:	69 f1       	breq	.+90     	; 0x248e <commUserCommand+0x16e>
				communication_log(LEVEL_INFO, "Switched to Labyrinth Mode!");
    2434:	8c ef       	ldi	r24, 0xFC	; 252
    2436:	92 e0       	ldi	r25, 0x02	; 2
    2438:	9f 93       	push	r25
    243a:	8f 93       	push	r24
    243c:	82 e0       	ldi	r24, 0x02	; 2
    243e:	8f 93       	push	r24
    2440:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
 *
 * @param   lookaheadDistance   the lookahead distance given in millimeters
 */
static inline void __attribute__((always_inline)) pathFollower_setLookaheadDistance(const float lookaheadDistance) {
	extern float pathFollower_lookaheadDistance;
	pathFollower_lookaheadDistance = lookaheadDistance;
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	a8 e4       	ldi	r26, 0x48	; 72
    244a:	b2 e4       	ldi	r27, 0x42	; 66
    244c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <pathFollower_lookaheadDistance>
    2450:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <pathFollower_lookaheadDistance+0x1>
    2454:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <pathFollower_lookaheadDistance+0x2>
    2458:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <pathFollower_lookaheadDistance+0x3>
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	08 95       	ret
				
			}
			
			break;
		case 4: //Go to sat point
			goToCoordinate(&pose, &p);
    2464:	62 e1       	ldi	r22, 0x12	; 18
    2466:	72 e0       	ldi	r23, 0x02	; 2
    2468:	80 e2       	ldi	r24, 0x20	; 32
    246a:	92 e0       	ldi	r25, 0x02	; 2
    246c:	0c 94 6e 05 	jmp	0xadc	; 0xadc <goToCoordinate>
			break;
		case 5: //Explore Labyrinth
			doneHere = true;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <doneHere>
			communication_log(LEVEL_INFO, "Labyrinth Exploration started!");
    2476:	86 e3       	ldi	r24, 0x36	; 54
    2478:	93 e0       	ldi	r25, 0x03	; 3
    247a:	9f 93       	push	r25
    247c:	8f 93       	push	r24
    247e:	82 e0       	ldi	r24, 0x02	; 2
    2480:	8f 93       	push	r24
    2482:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
			break;
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	08 95       	ret
			if (inMaze){
				communication_log(LEVEL_INFO, "Switched to Labyrinth Mode!");
				pathFollower_setLookaheadDistance(50.0);
			}
			else{
				communication_log(LEVEL_INFO, "Switched to Path Follow Mode!");
    248e:	88 e1       	ldi	r24, 0x18	; 24
    2490:	93 e0       	ldi	r25, 0x03	; 3
    2492:	9f 93       	push	r25
    2494:	8f 93       	push	r24
    2496:	82 e0       	ldi	r24, 0x02	; 2
    2498:	8f 93       	push	r24
    249a:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	a0 ea       	ldi	r26, 0xA0	; 160
    24a4:	b1 e4       	ldi	r27, 0x41	; 65
    24a6:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <pathFollower_lookaheadDistance>
    24aa:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <pathFollower_lookaheadDistance+0x1>
    24ae:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <pathFollower_lookaheadDistance+0x2>
    24b2:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <pathFollower_lookaheadDistance+0x3>
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	08 95       	ret

000024be <__vector_11>:
 * ISRs for Interrupt Handling
 *******************************************************************************
 */

// Bumpers
ISR(PCINT2_vect){
    24be:	1f 92       	push	r1
    24c0:	0f 92       	push	r0
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	0f 92       	push	r0
    24c6:	11 24       	eor	r1, r1
    24c8:	0b b6       	in	r0, 0x3b	; 59
    24ca:	0f 92       	push	r0
    24cc:	2f 93       	push	r18
    24ce:	3f 93       	push	r19
    24d0:	4f 93       	push	r20
    24d2:	5f 93       	push	r21
    24d4:	6f 93       	push	r22
    24d6:	7f 93       	push	r23
    24d8:	8f 93       	push	r24
    24da:	9f 93       	push	r25
    24dc:	af 93       	push	r26
    24de:	bf 93       	push	r27
    24e0:	cf 93       	push	r28
    24e2:	ef 93       	push	r30
    24e4:	ff 93       	push	r31
	bool R = rightBumpOn();
    24e6:	0e 94 84 07 	call	0xf08	; 0xf08 <rightBumpOn>
    24ea:	c8 2f       	mov	r28, r24
	bool L = leftBumpOn();
    24ec:	0e 94 91 07 	call	0xf22	; 0xf22 <leftBumpOn>
	if(R){
    24f0:	c1 11       	cpse	r28, r1
    24f2:	16 c0       	rjmp	.+44     	; 0x2520 <__vector_11+0x62>
		//incCollisions();
		communication_log(LEVEL_INFO, "right bumper was pressed!");
		//write code to solve the collision problem
	}
	else if (L){
    24f4:	81 11       	cpse	r24, r1
    24f6:	22 c0       	rjmp	.+68     	; 0x253c <__vector_11+0x7e>
	}
	if (R || L){
		Motor_stopAll();
	}

}
    24f8:	ff 91       	pop	r31
    24fa:	ef 91       	pop	r30
    24fc:	cf 91       	pop	r28
    24fe:	bf 91       	pop	r27
    2500:	af 91       	pop	r26
    2502:	9f 91       	pop	r25
    2504:	8f 91       	pop	r24
    2506:	7f 91       	pop	r23
    2508:	6f 91       	pop	r22
    250a:	5f 91       	pop	r21
    250c:	4f 91       	pop	r20
    250e:	3f 91       	pop	r19
    2510:	2f 91       	pop	r18
    2512:	0f 90       	pop	r0
    2514:	0b be       	out	0x3b, r0	; 59
    2516:	0f 90       	pop	r0
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	0f 90       	pop	r0
    251c:	1f 90       	pop	r1
    251e:	18 95       	reti
ISR(PCINT2_vect){
	bool R = rightBumpOn();
	bool L = leftBumpOn();
	if(R){
		//incCollisions();
		communication_log(LEVEL_INFO, "right bumper was pressed!");
    2520:	81 e6       	ldi	r24, 0x61	; 97
    2522:	93 e0       	ldi	r25, 0x03	; 3
		//write code to solve the collision problem
	}
	else if (L){
		//incCollisions();
		communication_log(LEVEL_INFO, "left bumper was pressed!");
    2524:	9f 93       	push	r25
    2526:	8f 93       	push	r24
    2528:	82 e0       	ldi	r24, 0x02	; 2
    252a:	8f 93       	push	r24
    252c:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
		//write code to solve the collision problem
	}
	if (R || L){
		Motor_stopAll();
    2536:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Motor_stopAll>
	}

}
    253a:	de cf       	rjmp	.-68     	; 0x24f8 <__vector_11+0x3a>
		communication_log(LEVEL_INFO, "right bumper was pressed!");
		//write code to solve the collision problem
	}
	else if (L){
		//incCollisions();
		communication_log(LEVEL_INFO, "left bumper was pressed!");
    253c:	8b e7       	ldi	r24, 0x7B	; 123
    253e:	93 e0       	ldi	r25, 0x03	; 3
    2540:	f1 cf       	rjmp	.-30     	; 0x2524 <__vector_11+0x66>

00002542 <__vector_9>:
}

//Encoders
int16_t dummyPulsesL = 0;
int16_t dummyPulsesR = 0;
ISR(PCINT0_vect){
    2542:	1f 92       	push	r1
    2544:	0f 92       	push	r0
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	0f 92       	push	r0
    254a:	11 24       	eor	r1, r1
    254c:	0b b6       	in	r0, 0x3b	; 59
    254e:	0f 92       	push	r0
    2550:	2f 93       	push	r18
    2552:	3f 93       	push	r19
    2554:	4f 93       	push	r20
    2556:	5f 93       	push	r21
    2558:	6f 93       	push	r22
    255a:	7f 93       	push	r23
    255c:	8f 93       	push	r24
    255e:	9f 93       	push	r25
    2560:	af 93       	push	r26
    2562:	bf 93       	push	r27
    2564:	cf 93       	push	r28
    2566:	ef 93       	push	r30
    2568:	ff 93       	push	r31
	enum direction leftDir = leftEncFigure();
    256a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <leftEncFigure>
    256e:	c8 2f       	mov	r28, r24
	enum direction rightDir = rightEncFigure();
    2570:	0e 94 be 07 	call	0xf7c	; 0xf7c <rightEncFigure>
	
	if (leftDir == FORWARD){
    2574:	c2 30       	cpi	r28, 0x02	; 2
    2576:	09 f4       	brne	.+2      	; 0x257a <__vector_9+0x38>
    2578:	4f c0       	rjmp	.+158    	; 0x2618 <__vector_9+0xd6>
			leftEncPulsed = false;
			dummyPulsesL++;
		}
	}
	
	else if (leftDir == BACKWARD){
    257a:	c1 30       	cpi	r28, 0x01	; 1
    257c:	09 f4       	brne	.+2      	; 0x2580 <__vector_9+0x3e>
    257e:	68 c0       	rjmp	.+208    	; 0x2650 <__vector_9+0x10e>
			dummyPulsesL--;
			
		}
	}
	
	if (rightDir == FORWARD){
    2580:	82 30       	cpi	r24, 0x02	; 2
    2582:	89 f1       	breq	.+98     	; 0x25e6 <__vector_9+0xa4>
			dummyPulsesR++;
			
		}
	}
	
	else if (rightDir == BACKWARD){
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	b1 f0       	breq	.+44     	; 0x25b4 <__vector_9+0x72>
	//if (leftDir == UNDEF || rightDir == UNDEF){
		////communication_log(LEVEL_INFO, "UD");
	//}
	
	
	statInit();
    2588:	0e 94 ba 07 	call	0xf74	; 0xf74 <statInit>
}
    258c:	ff 91       	pop	r31
    258e:	ef 91       	pop	r30
    2590:	cf 91       	pop	r28
    2592:	bf 91       	pop	r27
    2594:	af 91       	pop	r26
    2596:	9f 91       	pop	r25
    2598:	8f 91       	pop	r24
    259a:	7f 91       	pop	r23
    259c:	6f 91       	pop	r22
    259e:	5f 91       	pop	r21
    25a0:	4f 91       	pop	r20
    25a2:	3f 91       	pop	r19
    25a4:	2f 91       	pop	r18
    25a6:	0f 90       	pop	r0
    25a8:	0b be       	out	0x3b, r0	; 59
    25aa:	0f 90       	pop	r0
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	0f 90       	pop	r0
    25b0:	1f 90       	pop	r1
    25b2:	18 95       	reti
	}
	
	else if (rightDir == BACKWARD){
		//communication_log(LEVEL_INFO, "RB");
		//communication_log(LEVEL_INFO, "%d",rightEncPulsed);
		if (rightEncPulsed){
    25b4:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <rightEncPulsed>
    25b8:	88 23       	and	r24, r24
    25ba:	31 f3       	breq	.-52     	; 0x2588 <__vector_9+0x46>
			rightEncPulses--;
    25bc:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <rightEncPulses>
    25c0:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <rightEncPulses+0x1>
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	90 93 36 08 	sts	0x0836, r25	; 0x800836 <rightEncPulses+0x1>
    25ca:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <rightEncPulses>
			rightEncPulsed = false;
    25ce:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <rightEncPulsed>
			dummyPulsesR--;
    25d2:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <dummyPulsesR>
    25d6:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <dummyPulsesR+0x1>
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <dummyPulsesR+0x1>
    25e0:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <dummyPulsesR>
    25e4:	d1 cf       	rjmp	.-94     	; 0x2588 <__vector_9+0x46>
	}
	
	if (rightDir == FORWARD){
		//communication_log(LEVEL_INFO, "RF");
		//communication_log(LEVEL_INFO, "%d",rightEncPulsed);
		if (rightEncPulsed){
    25e6:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <rightEncPulsed>
    25ea:	88 23       	and	r24, r24
    25ec:	69 f2       	breq	.-102    	; 0x2588 <__vector_9+0x46>
			rightEncPulses++;
    25ee:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <rightEncPulses>
    25f2:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <rightEncPulses+0x1>
    25f6:	01 96       	adiw	r24, 0x01	; 1
    25f8:	90 93 36 08 	sts	0x0836, r25	; 0x800836 <rightEncPulses+0x1>
    25fc:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <rightEncPulses>
			rightEncPulsed = false;
    2600:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <rightEncPulsed>
			dummyPulsesR++;
    2604:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <dummyPulsesR>
    2608:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <dummyPulsesR+0x1>
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <dummyPulsesR+0x1>
    2612:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <dummyPulsesR>
    2616:	b8 cf       	rjmp	.-144    	; 0x2588 <__vector_9+0x46>
	enum direction leftDir = leftEncFigure();
	enum direction rightDir = rightEncFigure();
	
	if (leftDir == FORWARD){
		//communication_log(LEVEL_INFO, "LF");
		if (leftEncPulsed){
    2618:	90 91 32 08 	lds	r25, 0x0832	; 0x800832 <leftEncPulsed>
    261c:	99 23       	and	r25, r25
    261e:	09 f4       	brne	.+2      	; 0x2622 <__vector_9+0xe0>
    2620:	af cf       	rjmp	.-162    	; 0x2580 <__vector_9+0x3e>
			leftEncPulses++;
    2622:	20 91 37 08 	lds	r18, 0x0837	; 0x800837 <leftEncPulses>
    2626:	30 91 38 08 	lds	r19, 0x0838	; 0x800838 <leftEncPulses+0x1>
    262a:	2f 5f       	subi	r18, 0xFF	; 255
    262c:	3f 4f       	sbci	r19, 0xFF	; 255
    262e:	30 93 38 08 	sts	0x0838, r19	; 0x800838 <leftEncPulses+0x1>
    2632:	20 93 37 08 	sts	0x0837, r18	; 0x800837 <leftEncPulses>
			leftEncPulsed = false;
    2636:	10 92 32 08 	sts	0x0832, r1	; 0x800832 <leftEncPulsed>
			dummyPulsesL++;
    263a:	20 91 e0 03 	lds	r18, 0x03E0	; 0x8003e0 <dummyPulsesL>
    263e:	30 91 e1 03 	lds	r19, 0x03E1	; 0x8003e1 <dummyPulsesL+0x1>
    2642:	2f 5f       	subi	r18, 0xFF	; 255
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	30 93 e1 03 	sts	0x03E1, r19	; 0x8003e1 <dummyPulsesL+0x1>
    264a:	20 93 e0 03 	sts	0x03E0, r18	; 0x8003e0 <dummyPulsesL>
    264e:	98 cf       	rjmp	.-208    	; 0x2580 <__vector_9+0x3e>
	}
	
	else if (leftDir == BACKWARD){
		//communication_log(LEVEL_INFO, "LB");
		//communication_log(LEVEL_INFO, "%d",leftEncPulsed);
		if (leftEncPulsed){
    2650:	90 91 32 08 	lds	r25, 0x0832	; 0x800832 <leftEncPulsed>
    2654:	99 23       	and	r25, r25
    2656:	09 f4       	brne	.+2      	; 0x265a <__vector_9+0x118>
    2658:	93 cf       	rjmp	.-218    	; 0x2580 <__vector_9+0x3e>
			leftEncPulses--;
    265a:	20 91 37 08 	lds	r18, 0x0837	; 0x800837 <leftEncPulses>
    265e:	30 91 38 08 	lds	r19, 0x0838	; 0x800838 <leftEncPulses+0x1>
    2662:	21 50       	subi	r18, 0x01	; 1
    2664:	31 09       	sbc	r19, r1
    2666:	30 93 38 08 	sts	0x0838, r19	; 0x800838 <leftEncPulses+0x1>
    266a:	20 93 37 08 	sts	0x0837, r18	; 0x800837 <leftEncPulses>
			leftEncPulsed = false;
    266e:	10 92 32 08 	sts	0x0832, r1	; 0x800832 <leftEncPulsed>
			dummyPulsesL--;
    2672:	20 91 e0 03 	lds	r18, 0x03E0	; 0x8003e0 <dummyPulsesL>
    2676:	30 91 e1 03 	lds	r19, 0x03E1	; 0x8003e1 <dummyPulsesL+0x1>
    267a:	21 50       	subi	r18, 0x01	; 1
    267c:	31 09       	sbc	r19, r1
    267e:	30 93 e1 03 	sts	0x03E1, r19	; 0x8003e1 <dummyPulsesL+0x1>
    2682:	20 93 e0 03 	sts	0x03E0, r18	; 0x8003e0 <dummyPulsesL>
    2686:	7c cf       	rjmp	.-264    	; 0x2580 <__vector_9+0x3e>

00002688 <main>:
    // global interrupt enable
    sei();
}


int main(void) {
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	a2 97       	sbiw	r28, 0x22	; 34
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
}


// initialization
static void init(void) {
    powerSaver_init(); // must be the first call!
    269c:	8f ee       	ldi	r24, 0xEF	; 239
    269e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    26a2:	8f e3       	ldi	r24, 0x3F	; 63
    26a4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    LED_init();
    26a8:	81 b1       	in	r24, 0x01	; 1
    26aa:	80 6c       	ori	r24, 0xC0	; 192
    26ac:	81 b9       	out	0x01, r24	; 1
    uart_init();
    26ae:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <uart_init>
    communication_init();
    26b2:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <communication_init>
	
	movementstat = NOTMOVING;
    26b6:	12 e0       	ldi	r17, 0x02	; 2
    26b8:	10 93 0d 0c 	sts	0x0C0D, r17	; 0x800c0d <movementstat>
	
	communication_init();
    26bc:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <communication_init>
 * @param   channel   communication channel
 * @param   callback  function pointer to the callback function
 */
static inline void __attribute__((always_inline)) communication_setCallback(const Channel_t channel, const ChannelCallback_t callback) {
	extern ChannelCallback_t communication_ChannelReceivers[COMM_MAX_CHANNELS];
	communication_ChannelReceivers[channel] = callback;
    26c0:	80 e8       	ldi	r24, 0x80	; 128
    26c2:	91 e1       	ldi	r25, 0x11	; 17
    26c4:	90 93 ad 0d 	sts	0x0DAD, r25	; 0x800dad <communication_ChannelReceivers+0x1>
    26c8:	80 93 ac 0d 	sts	0x0DAC, r24	; 0x800dac <communication_ChannelReceivers>
    26cc:	80 e9       	ldi	r24, 0x90	; 144
    26ce:	91 e1       	ldi	r25, 0x11	; 17
    26d0:	90 93 b9 0d 	sts	0x0DB9, r25	; 0x800db9 <communication_ChannelReceivers+0xd>
    26d4:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <communication_ChannelReceivers+0xc>
    // communication_readPackets() in main loop when a packet is received from
    // HWPCS on the corresponding communication channel
	communication_setCallback(CH_IN_DEBUG, commDebug);
	communication_setCallback(CH_IN_USER_COMMAND, commUserCommand);

    Motor_init();
    26d8:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <Motor_init>
    timeTask_init();
    26dc:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <timeTask_init>
	ADC_init(false);
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <ADC_init>
	bumperInit();
    26e6:	0e 94 74 07 	call	0xee8	; 0xee8 <bumperInit>
	encoderInit();
    26ea:	0e 94 a1 07 	call	0xf42	; 0xf42 <encoderInit>
	pathFollower_init();
    26ee:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <pathFollower_init>
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	a8 e4       	ldi	r26, 0x48	; 72
    26f8:	b2 e4       	ldi	r27, 0x42	; 66
    26fa:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <pathFollower_lookaheadDistance>
    26fe:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <pathFollower_lookaheadDistance+0x1>
    2702:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <pathFollower_lookaheadDistance+0x2>
    2706:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <pathFollower_lookaheadDistance+0x3>
	pathFollower_setLookaheadDistance(50.0);
	
	mazeInit();
    270a:	0e 94 06 11 	call	0x220c	; 0x220c <mazeInit>
    270e:	8f e5       	ldi	r24, 0x5F	; 95
    2710:	91 e1       	ldi	r25, 0x11	; 17
    2712:	90 93 b7 0d 	sts	0x0DB7, r25	; 0x800db7 <communication_ChannelReceivers+0xb>
    2716:	80 93 b6 0d 	sts	0x0DB6, r24	; 0x800db6 <communication_ChannelReceivers+0xa>
	
	communication_setCallback(CH_IN_POSE, aprilFools);
    // global interrupt enable
    sei();
    271a:	78 94       	sei


int main(void) {
    init();

    communication_log_P(LEVEL_INFO, PSTR("Booted"));
    271c:	80 e7       	ldi	r24, 0x70	; 112
    271e:	92 e0       	ldi	r25, 0x02	; 2
    2720:	9f 93       	push	r25
    2722:	8f 93       	push	r24
    2724:	1f 93       	push	r17
    2726:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <communication_log_P>
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
            telemetry.infrared2 = (int16_t)getDistanceLeft();
            telemetry.infrared3 = (int16_t)getDistanceRight();
            telemetry.infrared4 = 0;
            telemetry.infrared5 = 0;
            telemetry.user1 = 20;
            telemetry.user2 = 42.42f;
    2730:	54 e1       	ldi	r21, 0x14	; 20
    2732:	25 2e       	mov	r2, r21
    2734:	5e ea       	ldi	r21, 0xAE	; 174
    2736:	35 2e       	mov	r3, r21
    2738:	59 e2       	ldi	r21, 0x29	; 41
    273a:	45 2e       	mov	r4, r21
    273c:	52 e4       	ldi	r21, 0x42	; 66
    273e:	55 2e       	mov	r5, r21
			case END:
				stat = START;
				doneHere = false;
		}
		if (stat != statDummy){
		communication_log(LEVEL_INFO, "Status changed to: %d!", stat);
    2740:	64 e9       	ldi	r22, 0x94	; 148
    2742:	66 2e       	mov	r6, r22
    2744:	63 e0       	ldi	r22, 0x03	; 3
    2746:	76 2e       	mov	r7, r22
 * @return  current uptime in milliseconds
 */
static inline uint16_t __attribute__((always_inline)) timeTask_getUptime(void) {
	extern volatile uint16_t timeTask_uptime[2];
	extern volatile uint8_t timeTask_idx;
	return timeTask_uptime[timeTask_idx];
    2748:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <timeTask_idx>
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	ee 0f       	add	r30, r30
    2750:	ff 1f       	adc	r31, r31
    2752:	e3 5d       	subi	r30, 0xD3	; 211
    2754:	fd 4f       	sbci	r31, 0xFD	; 253
    2756:	80 81       	ld	r24, Z
    2758:	91 81       	ldd	r25, Z+1	; 0x01
    // do forever
    for (;;) {

        // TODO: do some other stuff

        TIMETASK(LED_TASK, 500) { // execute block approximately every 500ms
    275a:	20 91 dc 03 	lds	r18, 0x03DC	; 0x8003dc <LED_TASK.2813>
    275e:	30 91 dd 03 	lds	r19, 0x03DD	; 0x8003dd <LED_TASK.2813+0x1>
    2762:	ac 01       	movw	r20, r24
    2764:	42 1b       	sub	r20, r18
    2766:	53 0b       	sbc	r21, r19
    2768:	9a 01       	movw	r18, r20
    276a:	24 3f       	cpi	r18, 0xF4	; 244
    276c:	31 40       	sbci	r19, 0x01	; 1
    276e:	40 f0       	brcs	.+16     	; 0x2780 <main+0xf8>
    2770:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <LED_TASK.2813+0x1>
    2774:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <LED_TASK.2813>
            LED2_TOGGLE();
    2778:	82 b1       	in	r24, 0x02	; 2
    277a:	90 e4       	ldi	r25, 0x40	; 64
    277c:	89 27       	eor	r24, r25
    277e:	82 b9       	out	0x02, r24	; 2
    2780:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <timeTask_idx>
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	ee 0f       	add	r30, r30
    2788:	ff 1f       	adc	r31, r31
    278a:	e3 5d       	subi	r30, 0xD3	; 211
    278c:	fd 4f       	sbci	r31, 0xFD	; 253
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
        }

        TIMETASK(TELEMETRY_TASK, 300) { // execute block approximately every 300ms
    2792:	20 91 da 03 	lds	r18, 0x03DA	; 0x8003da <TELEMETRY_TASK.2816>
    2796:	30 91 db 03 	lds	r19, 0x03DB	; 0x8003db <TELEMETRY_TASK.2816+0x1>
    279a:	ac 01       	movw	r20, r24
    279c:	42 1b       	sub	r20, r18
    279e:	53 0b       	sbc	r21, r19
    27a0:	9a 01       	movw	r18, r20
    27a2:	2c 32       	cpi	r18, 0x2C	; 44
    27a4:	31 40       	sbci	r19, 0x01	; 1
    27a6:	d8 f1       	brcs	.+118    	; 0x281e <main+0x196>
    27a8:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <TELEMETRY_TASK.2816+0x1>
    27ac:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <TELEMETRY_TASK.2816>
            // send telemetry data to HWPCS
            Telemetry_t telemetry;
            telemetry.bumpers.value = 0; // initialize with zero
			telemetry.bumpers.value = 0;
            telemetry.bumpers.bitset.bit1 = 1;
			telemetry.bumpers.bitset.bit0 = 1;
    27b0:	83 e0       	ldi	r24, 0x03	; 3
    27b2:	89 83       	std	Y+1, r24	; 0x01
            telemetry.contacts = getCollisions();
    27b4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <getCollisions>
    27b8:	8a 83       	std	Y+2, r24	; 0x02
            telemetry.encoder1 = leftEncPulses;
    27ba:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <leftEncPulses>
    27be:	90 91 38 08 	lds	r25, 0x0838	; 0x800838 <leftEncPulses+0x1>
    27c2:	9c 83       	std	Y+4, r25	; 0x04
    27c4:	8b 83       	std	Y+3, r24	; 0x03
            telemetry.encoder2 = rightEncPulses;
    27c6:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <rightEncPulses>
    27ca:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <rightEncPulses+0x1>
    27ce:	9e 83       	std	Y+6, r25	; 0x06
    27d0:	8d 83       	std	Y+5, r24	; 0x05
			//communication_log(LEVEL_INFO, "front %d", (int16_t)(getDistanceFront() * 1000));
			//communication_log(LEVEL_INFO, "right%f", (getDistanceRight()));
			//communication_log(LEVEL_INFO, "left%f", (getDistanceLeft()));
            telemetry.infrared1 = (int16_t)getDistanceFront();
    27d2:	0e 94 09 08 	call	0x1012	; 0x1012 <getDistanceFront>
    27d6:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    27da:	78 87       	std	Y+8, r23	; 0x08
    27dc:	6f 83       	std	Y+7, r22	; 0x07
            telemetry.infrared2 = (int16_t)getDistanceLeft();
    27de:	0e 94 20 08 	call	0x1040	; 0x1040 <getDistanceLeft>
    27e2:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    27e6:	7a 87       	std	Y+10, r23	; 0x0a
    27e8:	69 87       	std	Y+9, r22	; 0x09
            telemetry.infrared3 = (int16_t)getDistanceRight();
    27ea:	0e 94 37 08 	call	0x106e	; 0x106e <getDistanceRight>
    27ee:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    27f2:	7c 87       	std	Y+12, r23	; 0x0c
    27f4:	6b 87       	std	Y+11, r22	; 0x0b
            telemetry.infrared4 = 0;
    27f6:	1e 86       	std	Y+14, r1	; 0x0e
    27f8:	1d 86       	std	Y+13, r1	; 0x0d
            telemetry.infrared5 = 0;
    27fa:	18 8a       	std	Y+16, r1	; 0x10
    27fc:	1f 86       	std	Y+15, r1	; 0x0f
            telemetry.user1 = 20;
    27fe:	44 e1       	ldi	r20, 0x14	; 20
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	5a 8b       	std	Y+18, r21	; 0x12
    2804:	49 8b       	std	Y+17, r20	; 0x11
            telemetry.user2 = 42.42f;
    2806:	2b 8a       	std	Y+19, r2	; 0x13
    2808:	3c 8a       	std	Y+20, r3	; 0x14
    280a:	4d 8a       	std	Y+21, r4	; 0x15
    280c:	5e 8a       	std	Y+22, r5	; 0x16
            communication_writePacket(CH_OUT_TELEMETRY, (uint8_t*)&telemetry, sizeof(telemetry));
    280e:	46 e1       	ldi	r20, 0x16	; 22
    2810:	50 e0       	ldi	r21, 0x00	; 0
    2812:	be 01       	movw	r22, r28
    2814:	6f 5f       	subi	r22, 0xFF	; 255
    2816:	7f 4f       	sbci	r23, 0xFF	; 255
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <communication_writePacket>
    281e:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <timeTask_idx>
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	ee 0f       	add	r30, r30
    2826:	ff 1f       	adc	r31, r31
    2828:	e3 5d       	subi	r30, 0xD3	; 211
    282a:	fd 4f       	sbci	r31, 0xFD	; 253
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
        }

        TIMETASK(POSE_TASK, 20) { // execute block approximately every 25ms
    2830:	20 91 d8 03 	lds	r18, 0x03D8	; 0x8003d8 <POSE_TASK.2820>
    2834:	30 91 d9 03 	lds	r19, 0x03D9	; 0x8003d9 <POSE_TASK.2820+0x1>
    2838:	ac 01       	movw	r20, r24
    283a:	42 1b       	sub	r20, r18
    283c:	53 0b       	sbc	r21, r19
    283e:	44 31       	cpi	r20, 0x14	; 20
    2840:	51 05       	cpc	r21, r1
    2842:	08 f0       	brcs	.+2      	; 0x2846 <main+0x1be>
    2844:	b0 c0       	rjmp	.+352    	; 0x29a6 <main+0x31e>
    2846:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <timeTask_idx>
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	ee 0f       	add	r30, r30
    284e:	ff 1f       	adc	r31, r31
    2850:	e3 5d       	subi	r30, 0xD3	; 211
    2852:	fd 4f       	sbci	r31, 0xFD	; 253
    2854:	80 81       	ld	r24, Z
    2856:	91 81       	ldd	r25, Z+1	; 0x01
			//communication_log(LEVEL_INFO, "R %d", dummyPulsesR);
			//communication_log(LEVEL_INFO, "L %d", dummyPulsesL);
			
		}
			
		TIMETASK(FOLLOWER_TASK, 25) {
    2858:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <FOLLOWER_TASK.2830>
    285c:	30 91 d7 03 	lds	r19, 0x03D7	; 0x8003d7 <FOLLOWER_TASK.2830+0x1>
    2860:	ac 01       	movw	r20, r24
    2862:	42 1b       	sub	r20, r18
    2864:	53 0b       	sbc	r21, r19
    2866:	49 31       	cpi	r20, 0x19	; 25
    2868:	51 05       	cpc	r21, r1
    286a:	40 f0       	brcs	.+16     	; 0x287c <main+0x1f4>
    286c:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <FOLLOWER_TASK.2830+0x1>
    2870:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <FOLLOWER_TASK.2830>
			const PathFollowerStatus_t* pathFollower_status = pathFollower_getStatus();
			if (pathFollower_status->enabled) {
    2874:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <pathFollower_status>
    2878:	81 11       	cpse	r24, r1
    287a:	e0 c0       	rjmp	.+448    	; 0x2a3c <main+0x3b4>
    287c:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <timeTask_idx>
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	ee 0f       	add	r30, r30
    2884:	ff 1f       	adc	r31, r31
    2886:	e3 5d       	subi	r30, 0xD3	; 211
    2888:	fd 4f       	sbci	r31, 0xFD	; 253
    288a:	80 81       	ld	r24, Z
    288c:	91 81       	ldd	r25, Z+1	; 0x01
				communication_writePacket(0x03,(uint8_t*)pathFollower_status,sizeof(PathFollowerStatus_t));
				//sendPathFollowerStatus(); // send pathFollower_status on channel CH_OUT_PATH_FOLLOW_STATUS
			}
		}
		
		TIMETASK(APRIL_TASK, 25000){
    288e:	20 91 d4 03 	lds	r18, 0x03D4	; 0x8003d4 <APRIL_TASK.2834>
    2892:	30 91 d5 03 	lds	r19, 0x03D5	; 0x8003d5 <APRIL_TASK.2834+0x1>
    2896:	ac 01       	movw	r20, r24
    2898:	42 1b       	sub	r20, r18
    289a:	53 0b       	sbc	r21, r19
    289c:	9a 01       	movw	r18, r20
    289e:	28 3a       	cpi	r18, 0xA8	; 168
    28a0:	31 46       	sbci	r19, 0x61	; 97
    28a2:	68 f0       	brcs	.+26     	; 0x28be <main+0x236>
    28a4:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <APRIL_TASK.2834+0x1>
    28a8:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <APRIL_TASK.2834>
			AprilTagType_t aprilRequest = APRIL_TAG_MAIN;
    28ac:	19 82       	std	Y+1, r1	; 0x01
			communication_writePacket(CH_IN_POSE, &aprilRequest, sizeof(aprilRequest));
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	be 01       	movw	r22, r28
    28b4:	6f 5f       	subi	r22, 0xFF	; 255
    28b6:	7f 4f       	sbci	r23, 0xFF	; 255
    28b8:	85 e0       	ldi	r24, 0x05	; 5
    28ba:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <communication_writePacket>
		
				

        // poll receive buffer (read and parse all available packets from UART buffer)
        // and execute registered callback functions
        communication_readPackets();
    28be:	0e 94 95 18 	call	0x312a	; 0x312a <communication_readPackets>
		
		//The code for OS comes here
		switch(stat){
    28c2:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <stat>
    28c6:	48 2f       	mov	r20, r24
    28c8:	50 e0       	ldi	r21, 0x00	; 0
    28ca:	47 30       	cpi	r20, 0x07	; 7
    28cc:	51 05       	cpc	r21, r1
    28ce:	88 f4       	brcc	.+34     	; 0x28f2 <main+0x26a>
    28d0:	fa 01       	movw	r30, r20
    28d2:	e5 58       	subi	r30, 0x85	; 133
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	0c 94 c9 29 	jmp	0x5392	; 0x5392 <__tablejump2__>
				break;
			case INWAY:
				inWayOpt(&pose, &doneHere, &stat, &coord);
				break;
			case INPLACE:
				inPlaceOpt(&pose, &doneHere, &stat, &coord);
    28da:	2b e1       	ldi	r18, 0x1B	; 27
    28dc:	32 e0       	ldi	r19, 0x02	; 2
    28de:	43 ee       	ldi	r20, 0xE3	; 227
    28e0:	53 e0       	ldi	r21, 0x03	; 3
    28e2:	62 ee       	ldi	r22, 0xE2	; 226
    28e4:	73 e0       	ldi	r23, 0x03	; 3
    28e6:	80 e2       	ldi	r24, 0x20	; 32
    28e8:	92 e0       	ldi	r25, 0x02	; 2
    28ea:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <inPlaceOpt>
    28ee:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <stat>
				break;
			case END:
				stat = START;
				doneHere = false;
		}
		if (stat != statDummy){
    28f2:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <statDummy>
    28f6:	98 17       	cp	r25, r24
    28f8:	09 f4       	brne	.+2      	; 0x28fc <main+0x274>
    28fa:	26 cf       	rjmp	.-436    	; 0x2748 <main+0xc0>
		communication_log(LEVEL_INFO, "Status changed to: %d!", stat);
    28fc:	1f 92       	push	r1
    28fe:	8f 93       	push	r24
    2900:	7f 92       	push	r7
    2902:	6f 92       	push	r6
    2904:	82 e0       	ldi	r24, 0x02	; 2
    2906:	8f 93       	push	r24
    2908:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>
		statDummy = stat;
    290c:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <stat>
    2910:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <statDummy>
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	14 cf       	rjmp	.-472    	; 0x2748 <main+0xc0>
				break;
			case CORE:
				coreOpt(&pose, &doneHere, &stat, &coord);
				break;
			case INWAY:
				inWayOpt(&pose, &doneHere, &stat, &coord);
    2920:	2b e1       	ldi	r18, 0x1B	; 27
    2922:	32 e0       	ldi	r19, 0x02	; 2
    2924:	43 ee       	ldi	r20, 0xE3	; 227
    2926:	53 e0       	ldi	r21, 0x03	; 3
    2928:	62 ee       	ldi	r22, 0xE2	; 226
    292a:	73 e0       	ldi	r23, 0x03	; 3
    292c:	80 e2       	ldi	r24, 0x20	; 32
    292e:	92 e0       	ldi	r25, 0x02	; 2
    2930:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <inWayOpt>
    2934:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <stat>
				break;
    2938:	dc cf       	rjmp	.-72     	; 0x28f2 <main+0x26a>
			case INPLACE:
				inPlaceOpt(&pose, &doneHere, &stat, &coord);
				break;
			case MOVE:
				moveOpt(&pose, &doneHere, &stat, &coord);
    293a:	2b e1       	ldi	r18, 0x1B	; 27
    293c:	32 e0       	ldi	r19, 0x02	; 2
    293e:	43 ee       	ldi	r20, 0xE3	; 227
    2940:	53 e0       	ldi	r21, 0x03	; 3
    2942:	62 ee       	ldi	r22, 0xE2	; 226
    2944:	73 e0       	ldi	r23, 0x03	; 3
    2946:	80 e2       	ldi	r24, 0x20	; 32
    2948:	92 e0       	ldi	r25, 0x02	; 2
    294a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <moveOpt>
    294e:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <stat>
				break;
    2952:	cf cf       	rjmp	.-98     	; 0x28f2 <main+0x26a>
			case TURN:
				turnOpt(&pose, &doneHere, &stat);
    2954:	43 ee       	ldi	r20, 0xE3	; 227
    2956:	53 e0       	ldi	r21, 0x03	; 3
    2958:	62 ee       	ldi	r22, 0xE2	; 226
    295a:	73 e0       	ldi	r23, 0x03	; 3
    295c:	80 e2       	ldi	r24, 0x20	; 32
    295e:	92 e0       	ldi	r25, 0x02	; 2
    2960:	0e 94 60 10 	call	0x20c0	; 0x20c0 <turnOpt>
    2964:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <stat>
				break;
    2968:	c4 cf       	rjmp	.-120    	; 0x28f2 <main+0x26a>
			case END:
				stat = START;
    296a:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <stat>
				doneHere = false;
    296e:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <doneHere>
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	be cf       	rjmp	.-132    	; 0x28f2 <main+0x26a>
		switch(stat){
			case START:
				startOpt(&pose, &doneHere, &stat);
				break;
			case CORE:
				coreOpt(&pose, &doneHere, &stat, &coord);
    2976:	2b e1       	ldi	r18, 0x1B	; 27
    2978:	32 e0       	ldi	r19, 0x02	; 2
    297a:	43 ee       	ldi	r20, 0xE3	; 227
    297c:	53 e0       	ldi	r21, 0x03	; 3
    297e:	62 ee       	ldi	r22, 0xE2	; 226
    2980:	73 e0       	ldi	r23, 0x03	; 3
    2982:	80 e2       	ldi	r24, 0x20	; 32
    2984:	92 e0       	ldi	r25, 0x02	; 2
    2986:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <coreOpt>
    298a:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <stat>
				break;
    298e:	b1 cf       	rjmp	.-158    	; 0x28f2 <main+0x26a>
        communication_readPackets();
		
		//The code for OS comes here
		switch(stat){
			case START:
				startOpt(&pose, &doneHere, &stat);
    2990:	43 ee       	ldi	r20, 0xE3	; 227
    2992:	53 e0       	ldi	r21, 0x03	; 3
    2994:	62 ee       	ldi	r22, 0xE2	; 226
    2996:	73 e0       	ldi	r23, 0x03	; 3
    2998:	80 e2       	ldi	r24, 0x20	; 32
    299a:	92 e0       	ldi	r25, 0x02	; 2
    299c:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <startOpt>
    29a0:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <stat>
				break;
    29a4:	a6 cf       	rjmp	.-180    	; 0x28f2 <main+0x26a>
            telemetry.user1 = 20;
            telemetry.user2 = 42.42f;
            communication_writePacket(CH_OUT_TELEMETRY, (uint8_t*)&telemetry, sizeof(telemetry));
        }

        TIMETASK(POSE_TASK, 20) { // execute block approximately every 25ms
    29a6:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <POSE_TASK.2820+0x1>
    29aa:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <POSE_TASK.2820>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    29ae:	f8 94       	cli
			int16_t pulsesRight;
			int16_t pulsesLeft;
			
			ATOMIC_BLOCK(ATOMIC_FORCEON){
				pulsesRight = rightEncPulses;
    29b0:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <rightEncPulses>
    29b4:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <rightEncPulses+0x1>
				pulsesLeft = leftEncPulses;
    29b8:	a0 90 37 08 	lds	r10, 0x0837	; 0x800837 <leftEncPulses>
    29bc:	b0 90 38 08 	lds	r11, 0x0838	; 0x800838 <leftEncPulses+0x1>
				rightEncPulses = 0;
    29c0:	10 92 36 08 	sts	0x0836, r1	; 0x800836 <rightEncPulses+0x1>
    29c4:	10 92 35 08 	sts	0x0835, r1	; 0x800835 <rightEncPulses>
				leftEncPulses = 0;
    29c8:	10 92 38 08 	sts	0x0838, r1	; 0x800838 <leftEncPulses+0x1>
    29cc:	10 92 37 08 	sts	0x0837, r1	; 0x800837 <leftEncPulses>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    29d0:	78 94       	sei
			}
			
			
			if (pulsesLeft == (-pulsesRight)){
    29d2:	91 95       	neg	r25
    29d4:	81 95       	neg	r24
    29d6:	91 09       	sbc	r25, r1
				pose = getNewPoseForwarding(pose, pulsesLeft, (-pulsesRight));
    29d8:	4c 01       	movw	r8, r24
				rightEncPulses = 0;
				leftEncPulses = 0;
			}
			
			
			if (pulsesLeft == (-pulsesRight)){
    29da:	8a 15       	cp	r24, r10
    29dc:	9b 05       	cpc	r25, r11
    29de:	09 f4       	brne	.+2      	; 0x29e2 <main+0x35a>
    29e0:	45 c0       	rjmp	.+138    	; 0x2a6c <main+0x3e4>
				pose = getNewPoseForwarding(pose, pulsesLeft, (-pulsesRight));
			}
			else {
				pose = getNewPoseNotForwarding(pose, pulsesLeft, (-pulsesRight));
    29e2:	c0 90 20 02 	lds	r12, 0x0220	; 0x800220 <pose>
    29e6:	d0 90 21 02 	lds	r13, 0x0221	; 0x800221 <pose+0x1>
    29ea:	e0 90 22 02 	lds	r14, 0x0222	; 0x800222 <pose+0x2>
    29ee:	f0 90 23 02 	lds	r15, 0x0223	; 0x800223 <pose+0x3>
    29f2:	00 91 24 02 	lds	r16, 0x0224	; 0x800224 <pose+0x4>
    29f6:	10 91 25 02 	lds	r17, 0x0225	; 0x800225 <pose+0x5>
    29fa:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <pose+0x6>
    29fe:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <pose+0x7>
    2a02:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <pose+0x8>
    2a06:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <pose+0x9>
    2a0a:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <pose+0xa>
    2a0e:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <pose+0xb>
    2a12:	ce 01       	movw	r24, r28
    2a14:	47 96       	adiw	r24, 0x17	; 23
    2a16:	0e 94 70 06 	call	0xce0	; 0xce0 <getNewPoseNotForwarding>
    2a1a:	8c e0       	ldi	r24, 0x0C	; 12
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	77 96       	adiw	r30, 0x17	; 23
    2a20:	a0 e2       	ldi	r26, 0x20	; 32
    2a22:	b2 e0       	ldi	r27, 0x02	; 2
    2a24:	01 90       	ld	r0, Z+
    2a26:	0d 92       	st	X+, r0
    2a28:	8a 95       	dec	r24
    2a2a:	e1 f7       	brne	.-8      	; 0x2a24 <main+0x39c>
			}
			communication_writePacket(CH_OUT_POSE, (uint8_t*)&pose, sizeof(pose));
    2a2c:	4c e0       	ldi	r20, 0x0C	; 12
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	60 e2       	ldi	r22, 0x20	; 32
    2a32:	72 e0       	ldi	r23, 0x02	; 2
    2a34:	82 e0       	ldi	r24, 0x02	; 2
    2a36:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <communication_writePacket>
    2a3a:	05 cf       	rjmp	.-502    	; 0x2846 <main+0x1be>
		}
			
		TIMETASK(FOLLOWER_TASK, 25) {
			const PathFollowerStatus_t* pathFollower_status = pathFollower_getStatus();
			if (pathFollower_status->enabled) {
				if (pathFollower_update(&pose)){
    2a3c:	80 e2       	ldi	r24, 0x20	; 32
    2a3e:	92 e0       	ldi	r25, 0x02	; 2
    2a40:	0e 94 4f 1a 	call	0x349e	; 0x349e <pathFollower_update>
    2a44:	88 23       	and	r24, r24
    2a46:	a9 f1       	breq	.+106    	; 0x2ab2 <main+0x42a>
					if (!inMaze){
    2a48:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <inMaze>
						calculateDriveCommand(&pose, &(pathFollower_status->lookahead));
    2a4c:	69 e2       	ldi	r22, 0x29	; 41
    2a4e:	78 e0       	ldi	r23, 0x08	; 8
			
		TIMETASK(FOLLOWER_TASK, 25) {
			const PathFollowerStatus_t* pathFollower_status = pathFollower_getStatus();
			if (pathFollower_status->enabled) {
				if (pathFollower_update(&pose)){
					if (!inMaze){
    2a50:	81 11       	cpse	r24, r1
    2a52:	2a c0       	rjmp	.+84     	; 0x2aa8 <main+0x420>
						calculateDriveCommand(&pose, &(pathFollower_status->lookahead));
    2a54:	80 e2       	ldi	r24, 0x20	; 32
    2a56:	92 e0       	ldi	r25, 0x02	; 2
    2a58:	0e 94 bc 02 	call	0x578	; 0x578 <calculateDriveCommand>
				else{
					MVelocityL = 0;
					MVelocityR = 0;
					Motor_stopAll();
				}
				communication_writePacket(0x03,(uint8_t*)pathFollower_status,sizeof(PathFollowerStatus_t));
    2a5c:	41 e1       	ldi	r20, 0x11	; 17
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	60 e2       	ldi	r22, 0x20	; 32
    2a62:	78 e0       	ldi	r23, 0x08	; 8
    2a64:	83 e0       	ldi	r24, 0x03	; 3
    2a66:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <communication_writePacket>
    2a6a:	08 cf       	rjmp	.-496    	; 0x287c <main+0x1f4>
				leftEncPulses = 0;
			}
			
			
			if (pulsesLeft == (-pulsesRight)){
				pose = getNewPoseForwarding(pose, pulsesLeft, (-pulsesRight));
    2a6c:	5c 01       	movw	r10, r24
    2a6e:	c0 90 20 02 	lds	r12, 0x0220	; 0x800220 <pose>
    2a72:	d0 90 21 02 	lds	r13, 0x0221	; 0x800221 <pose+0x1>
    2a76:	e0 90 22 02 	lds	r14, 0x0222	; 0x800222 <pose+0x2>
    2a7a:	f0 90 23 02 	lds	r15, 0x0223	; 0x800223 <pose+0x3>
    2a7e:	00 91 24 02 	lds	r16, 0x0224	; 0x800224 <pose+0x4>
    2a82:	10 91 25 02 	lds	r17, 0x0225	; 0x800225 <pose+0x5>
    2a86:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <pose+0x6>
    2a8a:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <pose+0x7>
    2a8e:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <pose+0x8>
    2a92:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <pose+0x9>
    2a96:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <pose+0xa>
    2a9a:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <pose+0xb>
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	47 96       	adiw	r24, 0x17	; 23
    2aa2:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <getNewPoseForwarding>
    2aa6:	b9 cf       	rjmp	.-142    	; 0x2a1a <main+0x392>
				if (pathFollower_update(&pose)){
					if (!inMaze){
						calculateDriveCommand(&pose, &(pathFollower_status->lookahead));
					}
					else{
						mazeRunner(&pose, &(pathFollower_status->lookahead));
    2aa8:	80 e2       	ldi	r24, 0x20	; 32
    2aaa:	92 e0       	ldi	r25, 0x02	; 2
    2aac:	0e 94 17 04 	call	0x82e	; 0x82e <mazeRunner>
    2ab0:	d5 cf       	rjmp	.-86     	; 0x2a5c <main+0x3d4>
					}
				}
				else{
					MVelocityL = 0;
    2ab2:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <__data_end+0x1>
    2ab6:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <__data_end>
					MVelocityR = 0;
    2aba:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <MVelocityR+0x1>
    2abe:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <MVelocityR>
					Motor_stopAll();
    2ac2:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Motor_stopAll>
    2ac6:	ca cf       	rjmp	.-108    	; 0x2a5c <main+0x3d4>

00002ac8 <__vector_default>:
 * an interrupt fires which has no ISR explicitly defined in the code.
 *
 * This implementation just enters an infinite loop and toggles both LEDs
 * alternately with a delay of 100ms in order to give the user a feedback.
 */
ISR(BADISR_vect) {
    2ac8:	1f 92       	push	r1
    2aca:	0f 92       	push	r0
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	0f 92       	push	r0
    2ad0:	11 24       	eor	r1, r1
	LED1_ON();
    2ad2:	17 9a       	sbi	0x02, 7	; 2
	LED2_OFF();
    2ad4:	16 98       	cbi	0x02, 6	; 2

	for (;;) {
		_delay_ms(100);
		LED1_TOGGLE();
		LED2_TOGGLE();
    2ad6:	90 e4       	ldi	r25, 0x40	; 64
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ad8:	2f ef       	ldi	r18, 0xFF	; 255
    2ada:	30 e7       	ldi	r19, 0x70	; 112
    2adc:	82 e0       	ldi	r24, 0x02	; 2
    2ade:	21 50       	subi	r18, 0x01	; 1
    2ae0:	30 40       	sbci	r19, 0x00	; 0
    2ae2:	80 40       	sbci	r24, 0x00	; 0
    2ae4:	e1 f7       	brne	.-8      	; 0x2ade <__vector_default+0x16>
    2ae6:	00 c0       	rjmp	.+0      	; 0x2ae8 <__vector_default+0x20>
    2ae8:	00 00       	nop
	LED1_ON();
	LED2_OFF();

	for (;;) {
		_delay_ms(100);
		LED1_TOGGLE();
    2aea:	82 b1       	in	r24, 0x02	; 2
    2aec:	80 58       	subi	r24, 0x80	; 128
    2aee:	82 b9       	out	0x02, r24	; 2
		LED2_TOGGLE();
    2af0:	82 b1       	in	r24, 0x02	; 2
    2af2:	89 27       	eor	r24, r25
    2af4:	82 b9       	out	0x02, r24	; 2
    2af6:	f0 cf       	rjmp	.-32     	; 0x2ad8 <__vector_default+0x10>

00002af8 <timeTask_init>:


// initialize timer 5 to fire interrupt every millisecond at an 8MHz clock
void timeTask_init(void) {
    // prevent multiple initializations
    if (! timeTask_initialized) {
    2af8:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <timeTask_initialized>
    2afc:	81 11       	cpse	r24, r1
    2afe:	1e c0       	rjmp	.+60     	; 0x2b3c <timeTask_init+0x44>
        timeTask_initialized = true;
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <timeTask_initialized>

        // disable power reduction of timer 5
        PRR1 &= ~_BV(PRTIM5);
    2b06:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    2b0a:	8f 7d       	andi	r24, 0xDF	; 223
    2b0c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

        TCCR5B = 0x00;  // stop timer 5 by selecting no clock
    2b10:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x7e0121>

        // set counter value to zero
        TCNT5 = 0;
    2b14:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7e0125>
    2b18:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7e0124>

        // set timer 5 to CTC mode (clear timer on compare match with OCR5A)
        // use prescaler of 8 => timer frequency of 1MHz
        // TOP = max value of counter is defined by OCR5A
        // set OCR5A to 1000 = 0x03E8, produces a compare match interrupt frequency of 1kHz = 1ms
        OCR5A = 0x03E8;
    2b1c:	88 ee       	ldi	r24, 0xE8	; 232
    2b1e:	93 e0       	ldi	r25, 0x03	; 3
    2b20:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7e0129>
    2b24:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7e0128>
        TCCR5C = 0x00; // no force output compare
    2b28:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__TEXT_REGION_LENGTH__+0x7e0122>
        TCCR5A = 0x00; // WGM51=0, WGM50=0, COM5A0/1=0, COM5B0/1=0, COM5C0/1=0 (no compare output mode)
    2b2c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x7e0120>
        TIMSK5 = _BV(OCIE5A); // timer 5 output compare A match interrupt enable
    2b30:	82 e0       	ldi	r24, 0x02	; 2
    2b32:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TCCR5B = _BV(WGM52) | _BV(CS51); // CTC mode (TOP=OCR5A), Clock Select 1 => Prescaler 8, Timer frequency: 1MHz, start timer
    2b36:	8a e0       	ldi	r24, 0x0A	; 10
    2b38:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x7e0121>
    2b3c:	08 95       	ret

00002b3e <Motor_init>:
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
    2b3e:	cf 93       	push	r28
    2b40:	df 93       	push	r29
    2b42:	e5 e6       	ldi	r30, 0x65	; 101
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	87 7e       	andi	r24, 0xE7	; 231
    2b4a:	80 83       	st	Z, r24
    2b4c:	a1 e9       	ldi	r26, 0x91	; 145
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	1c 92       	st	X, r1
    2b52:	e1 ea       	ldi	r30, 0xA1	; 161
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	10 82       	st	Z, r1
    2b58:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    2b5c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    2b60:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
    2b64:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
    2b68:	82 ef       	ldi	r24, 0xF2	; 242
    2b6a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2b6e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    2b72:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
    2b76:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    2b7a:	8f ef       	ldi	r24, 0xFF	; 255
    2b7c:	9f e1       	ldi	r25, 0x1F	; 31
    2b7e:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
    2b82:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
    2b86:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    2b8a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    2b8e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    2b92:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    2b96:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    2b9a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    2b9e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    2ba2:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    2ba6:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    2baa:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    2bae:	8d b1       	in	r24, 0x0d	; 13
    2bb0:	88 61       	ori	r24, 0x18	; 24
    2bb2:	8d b9       	out	0x0d, r24	; 13
    2bb4:	c1 e0       	ldi	r28, 0x01	; 1
    2bb6:	d1 e0       	ldi	r29, 0x01	; 1
    2bb8:	88 81       	ld	r24, Y
    2bba:	88 61       	ori	r24, 0x18	; 24
    2bbc:	88 83       	st	Y, r24
    2bbe:	9f b7       	in	r25, 0x3f	; 63
    2bc0:	f8 94       	cli
    2bc2:	81 e8       	ldi	r24, 0x81	; 129
    2bc4:	83 bd       	out	0x23, r24	; 35
    2bc6:	81 e1       	ldi	r24, 0x11	; 17
    2bc8:	8c 93       	st	X, r24
    2bca:	80 83       	st	Z, r24
    2bcc:	13 bc       	out	0x23, r1	; 35
    2bce:	9f bf       	out	0x3f, r25	; 63
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	08 95       	ret

00002bd6 <Motor_setVelocities>:
    2bd6:	97 fd       	sbrc	r25, 7
    2bd8:	18 c0       	rjmp	.+48     	; 0x2c0a <L_velAneg102>
    2bda:	9f 71       	andi	r25, 0x1F	; 31
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    2be4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    2be8:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    2bec:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    2bf0:	77 fd       	sbrc	r23, 7
    2bf2:	1b c0       	rjmp	.+54     	; 0x2c2a <L_velBneg102>

00002bf4 <L_velBpos102>:
    2bf4:	7f 71       	andi	r23, 0x1F	; 31
    2bf6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    2bfa:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    2bfe:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    2c02:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	08 95       	ret

00002c0a <L_velAneg102>:
    2c0a:	91 95       	neg	r25
    2c0c:	81 95       	neg	r24
    2c0e:	91 09       	sbc	r25, r1
    2c10:	9f 71       	andi	r25, 0x1F	; 31
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    2c1a:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    2c1e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    2c22:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    2c26:	77 ff       	sbrs	r23, 7
    2c28:	e5 cf       	rjmp	.-54     	; 0x2bf4 <L_velBpos102>

00002c2a <L_velBneg102>:
    2c2a:	71 95       	neg	r23
    2c2c:	61 95       	neg	r22
    2c2e:	71 09       	sbc	r23, r1
    2c30:	7f 71       	andi	r23, 0x1F	; 31
    2c32:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    2c36:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    2c3a:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    2c3e:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	08 95       	ret

00002c46 <Motor_stopAll>:
        OCR4B = 0x1FFF;
    }
}

void Motor_stopAll(void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2c46:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c48:	f8 94       	cli
        OCR3A = 0x1FFF;
    2c4a:	8f ef       	ldi	r24, 0xFF	; 255
    2c4c:	9f e1       	ldi	r25, 0x1F	; 31
    2c4e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    2c52:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
        OCR3B = 0x1FFF;
    2c56:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    2c5a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
        OCR4A = 0x1FFF;
    2c5e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    2c62:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
        OCR4B = 0x1FFF;
    2c66:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    2c6a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c6e:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2c70:	08 95       	ret

00002c72 <uart_write1>:
    uart_readMacro(1)
    uart_availableMacro(1)
    uart_TXBufSpaceAvailableMacro(1)
    uart_getTXBufSpaceMacro(1)
    uart_waitRXAvailableMacro(1)
    uart_isRXBufOverflowMacro(1)
    2c72:	20 91 e9 03 	lds	r18, 0x03E9	; 0x8003e9 <uart1+0x2>
    2c76:	2f 5f       	subi	r18, 0xFF	; 255
    2c78:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <uart1+0x3>
    2c7c:	29 17       	cp	r18, r25
    2c7e:	e1 f3       	breq	.-8      	; 0x2c78 <uart_write1+0x6>
    2c80:	e2 2f       	mov	r30, r18
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	e2 57       	subi	r30, 0x72	; 114
    2c86:	f3 4f       	sbci	r31, 0xF3	; 243
    2c88:	80 83       	st	Z, r24
    2c8a:	20 93 e9 03 	sts	0x03E9, r18	; 0x8003e9 <uart1+0x2>
    2c8e:	88 eb       	ldi	r24, 0xB8	; 184
    2c90:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    2c94:	08 95       	ret

00002c96 <uart_read1>:
    2c96:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <uart1>
    2c9a:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <uart1+0x1>
    2c9e:	98 17       	cp	r25, r24
    2ca0:	d1 f3       	breq	.-12     	; 0x2c96 <uart_read1>
    2ca2:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <uart1+0x1>
    2ca6:	9f 5f       	subi	r25, 0xFF	; 255
    2ca8:	9f 77       	andi	r25, 0x7F	; 127
    2caa:	e9 2f       	mov	r30, r25
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	e2 5f       	subi	r30, 0xF2	; 242
    2cb0:	f3 4f       	sbci	r31, 0xF3	; 243
    2cb2:	80 81       	ld	r24, Z
    2cb4:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <uart1+0x1>
    2cb8:	08 95       	ret

00002cba <uart_available1>:
    2cba:	20 91 e7 03 	lds	r18, 0x03E7	; 0x8003e7 <uart1>
    2cbe:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <uart1+0x1>
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	29 13       	cpse	r18, r25
    2cc6:	08 95       	ret
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	08 95       	ret

00002ccc <uart_init>:
    uart_initMacro(0)
#endif

#ifdef USE_UART1
    // disable power reduction of USART1
    PRR1 &= ~_BV(PRUSART1);
    2ccc:	e5 e6       	ldi	r30, 0x65	; 101
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	8e 7f       	andi	r24, 0xFE	; 254
    2cd4:	80 83       	st	Z, r24
    uart_initMacro(1)
    2cd6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    2cda:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    2cde:	80 e4       	ldi	r24, 0x40	; 64
    2ce0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    2ce4:	88 e9       	ldi	r24, 0x98	; 152
    2ce6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    2cea:	86 e0       	ldi	r24, 0x06	; 6
    2cec:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    2cf0:	08 95       	ret

00002cf2 <ADC_init>:
        MCUCR = mcucr;
    }
}


void ADC_init(const bool disableJTAG) {
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    if (disableJTAG)
    2cf6:	88 23       	and	r24, r24
    2cf8:	39 f0       	breq	.+14     	; 0x2d08 <ADC_init+0x16>
bool ADC_enabled = false;


static inline void disable_JTAG(void) {
    // atomically disable the JTAG interface
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2cfa:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cfc:	f8 94       	cli
        // read MCUCR and set bit for disabling JTAG
        uint8_t mcucr = MCUCR | _BV(JTD);
    2cfe:	85 b7       	in	r24, 0x35	; 53
    2d00:	80 68       	ori	r24, 0x80	; 128

        // New value for MCUCR must be written twice within four clock cycles
        // in order to have JTAG disabled
        MCUCR = mcucr;
    2d02:	85 bf       	out	0x35, r24	; 53
        MCUCR = mcucr;
    2d04:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d06:	9f bf       	out	0x3f, r25	; 63
void ADC_init(const bool disableJTAG) {
    if (disableJTAG)
        disable_JTAG();

    // disable power reduction of ADC
    PRR0 &= ~_BV(PRADC);
    2d08:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    2d0c:	8e 7f       	andi	r24, 0xFE	; 254
    2d0e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

    // disable ADC for now
    ADCSRA = 0x00;
    2d12:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    // switch off analog comparator
    ACSR |= _BV(ACD);
    2d16:	80 b7       	in	r24, 0x30	; 48
    2d18:	80 68       	ori	r24, 0x80	; 128
    2d1a:	80 bf       	out	0x30, r24	; 48
    #if (ADC_FILTER_SIZE & (ADC_FILTER_SIZE - 1))
        #error ADC_FILTER_SIZE is not a power of 2
    #endif

    // initialize data structure
    memset((void*)(channels), 0, sizeof(channels));
    2d1c:	8e e1       	ldi	r24, 0x1E	; 30
    2d1e:	ee e8       	ldi	r30, 0x8E	; 142
    2d20:	fd e0       	ldi	r31, 0x0D	; 13
    2d22:	df 01       	movw	r26, r30
    2d24:	1d 92       	st	X+, r1
    2d26:	8a 95       	dec	r24
    2d28:	e9 f7       	brne	.-6      	; 0x2d24 <ADC_init+0x32>

    // set mapping between virtual and physical ADC channels in data structure
    ADC_CHANNEL_INIT
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	80 93 9b 0d 	sts	0x0D9B, r24	; 0x800d9b <channels+0xd>
    2d30:	82 e0       	ldi	r24, 0x02	; 2
    2d32:	80 93 a5 0d 	sts	0x0DA5, r24	; 0x800da5 <channels+0x17>
    2d36:	ac ea       	ldi	r26, 0xAC	; 172
    2d38:	bd e0       	ldi	r27, 0x0D	; 13
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    // Configure channels[i].admux and channels[i].adcsrb for all channels.
    // Also disable digital input buffers for used ADC channels in order to save
    // some power, especially if analog voltage is close to Vcc/2
    uint8_t
        didr0 = 0,
        didr2 = 0;
    2d3c:	30 e0       	ldi	r19, 0x00	; 0

    // Configure channels[i].admux and channels[i].adcsrb for all channels.
    // Also disable digital input buffers for used ADC channels in order to save
    // some power, especially if analog voltage is close to Vcc/2
    uint8_t
        didr0 = 0,
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
        if (physicalChannel & 0x08) {
            didr2 |= _BV(physicalChannelAND0x07);
            // if channel > 7 MUX5 (ADCSRB bit 3) has to be set, otherwise cleared
            channels[i].adcsrb = _BV(MUX5);
        } else {
            didr0 |= _BV(physicalChannelAND0x07);
    2d40:	61 e0       	ldi	r22, 0x01	; 1
    2d42:	70 e0       	ldi	r23, 0x00	; 0
        channels[i].admux = _BV(REFS0) | physicalChannelAND0x07;

        if (physicalChannel & 0x08) {
            didr2 |= _BV(physicalChannelAND0x07);
            // if channel > 7 MUX5 (ADCSRB bit 3) has to be set, otherwise cleared
            channels[i].adcsrb = _BV(MUX5);
    2d44:	58 e0       	ldi	r21, 0x08	; 8
        didr0 = 0,
        didr2 = 0;
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; ++i) {
        register uint8_t
            physicalChannel = channels[i].channel,
            physicalChannelAND0x07 = physicalChannel & 0x07;
    2d46:	98 2f       	mov	r25, r24
    2d48:	97 70       	andi	r25, 0x07	; 7

        // voltage reference for ADC is AVCC pin (connected to 3.3V)
        channels[i].admux = _BV(REFS0) | physicalChannelAND0x07;
    2d4a:	29 2f       	mov	r18, r25
    2d4c:	20 64       	ori	r18, 0x40	; 64
    2d4e:	21 83       	std	Z+1, r18	; 0x01

        if (physicalChannel & 0x08) {
            didr2 |= _BV(physicalChannelAND0x07);
    2d50:	eb 01       	movw	r28, r22
    2d52:	02 c0       	rjmp	.+4      	; 0x2d58 <ADC_init+0x66>
    2d54:	cc 0f       	add	r28, r28
    2d56:	dd 1f       	adc	r29, r29
    2d58:	9a 95       	dec	r25
    2d5a:	e2 f7       	brpl	.-8      	; 0x2d54 <ADC_init+0x62>
            physicalChannelAND0x07 = physicalChannel & 0x07;

        // voltage reference for ADC is AVCC pin (connected to 3.3V)
        channels[i].admux = _BV(REFS0) | physicalChannelAND0x07;

        if (physicalChannel & 0x08) {
    2d5c:	83 ff       	sbrs	r24, 3
    2d5e:	08 c0       	rjmp	.+16     	; 0x2d70 <ADC_init+0x7e>
            didr2 |= _BV(physicalChannelAND0x07);
    2d60:	3c 2b       	or	r19, r28
            // if channel > 7 MUX5 (ADCSRB bit 3) has to be set, otherwise cleared
            channels[i].adcsrb = _BV(MUX5);
    2d62:	52 83       	std	Z+2, r21	; 0x02
    2d64:	3a 96       	adiw	r30, 0x0a	; 10
    // Also disable digital input buffers for used ADC channels in order to save
    // some power, especially if analog voltage is close to Vcc/2
    uint8_t
        didr0 = 0,
        didr2 = 0;
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; ++i) {
    2d66:	ae 17       	cp	r26, r30
    2d68:	bf 07       	cpc	r27, r31
    2d6a:	39 f0       	breq	.+14     	; 0x2d7a <ADC_init+0x88>
    2d6c:	83 81       	ldd	r24, Z+3	; 0x03
    2d6e:	eb cf       	rjmp	.-42     	; 0x2d46 <ADC_init+0x54>
        if (physicalChannel & 0x08) {
            didr2 |= _BV(physicalChannelAND0x07);
            // if channel > 7 MUX5 (ADCSRB bit 3) has to be set, otherwise cleared
            channels[i].adcsrb = _BV(MUX5);
        } else {
            didr0 |= _BV(physicalChannelAND0x07);
    2d70:	4c 2b       	or	r20, r28
    2d72:	3a 96       	adiw	r30, 0x0a	; 10
    // Also disable digital input buffers for used ADC channels in order to save
    // some power, especially if analog voltage is close to Vcc/2
    uint8_t
        didr0 = 0,
        didr2 = 0;
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; ++i) {
    2d74:	ae 17       	cp	r26, r30
    2d76:	bf 07       	cpc	r27, r31
    2d78:	c9 f7       	brne	.-14     	; 0x2d6c <ADC_init+0x7a>
        } else {
            didr0 |= _BV(physicalChannelAND0x07);
            // note: channels[i].adcsrb = 0 per initialization
        }
    }
    DIDR0 = didr0;
    2d7a:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    DIDR2 = didr2;
    2d7e:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>

    // configure ADC to sample the first channel
    ADMUX = channels[0].admux;
    2d82:	80 91 8f 0d 	lds	r24, 0x0D8F	; 0x800d8f <channels+0x1>
    2d86:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRB = channels[0].adcsrb;
    2d8a:	80 91 90 0d 	lds	r24, 0x0D90	; 0x800d90 <channels+0x2>
    2d8e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>

    // ADC is now fully setup and the next run of TIMER5_COMPA_vect can start
    // the conversion
    ADC_enabled = true;
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <ADC_enabled>

    // initialize timeTask since starting of ADC conversion is triggered
    // by compare match interrupt of timer 5
    timeTask_init();
}
    2d98:	df 91       	pop	r29
    2d9a:	cf 91       	pop	r28
    // the conversion
    ADC_enabled = true;

    // initialize timeTask since starting of ADC conversion is triggered
    // by compare match interrupt of timer 5
    timeTask_init();
    2d9c:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <timeTask_init>

00002da0 <ADC_getFilteredValue>:


uint16_t ADC_getFilteredValue(const uint8_t channel) {
    // perform atomic read on channels[channel].sum

    ADCChannel *c = &channels[channel];
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	fc 01       	movw	r30, r24
    2da4:	ee 0f       	add	r30, r30
    2da6:	ff 1f       	adc	r31, r31
    2da8:	88 0f       	add	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	88 0f       	add	r24, r24
    2dae:	99 1f       	adc	r25, r25
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	e8 0f       	add	r30, r24
    2db6:	f9 1f       	adc	r31, r25
    2db8:	e2 57       	subi	r30, 0x72	; 114
    2dba:	f2 4f       	sbci	r31, 0xF2	; 242
    // block. Otherwise the compiler would place this code after cli. This
    // ensures that interrupts are disabled for the smallest possible time.
    asm volatile ("" : : "r" (c) : "memory");

    uint32_t sum;
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2dbc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2dbe:	f8 94       	cli
        sum = c->sum;
    2dc0:	84 81       	ldd	r24, Z+4	; 0x04
    2dc2:	95 81       	ldd	r25, Z+5	; 0x05
    2dc4:	a6 81       	ldd	r26, Z+6	; 0x06
    2dc6:	b7 81       	ldd	r27, Z+7	; 0x07
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2dc8:	2f bf       	out	0x3f, r18	; 63
    }

    // calculate average
    return (uint16_t)(sum / ADC_FILTER_SIZE);
}
    2dca:	08 95       	ret

00002dcc <readPackets>:
    // transmit packet delimiter
    uart_write(DELIM);
}


static __attribute__ ((noinline)) void readPackets(void) {
    2dcc:	ef 92       	push	r14
    2dce:	ff 92       	push	r15
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    register uint8_t tmpChksum = inChksum;
    2dd8:	00 91 ee 03 	lds	r16, 0x03EE	; 0x8003ee <inChksum>
    register uint16_t tmpBufLen = inBufLen;
    2ddc:	c0 91 f0 03 	lds	r28, 0x03F0	; 0x8003f0 <inBufLen>
    2de0:	d0 91 f1 03 	lds	r29, 0x03F1	; 0x8003f1 <inBufLen+0x1>
    register uint8_t* tmpBuf = inBuf + tmpBufLen;
    2de4:	ce 01       	movw	r24, r28
    2de6:	8e 50       	subi	r24, 0x0E	; 14
    2de8:	9c 4f       	sbci	r25, 0xFC	; 252
    2dea:	7c 01       	movw	r14, r24
    register uint8_t tmpIsESC = isESC;
    2dec:	10 91 ef 03 	lds	r17, 0x03EF	; 0x8003ef <isESC>
    2df0:	09 c0       	rjmp	.+18     	; 0x2e04 <readPackets+0x38>
            tmpBuf = inBuf;
            continue;
        }

        // place byte in incoming packet buffer
        *tmpBuf++ = data;
    2df2:	9f ef       	ldi	r25, 0xFF	; 255
    2df4:	e9 1a       	sub	r14, r25
    2df6:	f9 0a       	sbc	r15, r25
        tmpChksum ^= data;
    2df8:	08 27       	eor	r16, r24
    2dfa:	10 e0       	ldi	r17, 0x00	; 0
            tmpChksum = 0;
            tmpBuf = inBuf;
            // set error flag
            errors |= COMM_ERR_BUFFERFULL;
        }
    } while (uart_available());
    2dfc:	0e 94 5d 16 	call	0x2cba	; 0x2cba <uart_available1>
    2e00:	88 23       	and	r24, r24
    2e02:	01 f1       	breq	.+64     	; 0x2e44 <readPackets+0x78>
    register uint8_t tmpIsESC = isESC;

    // while some data is available in the UART RX buffer
    do {
        // get the data byte
        register uint8_t data = uart_read();
    2e04:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <uart_read1>

        if (tmpIsESC) { // if last data byte was the escape byte
    2e08:	11 11       	cpse	r17, r1
    2e0a:	04 c0       	rjmp	.+8      	; 0x2e14 <readPackets+0x48>
            // no more escaping
            tmpIsESC = false;
        } else if (data == ESC) { // if data byte is the escape byte
    2e0c:	81 31       	cpi	r24, 0x11	; 17
    2e0e:	51 f1       	breq	.+84     	; 0x2e64 <readPackets+0x98>
            tmpIsESC = true; // set flag for indicating an escape sequence
            continue;
        } else if (data == DELIM) { // if data byte is delimiter, we should have a complete packet in the incoming buffer
    2e10:	8b 32       	cpi	r24, 0x2B	; 43
    2e12:	51 f1       	breq	.+84     	; 0x2e68 <readPackets+0x9c>
            tmpBuf = inBuf;
            continue;
        }

        // place byte in incoming packet buffer
        *tmpBuf++ = data;
    2e14:	f7 01       	movw	r30, r14
    2e16:	80 83       	st	Z, r24
        tmpChksum ^= data;

        if (++tmpBufLen == COMM_RECV_BUFFER_SIZE) { // if incoming packet buffer is full
    2e18:	21 96       	adiw	r28, 0x01	; 1
    2e1a:	c1 15       	cp	r28, r1
    2e1c:	f4 e0       	ldi	r31, 0x04	; 4
    2e1e:	df 07       	cpc	r29, r31
    2e20:	41 f7       	brne	.-48     	; 0x2df2 <readPackets+0x26>
            // clear buffer
            tmpBufLen = 0;
            tmpChksum = 0;
            tmpBuf = inBuf;
            // set error flag
            errors |= COMM_ERR_BUFFERFULL;
    2e22:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <errors>
    2e26:	81 60       	ori	r24, 0x01	; 1
    2e28:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <errors>
    2e2c:	10 e0       	ldi	r17, 0x00	; 0

        if (++tmpBufLen == COMM_RECV_BUFFER_SIZE) { // if incoming packet buffer is full
            // clear buffer
            tmpBufLen = 0;
            tmpChksum = 0;
            tmpBuf = inBuf;
    2e2e:	82 ef       	ldi	r24, 0xF2	; 242
    2e30:	e8 2e       	mov	r14, r24
    2e32:	83 e0       	ldi	r24, 0x03	; 3
    2e34:	f8 2e       	mov	r15, r24
        *tmpBuf++ = data;
        tmpChksum ^= data;

        if (++tmpBufLen == COMM_RECV_BUFFER_SIZE) { // if incoming packet buffer is full
            // clear buffer
            tmpBufLen = 0;
    2e36:	c0 e0       	ldi	r28, 0x00	; 0
    2e38:	d0 e0       	ldi	r29, 0x00	; 0
            tmpChksum = 0;
    2e3a:	00 e0       	ldi	r16, 0x00	; 0
            tmpBuf = inBuf;
            // set error flag
            errors |= COMM_ERR_BUFFERFULL;
        }
    } while (uart_available());
    2e3c:	0e 94 5d 16 	call	0x2cba	; 0x2cba <uart_available1>
    2e40:	81 11       	cpse	r24, r1
    2e42:	e0 cf       	rjmp	.-64     	; 0x2e04 <readPackets+0x38>

    // update current checksum and buffer position in memory before exiting
    inChksum = tmpChksum;
    2e44:	00 93 ee 03 	sts	0x03EE, r16	; 0x8003ee <inChksum>
    inBufLen = tmpBufLen;
    2e48:	d0 93 f1 03 	sts	0x03F1, r29	; 0x8003f1 <inBufLen+0x1>
    2e4c:	c0 93 f0 03 	sts	0x03F0, r28	; 0x8003f0 <inBufLen>
    isESC = tmpIsESC;
    2e50:	11 70       	andi	r17, 0x01	; 1
    2e52:	10 93 ef 03 	sts	0x03EF, r17	; 0x8003ef <isESC>
}
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	ff 90       	pop	r15
    2e60:	ef 90       	pop	r14
    2e62:	08 95       	ret

        if (tmpIsESC) { // if last data byte was the escape byte
            // no more escaping
            tmpIsESC = false;
        } else if (data == ESC) { // if data byte is the escape byte
            tmpIsESC = true; // set flag for indicating an escape sequence
    2e64:	11 e0       	ldi	r17, 0x01	; 1
    2e66:	ca cf       	rjmp	.-108    	; 0x2dfc <readPackets+0x30>
            continue;
        } else if (data == DELIM) { // if data byte is delimiter, we should have a complete packet in the incoming buffer
            if (tmpBufLen >= 4) { // if number of bytes in buffer is at least the minimum size, we might have received a full packet
    2e68:	c4 30       	cpi	r28, 0x04	; 4
    2e6a:	d1 05       	cpc	r29, r1
    2e6c:	f0 f0       	brcs	.+60     	; 0x2eaa <readPackets+0xde>

                register uint8_t chksumSize = inBuf[0]; // read low byte of payload size
    2e6e:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <inBuf>
                data = inBuf[1]; // read high byte of payload size
                uint16_t size = chksumSize | ((uint16_t)data << 8); // compute payload size

                // calculate 4-bit checksum for payload size in low nibble
                chksumSize ^= data;
    2e72:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <inBuf+0x1>
    2e76:	89 27       	eor	r24, r25
                chksumSize = (chksumSize >> 4) ^ (chksumSize & 0x0F);
    2e78:	98 2f       	mov	r25, r24
    2e7a:	92 95       	swap	r25
    2e7c:	9f 70       	andi	r25, 0x0F	; 15
    2e7e:	8f 70       	andi	r24, 0x0F	; 15
    2e80:	89 27       	eor	r24, r25

                data = inBuf[2]; // read checksum for payload size (bits 7-4) and channel ID (bits 3-0)
    2e82:	e0 91 f4 03 	lds	r30, 0x03F4	; 0x8003f4 <inBuf+0x2>

                if ((data >> 4) == chksumSize) { // check for mismatch of payload size checksum
    2e86:	9e 2f       	mov	r25, r30
    2e88:	92 95       	swap	r25
    2e8a:	9f 70       	andi	r25, 0x0F	; 15
    2e8c:	89 17       	cp	r24, r25
    2e8e:	d1 f0       	breq	.+52     	; 0x2ec4 <readPackets+0xf8>
                        } else
                            errors |= COMM_ERR_CHECKSUM;
                    } else
                        errors |= COMM_ERR_SIZE_MISMATCH;
                } else
                    errors |= COMM_ERR_HEADER_CHECKSUM;
    2e90:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <errors>
    2e94:	84 60       	ori	r24, 0x04	; 4
    2e96:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <errors>
                errors |= COMM_ERR_TOO_SMALL;

            // clear incoming packet buffer and checksum
            tmpBufLen = 0;
            tmpChksum = 0;
            tmpBuf = inBuf;
    2e9a:	22 ef       	ldi	r18, 0xF2	; 242
    2e9c:	e2 2e       	mov	r14, r18
    2e9e:	23 e0       	ldi	r18, 0x03	; 3
    2ea0:	f2 2e       	mov	r15, r18
                    errors |= COMM_ERR_HEADER_CHECKSUM;
            } else
                errors |= COMM_ERR_TOO_SMALL;

            // clear incoming packet buffer and checksum
            tmpBufLen = 0;
    2ea2:	c0 e0       	ldi	r28, 0x00	; 0
    2ea4:	d0 e0       	ldi	r29, 0x00	; 0
            tmpChksum = 0;
    2ea6:	00 e0       	ldi	r16, 0x00	; 0
    2ea8:	a9 cf       	rjmp	.-174    	; 0x2dfc <readPackets+0x30>
                    } else
                        errors |= COMM_ERR_SIZE_MISMATCH;
                } else
                    errors |= COMM_ERR_HEADER_CHECKSUM;
            } else
                errors |= COMM_ERR_TOO_SMALL;
    2eaa:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <errors>
    2eae:	82 60       	ori	r24, 0x02	; 2
    2eb0:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <errors>

            // clear incoming packet buffer and checksum
            tmpBufLen = 0;
            tmpChksum = 0;
            tmpBuf = inBuf;
    2eb4:	92 ef       	ldi	r25, 0xF2	; 242
    2eb6:	e9 2e       	mov	r14, r25
    2eb8:	93 e0       	ldi	r25, 0x03	; 3
    2eba:	f9 2e       	mov	r15, r25
                    errors |= COMM_ERR_HEADER_CHECKSUM;
            } else
                errors |= COMM_ERR_TOO_SMALL;

            // clear incoming packet buffer and checksum
            tmpBufLen = 0;
    2ebc:	c0 e0       	ldi	r28, 0x00	; 0
    2ebe:	d0 e0       	ldi	r29, 0x00	; 0
            tmpChksum = 0;
    2ec0:	00 e0       	ldi	r16, 0x00	; 0
    2ec2:	9c cf       	rjmp	.-200    	; 0x2dfc <readPackets+0x30>
        } else if (data == DELIM) { // if data byte is delimiter, we should have a complete packet in the incoming buffer
            if (tmpBufLen >= 4) { // if number of bytes in buffer is at least the minimum size, we might have received a full packet

                register uint8_t chksumSize = inBuf[0]; // read low byte of payload size
                data = inBuf[1]; // read high byte of payload size
                uint16_t size = chksumSize | ((uint16_t)data << 8); // compute payload size
    2ec4:	60 91 f2 03 	lds	r22, 0x03F2	; 0x8003f2 <inBuf>
    2ec8:	70 91 f3 03 	lds	r23, 0x03F3	; 0x8003f3 <inBuf+0x1>
                chksumSize = (chksumSize >> 4) ^ (chksumSize & 0x0F);

                data = inBuf[2]; // read checksum for payload size (bits 7-4) and channel ID (bits 3-0)

                if ((data >> 4) == chksumSize) { // check for mismatch of payload size checksum
                    if (size == tmpBufLen - 4) { // check packet length
    2ecc:	24 97       	sbiw	r28, 0x04	; 4
    2ece:	6c 17       	cp	r22, r28
    2ed0:	7d 07       	cpc	r23, r29
    2ed2:	69 f0       	breq	.+26     	; 0x2eee <readPackets+0x122>
                            else
                                errors |= COMM_ERR_UNREGISTEREDCHANNEL;
                        } else
                            errors |= COMM_ERR_CHECKSUM;
                    } else
                        errors |= COMM_ERR_SIZE_MISMATCH;
    2ed4:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <errors>
    2ed8:	88 60       	ori	r24, 0x08	; 8
    2eda:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <errors>
                errors |= COMM_ERR_TOO_SMALL;

            // clear incoming packet buffer and checksum
            tmpBufLen = 0;
            tmpChksum = 0;
            tmpBuf = inBuf;
    2ede:	32 ef       	ldi	r19, 0xF2	; 242
    2ee0:	e3 2e       	mov	r14, r19
    2ee2:	33 e0       	ldi	r19, 0x03	; 3
    2ee4:	f3 2e       	mov	r15, r19
                    errors |= COMM_ERR_HEADER_CHECKSUM;
            } else
                errors |= COMM_ERR_TOO_SMALL;

            // clear incoming packet buffer and checksum
            tmpBufLen = 0;
    2ee6:	c0 e0       	ldi	r28, 0x00	; 0
    2ee8:	d0 e0       	ldi	r29, 0x00	; 0
            tmpChksum = 0;
    2eea:	00 e0       	ldi	r16, 0x00	; 0
    2eec:	87 cf       	rjmp	.-242    	; 0x2dfc <readPackets+0x30>

                data = inBuf[2]; // read checksum for payload size (bits 7-4) and channel ID (bits 3-0)

                if ((data >> 4) == chksumSize) { // check for mismatch of payload size checksum
                    if (size == tmpBufLen - 4) { // check packet length
                        if (tmpChksum == 0) { // if global checksum is ok
    2eee:	01 11       	cpse	r16, r1
    2ef0:	15 c0       	rjmp	.+42     	; 0x2f1c <readPackets+0x150>
                            register uint8_t channel = data & 0x0F; // get channel number
                            // execute callback function
                            if (communication_ChannelReceivers[channel])
    2ef2:	ef 70       	andi	r30, 0x0F	; 15
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	ee 0f       	add	r30, r30
    2ef8:	ff 1f       	adc	r31, r31
    2efa:	e4 55       	subi	r30, 0x54	; 84
    2efc:	f2 4f       	sbci	r31, 0xF2	; 242
    2efe:	01 90       	ld	r0, Z+
    2f00:	f0 81       	ld	r31, Z
    2f02:	e0 2d       	mov	r30, r0
    2f04:	30 97       	sbiw	r30, 0x00	; 0
    2f06:	b9 f0       	breq	.+46     	; 0x2f36 <readPackets+0x16a>
                                (communication_ChannelReceivers[channel])(inBuf+3, size);
    2f08:	85 ef       	ldi	r24, 0xF5	; 245
    2f0a:	93 e0       	ldi	r25, 0x03	; 3
    2f0c:	09 95       	icall
                errors |= COMM_ERR_TOO_SMALL;

            // clear incoming packet buffer and checksum
            tmpBufLen = 0;
            tmpChksum = 0;
            tmpBuf = inBuf;
    2f0e:	62 ef       	ldi	r22, 0xF2	; 242
    2f10:	e6 2e       	mov	r14, r22
    2f12:	63 e0       	ldi	r22, 0x03	; 3
    2f14:	f6 2e       	mov	r15, r22
                    errors |= COMM_ERR_HEADER_CHECKSUM;
            } else
                errors |= COMM_ERR_TOO_SMALL;

            // clear incoming packet buffer and checksum
            tmpBufLen = 0;
    2f16:	c0 e0       	ldi	r28, 0x00	; 0
    2f18:	d0 e0       	ldi	r29, 0x00	; 0
    2f1a:	70 cf       	rjmp	.-288    	; 0x2dfc <readPackets+0x30>
                            if (communication_ChannelReceivers[channel])
                                (communication_ChannelReceivers[channel])(inBuf+3, size);
                            else
                                errors |= COMM_ERR_UNREGISTEREDCHANNEL;
                        } else
                            errors |= COMM_ERR_CHECKSUM;
    2f1c:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <errors>
    2f20:	80 61       	ori	r24, 0x10	; 16
    2f22:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <errors>
                errors |= COMM_ERR_TOO_SMALL;

            // clear incoming packet buffer and checksum
            tmpBufLen = 0;
            tmpChksum = 0;
            tmpBuf = inBuf;
    2f26:	42 ef       	ldi	r20, 0xF2	; 242
    2f28:	e4 2e       	mov	r14, r20
    2f2a:	43 e0       	ldi	r20, 0x03	; 3
    2f2c:	f4 2e       	mov	r15, r20
                    errors |= COMM_ERR_HEADER_CHECKSUM;
            } else
                errors |= COMM_ERR_TOO_SMALL;

            // clear incoming packet buffer and checksum
            tmpBufLen = 0;
    2f2e:	c0 e0       	ldi	r28, 0x00	; 0
    2f30:	d0 e0       	ldi	r29, 0x00	; 0
            tmpChksum = 0;
    2f32:	00 e0       	ldi	r16, 0x00	; 0
    2f34:	63 cf       	rjmp	.-314    	; 0x2dfc <readPackets+0x30>
                            register uint8_t channel = data & 0x0F; // get channel number
                            // execute callback function
                            if (communication_ChannelReceivers[channel])
                                (communication_ChannelReceivers[channel])(inBuf+3, size);
                            else
                                errors |= COMM_ERR_UNREGISTEREDCHANNEL;
    2f36:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <errors>
    2f3a:	80 62       	ori	r24, 0x20	; 32
    2f3c:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <errors>
                errors |= COMM_ERR_TOO_SMALL;

            // clear incoming packet buffer and checksum
            tmpBufLen = 0;
            tmpChksum = 0;
            tmpBuf = inBuf;
    2f40:	52 ef       	ldi	r21, 0xF2	; 242
    2f42:	e5 2e       	mov	r14, r21
    2f44:	53 e0       	ldi	r21, 0x03	; 3
    2f46:	f5 2e       	mov	r15, r21
                    errors |= COMM_ERR_HEADER_CHECKSUM;
            } else
                errors |= COMM_ERR_TOO_SMALL;

            // clear incoming packet buffer and checksum
            tmpBufLen = 0;
    2f48:	c0 e0       	ldi	r28, 0x00	; 0
    2f4a:	d0 e0       	ldi	r29, 0x00	; 0
    2f4c:	57 cf       	rjmp	.-338    	; 0x2dfc <readPackets+0x30>

00002f4e <communication_init>:
static uint8_t errors = 0;


void communication_init(void) {
    // clear communication_ChannelReceivers
    memset(communication_ChannelReceivers, 0, sizeof(communication_ChannelReceivers));
    2f4e:	80 e2       	ldi	r24, 0x20	; 32
    2f50:	ec ea       	ldi	r30, 0xAC	; 172
    2f52:	fd e0       	ldi	r31, 0x0D	; 13
    2f54:	df 01       	movw	r26, r30
    2f56:	1d 92       	st	X+, r1
    2f58:	8a 95       	dec	r24
    2f5a:	e9 f7       	brne	.-6      	; 0x2f56 <communication_init+0x8>
    2f5c:	08 95       	ret

00002f5e <communication_writePacket>:
    // send packet to debug channel CH_OUT_DEBUG (0x00)
    communication_writePacket(CH_OUT_DEBUG, (uint8_t *)buff, size > 256 ? 257 : (size+1));
}


void communication_writePacket(const Channel_t channel, const uint8_t* packet, const uint16_t size) {
    2f5e:	cf 92       	push	r12
    2f60:	df 92       	push	r13
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	c8 2f       	mov	r28, r24
    2f70:	6b 01       	movw	r12, r22
    2f72:	7a 01       	movw	r14, r20
    // while writing each byte, the global checksum is calculated over the whole
    // transmitted data including the header information

    // transmit low byte of payload size
    register uint8_t chksum = (uint8_t)size;
    uart_writeEscaped(chksum);
    2f74:	41 31       	cpi	r20, 0x11	; 17
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <communication_writePacket+0x1c>
    2f78:	60 c0       	rjmp	.+192    	; 0x303a <communication_writePacket+0xdc>
    2f7a:	4b 32       	cpi	r20, 0x2B	; 43
    2f7c:	09 f4       	brne	.+2      	; 0x2f80 <communication_writePacket+0x22>
    2f7e:	5d c0       	rjmp	.+186    	; 0x303a <communication_writePacket+0xdc>
    2f80:	8e 2d       	mov	r24, r14
    2f82:	0e 94 39 16 	call	0x2c72	; 0x2c72 <uart_write1>

    // transmit high byte of payload size
    register uint8_t byte = (uint8_t)(size >> 8);
    2f86:	8f 2d       	mov	r24, r15
    uart_writeEscaped(byte);
    2f88:	81 31       	cpi	r24, 0x11	; 17
    2f8a:	09 f4       	brne	.+2      	; 0x2f8e <communication_writePacket+0x30>
    2f8c:	52 c0       	rjmp	.+164    	; 0x3032 <communication_writePacket+0xd4>
    2f8e:	8b 32       	cpi	r24, 0x2B	; 43
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <communication_writePacket+0x36>
    2f92:	4f c0       	rjmp	.+158    	; 0x3032 <communication_writePacket+0xd4>
    2f94:	8f 2d       	mov	r24, r15
    2f96:	0e 94 39 16 	call	0x2c72	; 0x2c72 <uart_write1>
    chksum ^= byte;
    2f9a:	1f 2d       	mov	r17, r15
    2f9c:	1e 25       	eor	r17, r14

    // compute 4-bit checksum of size and place it in high nibble,
    // place channel number in low nibble and transmit
    byte = (((chksum << 4) & 0xFF) ^ (chksum & 0xF0)) | (channel & 0x0F);
    2f9e:	20 e1       	ldi	r18, 0x10	; 16
    2fa0:	12 9f       	mul	r17, r18
    2fa2:	c0 01       	movw	r24, r0
    2fa4:	11 24       	eor	r1, r1
    2fa6:	d1 2f       	mov	r29, r17
    2fa8:	d0 7f       	andi	r29, 0xF0	; 240
    2faa:	d8 27       	eor	r29, r24
    2fac:	cf 70       	andi	r28, 0x0F	; 15
    2fae:	dc 2b       	or	r29, r28
    uart_writeEscaped(byte);
    2fb0:	d1 31       	cpi	r29, 0x11	; 17
    2fb2:	d9 f1       	breq	.+118    	; 0x302a <communication_writePacket+0xcc>
    2fb4:	db 32       	cpi	r29, 0x2B	; 43
    2fb6:	c9 f1       	breq	.+114    	; 0x302a <communication_writePacket+0xcc>
    2fb8:	8d 2f       	mov	r24, r29
    2fba:	0e 94 39 16 	call	0x2c72	; 0x2c72 <uart_write1>
    chksum ^= byte;
    2fbe:	d1 27       	eor	r29, r17

    // transmit packet payload and update checksum
    for (uint16_t i = 0; i < size; i++) {
    2fc0:	e1 14       	cp	r14, r1
    2fc2:	f1 04       	cpc	r15, r1
    2fc4:	e1 f0       	breq	.+56     	; 0x2ffe <communication_writePacket+0xa0>
    2fc6:	86 01       	movw	r16, r12
    2fc8:	ec 0c       	add	r14, r12
    2fca:	fd 1c       	adc	r15, r13
    2fcc:	07 c0       	rjmp	.+14     	; 0x2fdc <communication_writePacket+0x7e>
        register uint8_t tmp = packet[i];
        uart_writeEscaped(tmp);
    2fce:	8c 2f       	mov	r24, r28
    2fd0:	0e 94 39 16 	call	0x2c72	; 0x2c72 <uart_write1>
        chksum ^= tmp;
    2fd4:	dc 27       	eor	r29, r28
    byte = (((chksum << 4) & 0xFF) ^ (chksum & 0xF0)) | (channel & 0x0F);
    uart_writeEscaped(byte);
    chksum ^= byte;

    // transmit packet payload and update checksum
    for (uint16_t i = 0; i < size; i++) {
    2fd6:	0e 15       	cp	r16, r14
    2fd8:	1f 05       	cpc	r17, r15
    2fda:	89 f0       	breq	.+34     	; 0x2ffe <communication_writePacket+0xa0>
        register uint8_t tmp = packet[i];
    2fdc:	f8 01       	movw	r30, r16
    2fde:	c1 91       	ld	r28, Z+
    2fe0:	8f 01       	movw	r16, r30
        uart_writeEscaped(tmp);
    2fe2:	c1 31       	cpi	r28, 0x11	; 17
    2fe4:	11 f0       	breq	.+4      	; 0x2fea <communication_writePacket+0x8c>
    2fe6:	cb 32       	cpi	r28, 0x2B	; 43
    2fe8:	91 f7       	brne	.-28     	; 0x2fce <communication_writePacket+0x70>
    2fea:	81 e1       	ldi	r24, 0x11	; 17
    2fec:	0e 94 39 16 	call	0x2c72	; 0x2c72 <uart_write1>
    2ff0:	8c 2f       	mov	r24, r28
    2ff2:	0e 94 39 16 	call	0x2c72	; 0x2c72 <uart_write1>
        chksum ^= tmp;
    2ff6:	dc 27       	eor	r29, r28
    byte = (((chksum << 4) & 0xFF) ^ (chksum & 0xF0)) | (channel & 0x0F);
    uart_writeEscaped(byte);
    chksum ^= byte;

    // transmit packet payload and update checksum
    for (uint16_t i = 0; i < size; i++) {
    2ff8:	0e 15       	cp	r16, r14
    2ffa:	1f 05       	cpc	r17, r15
    2ffc:	79 f7       	brne	.-34     	; 0x2fdc <communication_writePacket+0x7e>
        uart_writeEscaped(tmp);
        chksum ^= tmp;
    }

    // transmit checksum
    uart_writeEscaped(chksum);
    2ffe:	d1 31       	cpi	r29, 0x11	; 17
    3000:	81 f0       	breq	.+32     	; 0x3022 <communication_writePacket+0xc4>
    3002:	db 32       	cpi	r29, 0x2B	; 43
    3004:	71 f0       	breq	.+28     	; 0x3022 <communication_writePacket+0xc4>
    3006:	8d 2f       	mov	r24, r29
    3008:	0e 94 39 16 	call	0x2c72	; 0x2c72 <uart_write1>
    // transmit packet delimiter
    uart_write(DELIM);
    300c:	8b e2       	ldi	r24, 0x2B	; 43
}
    300e:	df 91       	pop	r29
    3010:	cf 91       	pop	r28
    3012:	1f 91       	pop	r17
    3014:	0f 91       	pop	r16
    3016:	ff 90       	pop	r15
    3018:	ef 90       	pop	r14
    301a:	df 90       	pop	r13
    301c:	cf 90       	pop	r12
    }

    // transmit checksum
    uart_writeEscaped(chksum);
    // transmit packet delimiter
    uart_write(DELIM);
    301e:	0c 94 39 16 	jmp	0x2c72	; 0x2c72 <uart_write1>
        uart_writeEscaped(tmp);
        chksum ^= tmp;
    }

    // transmit checksum
    uart_writeEscaped(chksum);
    3022:	81 e1       	ldi	r24, 0x11	; 17
    3024:	0e 94 39 16 	call	0x2c72	; 0x2c72 <uart_write1>
    3028:	ee cf       	rjmp	.-36     	; 0x3006 <communication_writePacket+0xa8>
    chksum ^= byte;

    // compute 4-bit checksum of size and place it in high nibble,
    // place channel number in low nibble and transmit
    byte = (((chksum << 4) & 0xFF) ^ (chksum & 0xF0)) | (channel & 0x0F);
    uart_writeEscaped(byte);
    302a:	81 e1       	ldi	r24, 0x11	; 17
    302c:	0e 94 39 16 	call	0x2c72	; 0x2c72 <uart_write1>
    3030:	c3 cf       	rjmp	.-122    	; 0x2fb8 <communication_writePacket+0x5a>
    register uint8_t chksum = (uint8_t)size;
    uart_writeEscaped(chksum);

    // transmit high byte of payload size
    register uint8_t byte = (uint8_t)(size >> 8);
    uart_writeEscaped(byte);
    3032:	81 e1       	ldi	r24, 0x11	; 17
    3034:	0e 94 39 16 	call	0x2c72	; 0x2c72 <uart_write1>
    3038:	ad cf       	rjmp	.-166    	; 0x2f94 <communication_writePacket+0x36>
    // while writing each byte, the global checksum is calculated over the whole
    // transmitted data including the header information

    // transmit low byte of payload size
    register uint8_t chksum = (uint8_t)size;
    uart_writeEscaped(chksum);
    303a:	81 e1       	ldi	r24, 0x11	; 17
    303c:	0e 94 39 16 	call	0x2c72	; 0x2c72 <uart_write1>
    3040:	9f cf       	rjmp	.-194    	; 0x2f80 <communication_writePacket+0x22>

00003042 <communication_log>:
    // clear communication_ChannelReceivers
    memset(communication_ChannelReceivers, 0, sizeof(communication_ChannelReceivers));
}


void communication_log(const Level_t level, const char* format, ...) {
    3042:	cf 93       	push	r28
    3044:	df 93       	push	r29
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62
    304a:	c2 50       	subi	r28, 0x02	; 2
    304c:	d1 40       	sbci	r29, 0x01	; 1
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	cd bf       	out	0x3d, r28	; 61
    va_list argp;
    va_start(argp, format);

    char buff[258];
    buff[0] = level;
    3058:	c9 5f       	subi	r28, 0xF9	; 249
    305a:	de 4f       	sbci	r29, 0xFE	; 254
    305c:	88 81       	ld	r24, Y
    305e:	c7 50       	subi	r28, 0x07	; 7
    3060:	d1 40       	sbci	r29, 0x01	; 1
    3062:	89 83       	std	Y+1, r24	; 0x01

    int size = vsnprintf(&buff[1], 257, format, argp);
    3064:	9e 01       	movw	r18, r28
    3066:	26 5f       	subi	r18, 0xF6	; 246
    3068:	3e 4f       	sbci	r19, 0xFE	; 254
    306a:	c8 5f       	subi	r28, 0xF8	; 248
    306c:	de 4f       	sbci	r29, 0xFE	; 254
    306e:	48 81       	ld	r20, Y
    3070:	59 81       	ldd	r21, Y+1	; 0x01
    3072:	c8 50       	subi	r28, 0x08	; 8
    3074:	d1 40       	sbci	r29, 0x01	; 1
    3076:	61 e0       	ldi	r22, 0x01	; 1
    3078:	71 e0       	ldi	r23, 0x01	; 1
    307a:	ce 01       	movw	r24, r28
    307c:	02 96       	adiw	r24, 0x02	; 2
    307e:	0e 94 26 2c 	call	0x584c	; 0x584c <vsnprintf>
    va_end(argp);

    // send packet to debug channel CH_OUT_DEBUG (0x00)
    communication_writePacket(CH_OUT_DEBUG, (uint8_t *)buff, size > 256 ? 257 : (size+1));
    3082:	81 30       	cpi	r24, 0x01	; 1
    3084:	21 e0       	ldi	r18, 0x01	; 1
    3086:	92 07       	cpc	r25, r18
    3088:	9c f4       	brge	.+38     	; 0x30b0 <communication_log+0x6e>
    308a:	ac 01       	movw	r20, r24
    308c:	4f 5f       	subi	r20, 0xFF	; 255
    308e:	5f 4f       	sbci	r21, 0xFF	; 255
    3090:	be 01       	movw	r22, r28
    3092:	6f 5f       	subi	r22, 0xFF	; 255
    3094:	7f 4f       	sbci	r23, 0xFF	; 255
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <communication_writePacket>
}
    309c:	ce 5f       	subi	r28, 0xFE	; 254
    309e:	de 4f       	sbci	r29, 0xFE	; 254
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	08 95       	ret

    int size = vsnprintf(&buff[1], 257, format, argp);
    va_end(argp);

    // send packet to debug channel CH_OUT_DEBUG (0x00)
    communication_writePacket(CH_OUT_DEBUG, (uint8_t *)buff, size > 256 ? 257 : (size+1));
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	51 e0       	ldi	r21, 0x01	; 1
    30b4:	ed cf       	rjmp	.-38     	; 0x3090 <communication_log+0x4e>

000030b6 <communication_log_P>:
}


void communication_log_P(const Level_t level, const char* format, ...) {
    30b6:	cf 93       	push	r28
    30b8:	df 93       	push	r29
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
    30be:	c2 50       	subi	r28, 0x02	; 2
    30c0:	d1 40       	sbci	r29, 0x01	; 1
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd bf       	out	0x3d, r28	; 61
    va_list argp;
    va_start(argp, format);

    char buff[258];
    buff[0] = level;
    30cc:	c9 5f       	subi	r28, 0xF9	; 249
    30ce:	de 4f       	sbci	r29, 0xFE	; 254
    30d0:	88 81       	ld	r24, Y
    30d2:	c7 50       	subi	r28, 0x07	; 7
    30d4:	d1 40       	sbci	r29, 0x01	; 1
    30d6:	89 83       	std	Y+1, r24	; 0x01

    int size = vsnprintf_P(&buff[1], 257, format, argp);
    30d8:	9e 01       	movw	r18, r28
    30da:	26 5f       	subi	r18, 0xF6	; 246
    30dc:	3e 4f       	sbci	r19, 0xFE	; 254
    30de:	c8 5f       	subi	r28, 0xF8	; 248
    30e0:	de 4f       	sbci	r29, 0xFE	; 254
    30e2:	48 81       	ld	r20, Y
    30e4:	59 81       	ldd	r21, Y+1	; 0x01
    30e6:	c8 50       	subi	r28, 0x08	; 8
    30e8:	d1 40       	sbci	r29, 0x01	; 1
    30ea:	61 e0       	ldi	r22, 0x01	; 1
    30ec:	71 e0       	ldi	r23, 0x01	; 1
    30ee:	ce 01       	movw	r24, r28
    30f0:	02 96       	adiw	r24, 0x02	; 2
    30f2:	0e 94 5f 2c 	call	0x58be	; 0x58be <vsnprintf_P>
    va_end(argp);

    // send packet to debug channel CH_OUT_DEBUG (0x00)
    communication_writePacket(CH_OUT_DEBUG, (uint8_t *)buff, size > 256 ? 257 : (size+1));
    30f6:	81 30       	cpi	r24, 0x01	; 1
    30f8:	21 e0       	ldi	r18, 0x01	; 1
    30fa:	92 07       	cpc	r25, r18
    30fc:	9c f4       	brge	.+38     	; 0x3124 <communication_log_P+0x6e>
    30fe:	ac 01       	movw	r20, r24
    3100:	4f 5f       	subi	r20, 0xFF	; 255
    3102:	5f 4f       	sbci	r21, 0xFF	; 255
    3104:	be 01       	movw	r22, r28
    3106:	6f 5f       	subi	r22, 0xFF	; 255
    3108:	7f 4f       	sbci	r23, 0xFF	; 255
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <communication_writePacket>
}
    3110:	ce 5f       	subi	r28, 0xFE	; 254
    3112:	de 4f       	sbci	r29, 0xFE	; 254
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	08 95       	ret

    int size = vsnprintf_P(&buff[1], 257, format, argp);
    va_end(argp);

    // send packet to debug channel CH_OUT_DEBUG (0x00)
    communication_writePacket(CH_OUT_DEBUG, (uint8_t *)buff, size > 256 ? 257 : (size+1));
    3124:	41 e0       	ldi	r20, 0x01	; 1
    3126:	51 e0       	ldi	r21, 0x01	; 1
    3128:	ed cf       	rjmp	.-38     	; 0x3104 <communication_log_P+0x4e>

0000312a <communication_readPackets>:
    isESC = tmpIsESC;
}


void communication_readPackets(void) {
    if (uart_available())
    312a:	0e 94 5d 16 	call	0x2cba	; 0x2cba <uart_available1>
    312e:	81 11       	cpse	r24, r1
    3130:	01 c0       	rjmp	.+2      	; 0x3134 <communication_readPackets+0xa>
    3132:	08 95       	ret
        readPackets();
    3134:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <readPackets>

00003138 <commPathFollowerParameters>:

// communication callback function for channel CH_IN_PATH_FOLLOW_PARAMS in order to receive
// path follower parameters from HWPCS
void commPathFollowerParameters(const uint8_t* packet, const uint16_t size) {
    PathFollowerParameters_t* params = (PathFollowerParameters_t*)packet;
    pathFollower_lookaheadDistance = params->lookaheadDistance;
    3138:	fc 01       	movw	r30, r24
    313a:	40 81       	ld	r20, Z
    313c:	51 81       	ldd	r21, Z+1	; 0x01
    313e:	62 81       	ldd	r22, Z+2	; 0x02
    3140:	73 81       	ldd	r23, Z+3	; 0x03
    3142:	40 93 36 02 	sts	0x0236, r20	; 0x800236 <pathFollower_lookaheadDistance>
    3146:	50 93 37 02 	sts	0x0237, r21	; 0x800237 <pathFollower_lookaheadDistance+0x1>
    314a:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <pathFollower_lookaheadDistance+0x2>
    314e:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <pathFollower_lookaheadDistance+0x3>
    pathFollower_segmentLimit = params->segmentLimit;
    3152:	84 81       	ldd	r24, Z+4	; 0x04
    3154:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <pathFollower_segmentLimit>
    pathFollowerInfoP("Follower parameters set");
    3158:	86 e1       	ldi	r24, 0x16	; 22
    315a:	93 e0       	ldi	r25, 0x03	; 3
    315c:	9f 93       	push	r25
    315e:	8f 93       	push	r24
    3160:	82 e0       	ldi	r24, 0x02	; 2
    3162:	8f 93       	push	r24
    3164:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <communication_log_P>
}
    3168:	0f 90       	pop	r0
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	08 95       	ret

00003170 <setPath>:
// resets all path follower local variables and copies the path to a newly
// allocated memory region.
// Furthermore, it extrapolates an additional point at the end of the path
// in direction of the last path segment. The length of the extrapolated segment
// is ten times the lookahead distance.
static bool setPath(const uint8_t pathLen, const Point_t* pathPoints) {
    3170:	2f 92       	push	r2
    3172:	3f 92       	push	r3
    3174:	4f 92       	push	r4
    3176:	5f 92       	push	r5
    3178:	6f 92       	push	r6
    317a:	7f 92       	push	r7
    317c:	8f 92       	push	r8
    317e:	9f 92       	push	r9
    3180:	af 92       	push	r10
    3182:	bf 92       	push	r11
    3184:	cf 92       	push	r12
    3186:	df 92       	push	r13
    3188:	ef 92       	push	r14
    318a:	ff 92       	push	r15
    318c:	0f 93       	push	r16
    318e:	1f 93       	push	r17
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    if (pathLen < 2)
    3194:	82 30       	cpi	r24, 0x02	; 2
    3196:	08 f4       	brcc	.+2      	; 0x319a <setPath+0x2a>
    3198:	a0 c0       	rjmp	.+320    	; 0x32da <setPath+0x16a>
    319a:	5b 01       	movw	r10, r22
    319c:	d8 2f       	mov	r29, r24
        return false; // path is too short

    // reset everything to initial condition
    curSeg = -1;
    319e:	8f ef       	ldi	r24, 0xFF	; 255
    31a0:	9f ef       	ldi	r25, 0xFF	; 255
    31a2:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <curSeg+0x1>
    31a6:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <curSeg>
    pathLength = 0;
    31aa:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <pathLength>
    initialized = false;
    31ae:	10 92 1a 08 	sts	0x081A, r1	; 0x80081a <initialized>
    pathFollower_status.enabled = false;
    31b2:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <pathFollower_status>

    // if a path was previously received, free its memory
    if (path != NULL)
    31b6:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <path>
    31ba:	90 91 1d 08 	lds	r25, 0x081D	; 0x80081d <path+0x1>
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	11 f0       	breq	.+4      	; 0x31c6 <setPath+0x56>
        free(path);
    31c2:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <free>

    // allocate memory for the new path
    // include space for the extrapolated point at the end
    size_t s = sizeof(Point_t) * (pathLen + 1);
    31c6:	0d 2f       	mov	r16, r29
    31c8:	10 e0       	ldi	r17, 0x00	; 0
    31ca:	78 01       	movw	r14, r16
    31cc:	8f ef       	ldi	r24, 0xFF	; 255
    31ce:	e8 1a       	sub	r14, r24
    31d0:	f8 0a       	sbc	r15, r24
    31d2:	ee 0c       	add	r14, r14
    31d4:	ff 1c       	adc	r15, r15
    31d6:	ee 0c       	add	r14, r14
    31d8:	ff 1c       	adc	r15, r15
    path = (Point_t*)malloc(s);
    31da:	c7 01       	movw	r24, r14
    31dc:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <malloc>
    31e0:	6c 01       	movw	r12, r24
    31e2:	90 93 1d 08 	sts	0x081D, r25	; 0x80081d <path+0x1>
    31e6:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <path>
    if (path == NULL)
    31ea:	00 97       	sbiw	r24, 0x00	; 0
    31ec:	09 f4       	brne	.+2      	; 0x31f0 <setPath+0x80>
    31ee:	75 c0       	rjmp	.+234    	; 0x32da <setPath+0x16a>
        return false; // error during memory allocation

    // copy the path points to the allocated region
    memcpy(path, pathPoints, s);
    31f0:	a7 01       	movw	r20, r14
    31f2:	b5 01       	movw	r22, r10
    31f4:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <memcpy>
    pathLength = pathLen;
    31f8:	d0 93 1b 08 	sts	0x081B, r29	; 0x80081b <pathLength>

    // extrapolate a new point in direction of the last segment with a distance
    // of ten times the lookahead distance from the last point.
    Point_t
        *pathPtr = &path[pathLength - 2],
    31fc:	02 50       	subi	r16, 0x02	; 2
    31fe:	10 4c       	sbci	r17, 0xC0	; 192
    3200:	00 0f       	add	r16, r16
    3202:	11 1f       	adc	r17, r17
    3204:	00 0f       	add	r16, r16
    3206:	11 1f       	adc	r17, r17
    3208:	e6 01       	movw	r28, r12
    320a:	c0 0f       	add	r28, r16
    320c:	d1 1f       	adc	r29, r17
        lastSegStart = *pathPtr, // equals path[pathLength - 2]
        lastSegEnd = *++pathPtr; // equals path[pathLength - 1], i.e. the last point
    320e:	0c 81       	ldd	r16, Y+4	; 0x04
    3210:	1d 81       	ldd	r17, Y+5	; 0x05
    3212:	2e 80       	ldd	r2, Y+6	; 0x06
    3214:	3f 80       	ldd	r3, Y+7	; 0x07

    // Compute segment vector as (end point - start point)
    FPoint_t
        lastSegVec = { lastSegEnd.x - lastSegStart.x, lastSegEnd.y - lastSegStart.y };
    3216:	88 81       	ld	r24, Y
    3218:	99 81       	ldd	r25, Y+1	; 0x01
    321a:	b8 01       	movw	r22, r16
    321c:	68 1b       	sub	r22, r24
    321e:	79 0b       	sbc	r23, r25
    3220:	07 2e       	mov	r0, r23
    3222:	00 0c       	add	r0, r0
    3224:	88 0b       	sbc	r24, r24
    3226:	99 0b       	sbc	r25, r25
    3228:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    322c:	2b 01       	movw	r4, r22
    322e:	3c 01       	movw	r6, r24
    3230:	8a 81       	ldd	r24, Y+2	; 0x02
    3232:	9b 81       	ldd	r25, Y+3	; 0x03
    3234:	b1 01       	movw	r22, r2
    3236:	68 1b       	sub	r22, r24
    3238:	79 0b       	sbc	r23, r25
    323a:	07 2e       	mov	r0, r23
    323c:	00 0c       	add	r0, r0
    323e:	88 0b       	sbc	r24, r24
    3240:	99 0b       	sbc	r25, r25
    3242:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3246:	6b 01       	movw	r12, r22
    3248:	7c 01       	movw	r14, r24
    float
        // length of last segment
        lastSegLen = hypotf(lastSegVec.x, lastSegVec.y),
    324a:	9b 01       	movw	r18, r22
    324c:	ac 01       	movw	r20, r24
    324e:	c3 01       	movw	r24, r6
    3250:	b2 01       	movw	r22, r4
    3252:	0e 94 36 24 	call	0x486c	; 0x486c <hypot>
    3256:	4b 01       	movw	r8, r22
    3258:	5c 01       	movw	r10, r24
        // relative distance of extrapolated point (w.r.t. to segment length)
        relDist = 10.0f * pathFollower_lookaheadDistance / lastSegLen;
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	40 e2       	ldi	r20, 0x20	; 32
    3260:	51 e4       	ldi	r21, 0x41	; 65
    3262:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <pathFollower_lookaheadDistance>
    3266:	70 91 37 02 	lds	r23, 0x0237	; 0x800237 <pathFollower_lookaheadDistance+0x1>
    326a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <pathFollower_lookaheadDistance+0x2>
    326e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <pathFollower_lookaheadDistance+0x3>
    3272:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
    3276:	a5 01       	movw	r20, r10
    3278:	94 01       	movw	r18, r8
    327a:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
    327e:	4b 01       	movw	r8, r22
    3280:	5c 01       	movw	r10, r24

    // extrapolate and append to array path (i.e. set path[pathLength])
    (++pathPtr)->x = (int16_t)(lastSegVec.x * relDist) + lastSegEnd.x;
    3282:	9b 01       	movw	r18, r22
    3284:	ac 01       	movw	r20, r24
    3286:	c3 01       	movw	r24, r6
    3288:	b2 01       	movw	r22, r4
    328a:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
    328e:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    3292:	60 0f       	add	r22, r16
    3294:	71 1f       	adc	r23, r17
    3296:	79 87       	std	Y+9, r23	; 0x09
    3298:	68 87       	std	Y+8, r22	; 0x08
    pathPtr->y = (int16_t)(lastSegVec.y * relDist) + lastSegEnd.y;
    329a:	a5 01       	movw	r20, r10
    329c:	94 01       	movw	r18, r8
    329e:	c7 01       	movw	r24, r14
    32a0:	b6 01       	movw	r22, r12
    32a2:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
    32a6:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    32aa:	62 0d       	add	r22, r2
    32ac:	73 1d       	adc	r23, r3
    32ae:	7b 87       	std	Y+11, r23	; 0x0b
    32b0:	6a 87       	std	Y+10, r22	; 0x0a

    return true;
    32b2:	81 e0       	ldi	r24, 0x01	; 1
}
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	ff 90       	pop	r15
    32be:	ef 90       	pop	r14
    32c0:	df 90       	pop	r13
    32c2:	cf 90       	pop	r12
    32c4:	bf 90       	pop	r11
    32c6:	af 90       	pop	r10
    32c8:	9f 90       	pop	r9
    32ca:	8f 90       	pop	r8
    32cc:	7f 90       	pop	r7
    32ce:	6f 90       	pop	r6
    32d0:	5f 90       	pop	r5
    32d2:	4f 90       	pop	r4
    32d4:	3f 90       	pop	r3
    32d6:	2f 90       	pop	r2
    32d8:	08 95       	ret
// Furthermore, it extrapolates an additional point at the end of the path
// in direction of the last path segment. The length of the extrapolated segment
// is ten times the lookahead distance.
static bool setPath(const uint8_t pathLen, const Point_t* pathPoints) {
    if (pathLen < 2)
        return false; // path is too short
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	eb cf       	rjmp	.-42     	; 0x32b4 <setPath+0x144>

000032de <commPathFollower>:

// *************************** GLOBAL FUNCTIONS ********************************

// communication callback function for channel CH_IN_PATH_FOLLOW_CTRL in order to control the
// path follower from HWPCS
void commPathFollower(const uint8_t* packet, const uint16_t size) {
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	ec 01       	movw	r28, r24
    PathFollowerControl_t* ctrl = (PathFollowerControl_t*)packet;

    if (ctrl->cmd == FOLLOWER_CMD_NEWPATH) { // if a new path was received from HWPCS
    32e4:	88 81       	ld	r24, Y
    32e6:	88 23       	and	r24, r24
    32e8:	a1 f0       	breq	.+40     	; 0x3312 <commPathFollower+0x34>
            pathFollowerErrorP("Follower: out of memory or path has too few points");
        } else {
            pathFollowerInfoP("Path of %" PRIu8 " points, 1.(%" PRIi16 ",%" PRIi16 ") 2.(%" PRIi16 ",%" PRIi16 ") ...", pathLength, path[0].x, path[0].y, path[1].x, path[1].y);
        }

    } else if (ctrl->cmd == FOLLOWER_CMD_START) {  // start command received
    32ea:	81 30       	cpi	r24, 0x01	; 1
    32ec:	09 f4       	brne	.+2      	; 0x32f0 <commPathFollower+0x12>
    32ee:	62 c0       	rjmp	.+196    	; 0x33b4 <commPathFollower+0xd6>
            pathFollowerErrorP("No path available");
        } else {
            pathFollower_status.enabled = true;
            pathFollowerInfoP("Follower started");
        }
    } else if (ctrl->cmd == FOLLOWER_CMD_PAUSE) {  // pause command received
    32f0:	82 30       	cpi	r24, 0x02	; 2
    32f2:	09 f4       	brne	.+2      	; 0x32f6 <commPathFollower+0x18>
    32f4:	52 c0       	rjmp	.+164    	; 0x339a <commPathFollower+0xbc>
        pathFollower_status.enabled = false;
        pathFollowerInfoP("Follower paused");
    } else if (ctrl->cmd == FOLLOWER_CMD_RESET) {  // reset command received
    32f6:	83 30       	cpi	r24, 0x03	; 3
    32f8:	09 f4       	brne	.+2      	; 0x32fc <commPathFollower+0x1e>
    32fa:	71 c0       	rjmp	.+226    	; 0x33de <commPathFollower+0x100>
        initialized = false;
        pathFollower_status.enabled = false;
        pathFollowerInfoP("Follower reset");
    }

    if (pathFollower_callback != 0)
    32fc:	e0 91 1e 08 	lds	r30, 0x081E	; 0x80081e <pathFollower_callback>
    3300:	f0 91 1f 08 	lds	r31, 0x081F	; 0x80081f <pathFollower_callback+0x1>
    3304:	30 97       	sbiw	r30, 0x00	; 0
    3306:	e9 f0       	breq	.+58     	; 0x3342 <commPathFollower+0x64>
        pathFollower_callback(ctrl->cmd, ctrl->pathLength);
    3308:	69 81       	ldd	r22, Y+1	; 0x01
    330a:	88 81       	ld	r24, Y
}
    330c:	df 91       	pop	r29
    330e:	cf 91       	pop	r28
        pathFollower_status.enabled = false;
        pathFollowerInfoP("Follower reset");
    }

    if (pathFollower_callback != 0)
        pathFollower_callback(ctrl->cmd, ctrl->pathLength);
    3310:	09 94       	ijmp
void commPathFollower(const uint8_t* packet, const uint16_t size) {
    PathFollowerControl_t* ctrl = (PathFollowerControl_t*)packet;

    if (ctrl->cmd == FOLLOWER_CMD_NEWPATH) { // if a new path was received from HWPCS

        if (! setPath(ctrl->pathLength, ctrl->points)) {
    3312:	be 01       	movw	r22, r28
    3314:	6e 5f       	subi	r22, 0xFE	; 254
    3316:	7f 4f       	sbci	r23, 0xFF	; 255
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	0e 94 b8 18 	call	0x3170	; 0x3170 <setPath>
    331e:	81 11       	cpse	r24, r1
    3320:	13 c0       	rjmp	.+38     	; 0x3348 <commPathFollower+0x6a>
            pathFollowerErrorP("Follower: out of memory or path has too few points");
    3322:	8b e9       	ldi	r24, 0x9B	; 155
    3324:	93 e0       	ldi	r25, 0x03	; 3
            pathFollowerInfoP("Path of %" PRIu8 " points, 1.(%" PRIi16 ",%" PRIi16 ") 2.(%" PRIi16 ",%" PRIi16 ") ...", pathLength, path[0].x, path[0].y, path[1].x, path[1].y);
        }

    } else if (ctrl->cmd == FOLLOWER_CMD_START) {  // start command received
        if (pathLength == 0) {
            pathFollowerErrorP("No path available");
    3326:	9f 93       	push	r25
    3328:	8f 93       	push	r24
    332a:	1f 92       	push	r1
    332c:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <communication_log_P>
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
        initialized = false;
        pathFollower_status.enabled = false;
        pathFollowerInfoP("Follower reset");
    }

    if (pathFollower_callback != 0)
    3336:	e0 91 1e 08 	lds	r30, 0x081E	; 0x80081e <pathFollower_callback>
    333a:	f0 91 1f 08 	lds	r31, 0x081F	; 0x80081f <pathFollower_callback+0x1>
    333e:	30 97       	sbiw	r30, 0x00	; 0
    3340:	19 f7       	brne	.-58     	; 0x3308 <commPathFollower+0x2a>
        pathFollower_callback(ctrl->cmd, ctrl->pathLength);
}
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	08 95       	ret
    if (ctrl->cmd == FOLLOWER_CMD_NEWPATH) { // if a new path was received from HWPCS

        if (! setPath(ctrl->pathLength, ctrl->points)) {
            pathFollowerErrorP("Follower: out of memory or path has too few points");
        } else {
            pathFollowerInfoP("Path of %" PRIu8 " points, 1.(%" PRIi16 ",%" PRIi16 ") 2.(%" PRIi16 ",%" PRIi16 ") ...", pathLength, path[0].x, path[0].y, path[1].x, path[1].y);
    3348:	e0 91 1c 08 	lds	r30, 0x081C	; 0x80081c <path>
    334c:	f0 91 1d 08 	lds	r31, 0x081D	; 0x80081d <path+0x1>
    3350:	87 81       	ldd	r24, Z+7	; 0x07
    3352:	8f 93       	push	r24
    3354:	86 81       	ldd	r24, Z+6	; 0x06
    3356:	8f 93       	push	r24
    3358:	85 81       	ldd	r24, Z+5	; 0x05
    335a:	8f 93       	push	r24
    335c:	84 81       	ldd	r24, Z+4	; 0x04
    335e:	8f 93       	push	r24
    3360:	83 81       	ldd	r24, Z+3	; 0x03
    3362:	8f 93       	push	r24
    3364:	82 81       	ldd	r24, Z+2	; 0x02
    3366:	8f 93       	push	r24
    3368:	81 81       	ldd	r24, Z+1	; 0x01
    336a:	8f 93       	push	r24
    336c:	80 81       	ld	r24, Z
    336e:	8f 93       	push	r24
    3370:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <pathLength>
    3374:	1f 92       	push	r1
    3376:	8f 93       	push	r24
    3378:	80 e7       	ldi	r24, 0x70	; 112
    337a:	93 e0       	ldi	r25, 0x03	; 3
    337c:	9f 93       	push	r25
    337e:	8f 93       	push	r24
    3380:	82 e0       	ldi	r24, 0x02	; 2
    3382:	8f 93       	push	r24
    3384:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <communication_log_P>
    3388:	8d b7       	in	r24, 0x3d	; 61
    338a:	9e b7       	in	r25, 0x3e	; 62
    338c:	0d 96       	adiw	r24, 0x0d	; 13
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	9e bf       	out	0x3e, r25	; 62
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	8d bf       	out	0x3d, r24	; 61
    3398:	b1 cf       	rjmp	.-158    	; 0x32fc <commPathFollower+0x1e>
        } else {
            pathFollower_status.enabled = true;
            pathFollowerInfoP("Follower started");
        }
    } else if (ctrl->cmd == FOLLOWER_CMD_PAUSE) {  // pause command received
        pathFollower_status.enabled = false;
    339a:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <pathFollower_status>
        pathFollowerInfoP("Follower paused");
    339e:	2d e3       	ldi	r18, 0x3D	; 61
    33a0:	33 e0       	ldi	r19, 0x03	; 3
    33a2:	3f 93       	push	r19
    33a4:	2f 93       	push	r18
    33a6:	8f 93       	push	r24
    33a8:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <communication_log_P>
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	a4 cf       	rjmp	.-184    	; 0x32fc <commPathFollower+0x1e>
        } else {
            pathFollowerInfoP("Path of %" PRIu8 " points, 1.(%" PRIi16 ",%" PRIi16 ") 2.(%" PRIi16 ",%" PRIi16 ") ...", pathLength, path[0].x, path[0].y, path[1].x, path[1].y);
        }

    } else if (ctrl->cmd == FOLLOWER_CMD_START) {  // start command received
        if (pathLength == 0) {
    33b4:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <pathLength>
    33b8:	91 11       	cpse	r25, r1
    33ba:	03 c0       	rjmp	.+6      	; 0x33c2 <commPathFollower+0xe4>
            pathFollowerErrorP("No path available");
    33bc:	8e e5       	ldi	r24, 0x5E	; 94
    33be:	93 e0       	ldi	r25, 0x03	; 3
    33c0:	b2 cf       	rjmp	.-156    	; 0x3326 <commPathFollower+0x48>
        } else {
            pathFollower_status.enabled = true;
    33c2:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <pathFollower_status>
            pathFollowerInfoP("Follower started");
    33c6:	8d e4       	ldi	r24, 0x4D	; 77
    33c8:	93 e0       	ldi	r25, 0x03	; 3
        pathFollowerInfoP("Follower paused");
    } else if (ctrl->cmd == FOLLOWER_CMD_RESET) {  // reset command received
        curSeg = -1;
        initialized = false;
        pathFollower_status.enabled = false;
        pathFollowerInfoP("Follower reset");
    33ca:	9f 93       	push	r25
    33cc:	8f 93       	push	r24
    33ce:	82 e0       	ldi	r24, 0x02	; 2
    33d0:	8f 93       	push	r24
    33d2:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <communication_log_P>
    33d6:	0f 90       	pop	r0
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	8f cf       	rjmp	.-226    	; 0x32fc <commPathFollower+0x1e>
        }
    } else if (ctrl->cmd == FOLLOWER_CMD_PAUSE) {  // pause command received
        pathFollower_status.enabled = false;
        pathFollowerInfoP("Follower paused");
    } else if (ctrl->cmd == FOLLOWER_CMD_RESET) {  // reset command received
        curSeg = -1;
    33de:	8f ef       	ldi	r24, 0xFF	; 255
    33e0:	9f ef       	ldi	r25, 0xFF	; 255
    33e2:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <curSeg+0x1>
    33e6:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <curSeg>
        initialized = false;
    33ea:	10 92 1a 08 	sts	0x081A, r1	; 0x80081a <initialized>
        pathFollower_status.enabled = false;
    33ee:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <pathFollower_status>
        pathFollowerInfoP("Follower reset");
    33f2:	8e e2       	ldi	r24, 0x2E	; 46
    33f4:	93 e0       	ldi	r25, 0x03	; 3
    33f6:	e9 cf       	rjmp	.-46     	; 0x33ca <commPathFollower+0xec>

000033f8 <pathFollower_init>:
    33f8:	ec ea       	ldi	r30, 0xAC	; 172
    33fa:	fd e0       	ldi	r31, 0x0D	; 13
    33fc:	8f e6       	ldi	r24, 0x6F	; 111
    33fe:	99 e1       	ldi	r25, 0x19	; 25
    3400:	97 83       	std	Z+7, r25	; 0x07
    3402:	86 83       	std	Z+6, r24	; 0x06
    3404:	8c e9       	ldi	r24, 0x9C	; 156
    3406:	98 e1       	ldi	r25, 0x18	; 24
    3408:	91 87       	std	Z+9, r25	; 0x09
    340a:	80 87       	std	Z+8, r24	; 0x08
    340c:	08 95       	ret

0000340e <pathFollower_setNewPath>:
	communication_setCallback(CH_IN_PATH_FOLLOW_PARAMS, commPathFollowerParameters);
}


// manually set a new path for the path follower
bool pathFollower_setNewPath(const Path_t* new_path) {
    340e:	cf 93       	push	r28
    3410:	df 93       	push	r29
    3412:	ec 01       	movw	r28, r24
    pathFollowerInfoP("Path of %" PRIu8 " points, 1.(%" PRIi16 ",%" PRIi16 ") 2.(%" PRIi16 ",%" PRIi16 ") ...", new_path->pathLength, new_path->points[0].x, new_path->points[0].y, new_path->points[1].x, new_path->points[1].y);
    3414:	e9 81       	ldd	r30, Y+1	; 0x01
    3416:	fa 81       	ldd	r31, Y+2	; 0x02
    3418:	87 81       	ldd	r24, Z+7	; 0x07
    341a:	8f 93       	push	r24
    341c:	86 81       	ldd	r24, Z+6	; 0x06
    341e:	8f 93       	push	r24
    3420:	85 81       	ldd	r24, Z+5	; 0x05
    3422:	8f 93       	push	r24
    3424:	84 81       	ldd	r24, Z+4	; 0x04
    3426:	8f 93       	push	r24
    3428:	83 81       	ldd	r24, Z+3	; 0x03
    342a:	8f 93       	push	r24
    342c:	82 81       	ldd	r24, Z+2	; 0x02
    342e:	8f 93       	push	r24
    3430:	81 81       	ldd	r24, Z+1	; 0x01
    3432:	8f 93       	push	r24
    3434:	80 81       	ld	r24, Z
    3436:	8f 93       	push	r24
    3438:	88 81       	ld	r24, Y
    343a:	1f 92       	push	r1
    343c:	8f 93       	push	r24
    343e:	8b ee       	ldi	r24, 0xEB	; 235
    3440:	92 e0       	ldi	r25, 0x02	; 2
    3442:	9f 93       	push	r25
    3444:	8f 93       	push	r24
    3446:	82 e0       	ldi	r24, 0x02	; 2
    3448:	8f 93       	push	r24
    344a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <communication_log_P>
    return setPath(new_path->pathLength, new_path->points);
    344e:	8d b7       	in	r24, 0x3d	; 61
    3450:	9e b7       	in	r25, 0x3e	; 62
    3452:	0d 96       	adiw	r24, 0x0d	; 13
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	9e bf       	out	0x3e, r25	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	8d bf       	out	0x3d, r24	; 61
    345e:	69 81       	ldd	r22, Y+1	; 0x01
    3460:	7a 81       	ldd	r23, Y+2	; 0x02
    3462:	88 81       	ld	r24, Y
}
    3464:	df 91       	pop	r29
    3466:	cf 91       	pop	r28


// manually set a new path for the path follower
bool pathFollower_setNewPath(const Path_t* new_path) {
    pathFollowerInfoP("Path of %" PRIu8 " points, 1.(%" PRIi16 ",%" PRIi16 ") 2.(%" PRIi16 ",%" PRIi16 ") ...", new_path->pathLength, new_path->points[0].x, new_path->points[0].y, new_path->points[1].x, new_path->points[1].y);
    return setPath(new_path->pathLength, new_path->points);
    3468:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <setPath>

0000346c <pathFollower_command>:
}


// manually start, pause or reset the path follower
void pathFollower_command(const PathFollowerCommand_t cmd) {
    switch (cmd) {
    346c:	82 30       	cpi	r24, 0x02	; 2
    346e:	69 f0       	breq	.+26     	; 0x348a <pathFollower_command+0x1e>
    3470:	83 30       	cpi	r24, 0x03	; 3
    3472:	19 f0       	breq	.+6      	; 0x347a <pathFollower_command+0xe>
    3474:	81 30       	cpi	r24, 0x01	; 1
    3476:	61 f0       	breq	.+24     	; 0x3490 <pathFollower_command+0x24>
    3478:	08 95       	ret
        break;
    case FOLLOWER_CMD_PAUSE:  // pause command
        pathFollower_status.enabled = false;
        break;
    case FOLLOWER_CMD_RESET:  // reset command
        curSeg = -1;
    347a:	8f ef       	ldi	r24, 0xFF	; 255
    347c:	9f ef       	ldi	r25, 0xFF	; 255
    347e:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <curSeg+0x1>
    3482:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <curSeg>
        initialized = false;
    3486:	10 92 1a 08 	sts	0x081A, r1	; 0x80081a <initialized>
        pathFollower_status.enabled = false;
    348a:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <pathFollower_status>
    348e:	08 95       	ret

// manually start, pause or reset the path follower
void pathFollower_command(const PathFollowerCommand_t cmd) {
    switch (cmd) {
    case FOLLOWER_CMD_START:  // start command
        if (pathLength > 0)
    3490:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <pathLength>
    3494:	99 23       	and	r25, r25
    3496:	81 f3       	breq	.-32     	; 0x3478 <pathFollower_command+0xc>
            pathFollower_status.enabled = true;
    3498:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <pathFollower_status>
    349c:	08 95       	ret

0000349e <pathFollower_update>:
    }
}


// compute a new lookahead point, call this function periodically from main loop
bool pathFollower_update(const Pose_t* currentPose) {
    349e:	2f 92       	push	r2
    34a0:	3f 92       	push	r3
    34a2:	4f 92       	push	r4
    34a4:	5f 92       	push	r5
    34a6:	6f 92       	push	r6
    34a8:	7f 92       	push	r7
    34aa:	8f 92       	push	r8
    34ac:	9f 92       	push	r9
    34ae:	af 92       	push	r10
    34b0:	bf 92       	push	r11
    34b2:	cf 92       	push	r12
    34b4:	df 92       	push	r13
    34b6:	ef 92       	push	r14
    34b8:	ff 92       	push	r15
    34ba:	0f 93       	push	r16
    34bc:	1f 93       	push	r17
    34be:	cf 93       	push	r28
    34c0:	df 93       	push	r29
    34c2:	cd b7       	in	r28, 0x3d	; 61
    34c4:	de b7       	in	r29, 0x3e	; 62
    34c6:	ed 97       	sbiw	r28, 0x3d	; 61
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	f8 94       	cli
    34cc:	de bf       	out	0x3e, r29	; 62
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	cd bf       	out	0x3d, r28	; 61
    // exit if following is disabled
    if (! pathFollower_status.enabled)
    34d2:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <pathFollower_status>
    34d6:	2f a7       	std	Y+47, r18	; 0x2f
    34d8:	22 23       	and	r18, r18
    34da:	09 f4       	brne	.+2      	; 0x34de <pathFollower_update+0x40>
    34dc:	38 c2       	rjmp	.+1136   	; 0x394e <pathFollower_update+0x4b0>
    34de:	fc 01       	movw	r30, r24
        return false;

    // copy current position into local variable, allows for large code optimization
    FPoint_t currentPos = { currentPose->x, currentPose->y };
    34e0:	80 81       	ld	r24, Z
    34e2:	91 81       	ldd	r25, Z+1	; 0x01
    34e4:	a2 81       	ldd	r26, Z+2	; 0x02
    34e6:	b3 81       	ldd	r27, Z+3	; 0x03
    34e8:	89 a3       	std	Y+33, r24	; 0x21
    34ea:	9a a3       	std	Y+34, r25	; 0x22
    34ec:	ab a3       	std	Y+35, r26	; 0x23
    34ee:	bc a3       	std	Y+36, r27	; 0x24
    34f0:	24 81       	ldd	r18, Z+4	; 0x04
    34f2:	35 81       	ldd	r19, Z+5	; 0x05
    34f4:	46 81       	ldd	r20, Z+6	; 0x06
    34f6:	57 81       	ldd	r21, Z+7	; 0x07
    34f8:	2d a3       	std	Y+37, r18	; 0x25
    34fa:	3e a3       	std	Y+38, r19	; 0x26
    34fc:	4f a3       	std	Y+39, r20	; 0x27
    34fe:	58 a7       	std	Y+40, r21	; 0x28

    // Step 0: Initialization

    // if this is the first time, pathFollower_update() was called after either
    // reset or a path has been set
    if (! initialized) {
    3500:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <initialized>
    3504:	88 23       	and	r24, r24
    3506:	09 f4       	brne	.+2      	; 0x350a <pathFollower_update+0x6c>
    3508:	3c c2       	rjmp	.+1144   	; 0x3982 <pathFollower_update+0x4e4>
    350a:	40 91 1c 08 	lds	r20, 0x081C	; 0x80081c <path>
    350e:	50 91 1d 08 	lds	r21, 0x081D	; 0x80081d <path+0x1>
    3512:	5e 8b       	std	Y+22, r21	; 0x16
    3514:	4d 8b       	std	Y+21, r20	; 0x15
    3516:	a0 90 21 08 	lds	r10, 0x0821	; 0x800821 <pathFollower_status+0x1>
    351a:	b0 90 22 08 	lds	r11, 0x0822	; 0x800822 <pathFollower_status+0x2>
    351e:	80 90 23 08 	lds	r8, 0x0823	; 0x800823 <pathFollower_status+0x3>
    3522:	90 90 24 08 	lds	r9, 0x0824	; 0x800824 <pathFollower_status+0x4>
    3526:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <curSegVec+0x4>
    352a:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <curSegVec+0x5>
    352e:	a0 91 18 08 	lds	r26, 0x0818	; 0x800818 <curSegVec+0x6>
    3532:	b0 91 19 08 	lds	r27, 0x0819	; 0x800819 <curSegVec+0x7>
    3536:	8d 83       	std	Y+5, r24	; 0x05
    3538:	9e 83       	std	Y+6, r25	; 0x06
    353a:	af 83       	std	Y+7, r26	; 0x07
    353c:	b8 87       	std	Y+8, r27	; 0x08
    353e:	20 91 12 08 	lds	r18, 0x0812	; 0x800812 <curSegVec>
    3542:	30 91 13 08 	lds	r19, 0x0813	; 0x800813 <curSegVec+0x1>
    3546:	40 91 14 08 	lds	r20, 0x0814	; 0x800814 <curSegVec+0x2>
    354a:	50 91 15 08 	lds	r21, 0x0815	; 0x800815 <curSegVec+0x3>
    354e:	29 83       	std	Y+1, r18	; 0x01
    3550:	3a 83       	std	Y+2, r19	; 0x02
    3552:	4b 83       	std	Y+3, r20	; 0x03
    3554:	5c 83       	std	Y+4, r21	; 0x04
    3556:	40 90 0e 08 	lds	r4, 0x080E	; 0x80080e <curSegLenSq>
    355a:	50 90 0f 08 	lds	r5, 0x080F	; 0x80080f <curSegLenSq+0x1>
    355e:	60 90 10 08 	lds	r6, 0x0810	; 0x800810 <curSegLenSq+0x2>
    3562:	70 90 11 08 	lds	r7, 0x0811	; 0x800811 <curSegLenSq+0x3>
    3566:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <nextSegVec+0x4>
    356a:	90 91 03 08 	lds	r25, 0x0803	; 0x800803 <nextSegVec+0x5>
    356e:	a0 91 04 08 	lds	r26, 0x0804	; 0x800804 <nextSegVec+0x6>
    3572:	b0 91 05 08 	lds	r27, 0x0805	; 0x800805 <nextSegVec+0x7>
    3576:	89 8b       	std	Y+17, r24	; 0x11
    3578:	9a 8b       	std	Y+18, r25	; 0x12
    357a:	ab 8b       	std	Y+19, r26	; 0x13
    357c:	bc 8b       	std	Y+20, r27	; 0x14
    357e:	20 91 fe 07 	lds	r18, 0x07FE	; 0x8007fe <nextSegVec>
    3582:	30 91 ff 07 	lds	r19, 0x07FF	; 0x8007ff <nextSegVec+0x1>
    3586:	40 91 00 08 	lds	r20, 0x0800	; 0x800800 <nextSegVec+0x2>
    358a:	50 91 01 08 	lds	r21, 0x0801	; 0x800801 <nextSegVec+0x3>
    358e:	2d 87       	std	Y+13, r18	; 0x0d
    3590:	3e 87       	std	Y+14, r19	; 0x0e
    3592:	4f 87       	std	Y+15, r20	; 0x0f
    3594:	58 8b       	std	Y+16, r21	; 0x10
    3596:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <nextSegLenSq>
    359a:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <nextSegLenSq+0x1>
    359e:	a0 91 fc 07 	lds	r26, 0x07FC	; 0x8007fc <nextSegLenSq+0x2>
    35a2:	b0 91 fd 07 	lds	r27, 0x07FD	; 0x8007fd <nextSegLenSq+0x3>
    35a6:	89 8f       	std	Y+25, r24	; 0x19
    35a8:	9a 8f       	std	Y+26, r25	; 0x1a
    35aa:	ab 8f       	std	Y+27, r26	; 0x1b
    35ac:	bc 8f       	std	Y+28, r27	; 0x1c
    35ae:	c0 90 06 08 	lds	r12, 0x0806	; 0x800806 <nextSegEnd>
    35b2:	d0 90 07 08 	lds	r13, 0x0807	; 0x800807 <nextSegEnd+0x1>
    35b6:	a0 91 08 08 	lds	r26, 0x0808	; 0x800808 <nextSegEnd+0x2>
    35ba:	b0 91 09 08 	lds	r27, 0x0809	; 0x800809 <nextSegEnd+0x3>
    35be:	bb af       	std	Y+59, r27	; 0x3b
    35c0:	aa af       	std	Y+58, r26	; 0x3a

    // Step 1: Find the segment with smallest (squared) distance between current
    //         position and orthogonal projection

    // compute vector ECur from start of current segment to current position
    FPoint_t ECur = { currentPos.x - pathFollower_status.segStart.x, currentPos.y - pathFollower_status.segStart.y };
    35c2:	b5 01       	movw	r22, r10
    35c4:	bb 0c       	add	r11, r11
    35c6:	88 0b       	sbc	r24, r24
    35c8:	99 0b       	sbc	r25, r25
    35ca:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    35ce:	9b 01       	movw	r18, r22
    35d0:	ac 01       	movw	r20, r24
    35d2:	69 a1       	ldd	r22, Y+33	; 0x21
    35d4:	7a a1       	ldd	r23, Y+34	; 0x22
    35d6:	8b a1       	ldd	r24, Y+35	; 0x23
    35d8:	9c a1       	ldd	r25, Y+36	; 0x24
    35da:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    35de:	69 87       	std	Y+9, r22	; 0x09
    35e0:	7a 87       	std	Y+10, r23	; 0x0a
    35e2:	8b 87       	std	Y+11, r24	; 0x0b
    35e4:	9c 87       	std	Y+12, r25	; 0x0c
    35e6:	b4 01       	movw	r22, r8
    35e8:	99 0c       	add	r9, r9
    35ea:	88 0b       	sbc	r24, r24
    35ec:	99 0b       	sbc	r25, r25
    35ee:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    35f2:	9b 01       	movw	r18, r22
    35f4:	ac 01       	movw	r20, r24
    35f6:	6d a1       	ldd	r22, Y+37	; 0x25
    35f8:	7e a1       	ldd	r23, Y+38	; 0x26
    35fa:	8f a1       	ldd	r24, Y+39	; 0x27
    35fc:	98 a5       	ldd	r25, Y+40	; 0x28
    35fe:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    3602:	4b 01       	movw	r8, r22
    3604:	5c 01       	movw	r10, r24

    float
        // compute dot product between vector ECur and vector P of current segment
        // equivalent to P_dot_ECur = curSegVec.x * ECur.x + curSegVec.y * ECur.y, but more accurate
        P_dot_ECur = fmaf(curSegVec.x, ECur.x, curSegVec.y * ECur.y),
    3606:	2d 81       	ldd	r18, Y+5	; 0x05
    3608:	3e 81       	ldd	r19, Y+6	; 0x06
    360a:	4f 81       	ldd	r20, Y+7	; 0x07
    360c:	58 85       	ldd	r21, Y+8	; 0x08
    360e:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
    3612:	7b 01       	movw	r14, r22
    3614:	8c 01       	movw	r16, r24
    3616:	29 85       	ldd	r18, Y+9	; 0x09
    3618:	3a 85       	ldd	r19, Y+10	; 0x0a
    361a:	4b 85       	ldd	r20, Y+11	; 0x0b
    361c:	5c 85       	ldd	r21, Y+12	; 0x0c
    361e:	69 81       	ldd	r22, Y+1	; 0x01
    3620:	7a 81       	ldd	r23, Y+2	; 0x02
    3622:	8b 81       	ldd	r24, Y+3	; 0x03
    3624:	9c 81       	ldd	r25, Y+4	; 0x04
    3626:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>

        // compute relative distance lCur (w.r.t. to current segment length) of
        // the orthogonal projection of the current position onto the current segment
        lCur = P_dot_ECur / curSegLenSq,
    362a:	a3 01       	movw	r20, r6
    362c:	92 01       	movw	r18, r4
    362e:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
    3632:	6b a7       	std	Y+43, r22	; 0x2b
    3634:	7c a7       	std	Y+44, r23	; 0x2c
    3636:	8d a7       	std	Y+45, r24	; 0x2d
    3638:	9e a7       	std	Y+46, r25	; 0x2e
        //   1. compute point OP of orthogonal projection: OP = pointVec(curSegVec, lCur, pathFollower_status.segStart)
        //   2. compute vector between OP and current position: vecOP_CP = OP - currentPos
        //   3. compute squared distance between OP and current position: sqLen(vecOP_CP)
        // and initialize minDist, holding the minimum squared distance between an
        // orthogonal projection onto a path segment
        minDist = sqLenPointVecF(curSegVec, -lCur, ECur);
    363a:	2b 01       	movw	r4, r22
    363c:	3c 01       	movw	r6, r24
    363e:	77 fa       	bst	r7, 7
    3640:	70 94       	com	r7
    3642:	77 f8       	bld	r7, 7
    3644:	70 94       	com	r7
}


// similar to sqLen(pointVec(vec, l, start))
static inline float sqLenPointVecF(FPoint_t vec, float l, FPoint_t start) {
    return square(fmaf(vec.x, l, start.x)) + square(fmaf(vec.y, l, start.y));
    3646:	e9 84       	ldd	r14, Y+9	; 0x09
    3648:	fa 84       	ldd	r15, Y+10	; 0x0a
    364a:	0b 85       	ldd	r16, Y+11	; 0x0b
    364c:	1c 85       	ldd	r17, Y+12	; 0x0c
    364e:	a3 01       	movw	r20, r6
    3650:	92 01       	movw	r18, r4
    3652:	69 81       	ldd	r22, Y+1	; 0x01
    3654:	7a 81       	ldd	r23, Y+2	; 0x02
    3656:	8b 81       	ldd	r24, Y+3	; 0x03
    3658:	9c 81       	ldd	r25, Y+4	; 0x04
    365a:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>
    365e:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    3662:	6d 8f       	std	Y+29, r22	; 0x1d
    3664:	7e 8f       	std	Y+30, r23	; 0x1e
    3666:	8f 8f       	std	Y+31, r24	; 0x1f
    3668:	98 a3       	std	Y+32, r25	; 0x20
    366a:	85 01       	movw	r16, r10
    366c:	74 01       	movw	r14, r8
    366e:	a3 01       	movw	r20, r6
    3670:	92 01       	movw	r18, r4
    3672:	6d 81       	ldd	r22, Y+5	; 0x05
    3674:	7e 81       	ldd	r23, Y+6	; 0x06
    3676:	8f 81       	ldd	r24, Y+7	; 0x07
    3678:	98 85       	ldd	r25, Y+8	; 0x08
    367a:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>
    367e:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    3682:	9b 01       	movw	r18, r22
    3684:	ac 01       	movw	r20, r24
    3686:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3688:	7e 8d       	ldd	r23, Y+30	; 0x1e
    368a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    368c:	98 a1       	ldd	r25, Y+32	; 0x20
    368e:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
    3692:	68 ab       	std	Y+48, r22	; 0x30
    3694:	79 ab       	std	Y+49, r23	; 0x31
    3696:	8a ab       	std	Y+50, r24	; 0x32
    3698:	9b ab       	std	Y+51, r25	; 0x33

    // compute vector ENext from start of next segment to current position
    // Note that the following is equal to:
    //   FPoint_t ENext = { currentPos.x - pathFollower_status.segEnd.x, currentPos.y - pathFollower_status.segEnd.y };
    // but produces smaller code
    FPoint_t ENext = { ECur.x - curSegVec.x, ECur.y - curSegVec.y };
    369a:	29 81       	ldd	r18, Y+1	; 0x01
    369c:	3a 81       	ldd	r19, Y+2	; 0x02
    369e:	4b 81       	ldd	r20, Y+3	; 0x03
    36a0:	5c 81       	ldd	r21, Y+4	; 0x04
    36a2:	69 85       	ldd	r22, Y+9	; 0x09
    36a4:	7a 85       	ldd	r23, Y+10	; 0x0a
    36a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    36a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    36aa:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    36ae:	2b 01       	movw	r4, r22
    36b0:	3c 01       	movw	r6, r24
    36b2:	2d 81       	ldd	r18, Y+5	; 0x05
    36b4:	3e 81       	ldd	r19, Y+6	; 0x06
    36b6:	4f 81       	ldd	r20, Y+7	; 0x07
    36b8:	58 85       	ldd	r21, Y+8	; 0x08
    36ba:	c5 01       	movw	r24, r10
    36bc:	b4 01       	movw	r22, r8
    36be:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    36c2:	4b 01       	movw	r8, r22
    36c4:	5c 01       	movw	r10, r24

    float
        // compute dot product between vector ENext and vector P of next segment
        // equivalent to P_dot_ENext = nextSegVec.x * ENext.x + nextSegVec.y * ENext.y, but more accurate
        P_dot_ENext = fmaf(nextSegVec.x, ENext.x, nextSegVec.y * ENext.y),
    36c6:	29 89       	ldd	r18, Y+17	; 0x11
    36c8:	3a 89       	ldd	r19, Y+18	; 0x12
    36ca:	4b 89       	ldd	r20, Y+19	; 0x13
    36cc:	5c 89       	ldd	r21, Y+20	; 0x14
    36ce:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
    36d2:	7b 01       	movw	r14, r22
    36d4:	8c 01       	movw	r16, r24
    36d6:	a3 01       	movw	r20, r6
    36d8:	92 01       	movw	r18, r4
    36da:	6d 85       	ldd	r22, Y+13	; 0x0d
    36dc:	7e 85       	ldd	r23, Y+14	; 0x0e
    36de:	8f 85       	ldd	r24, Y+15	; 0x0f
    36e0:	98 89       	ldd	r25, Y+16	; 0x10
    36e2:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>

        // compute relative distance lNext (w.r.t. to next segment length) of
        // the orthogonal projection of the current position onto the next segment
        lNext = P_dot_ENext / nextSegLenSq;
    36e6:	29 8d       	ldd	r18, Y+25	; 0x19
    36e8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    36ea:	4b 8d       	ldd	r20, Y+27	; 0x1b
    36ec:	5c 8d       	ldd	r21, Y+28	; 0x1c
    36ee:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
    36f2:	6e ab       	std	Y+54, r22	; 0x36
    36f4:	7f ab       	std	Y+55, r23	; 0x37
    36f6:	88 af       	std	Y+56, r24	; 0x38
    36f8:	99 af       	std	Y+57, r25	; 0x39

    //communication_log(LEVEL_FINE, "%.3f %.3f", lCur, lNext);

    // initialize minSeg with the current segment index
    // minSeg holds the segment index with smallest squared distance minDist
    int16_t minSeg = curSeg;
    36fa:	a0 91 33 02 	lds	r26, 0x0233	; 0x800233 <curSeg>
    36fe:	b0 91 34 02 	lds	r27, 0x0234	; 0x800234 <curSeg+0x1>
    3702:	bd ab       	std	Y+53, r27	; 0x35
    3704:	ac ab       	std	Y+52, r26	; 0x34


    // if the orthogonal projection of the current position onto the next segment
    // is located on that segment
    if ((lNext >= 0.0f) && (lNext <= 1.0f)) {
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	a9 01       	movw	r20, r18
    370c:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    3710:	87 fd       	sbrc	r24, 7
    3712:	61 c3       	rjmp	.+1730   	; 0x3dd6 <pathFollower_update+0x938>
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	40 e8       	ldi	r20, 0x80	; 128
    371a:	5f e3       	ldi	r21, 0x3F	; 63
    371c:	6e a9       	ldd	r22, Y+54	; 0x36
    371e:	7f a9       	ldd	r23, Y+55	; 0x37
    3720:	88 ad       	ldd	r24, Y+56	; 0x38
    3722:	99 ad       	ldd	r25, Y+57	; 0x39
    3724:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
    3728:	18 16       	cp	r1, r24
    372a:	0c f0       	brlt	.+2      	; 0x372e <pathFollower_update+0x290>
    372c:	c1 c4       	rjmp	.+2434   	; 0x40b0 <pathFollower_update+0xc12>
    372e:	2c a8       	ldd	r2, Y+52	; 0x34
    3730:	3d a8       	ldd	r3, Y+53	; 0x35
    3732:	ff ef       	ldi	r31, 0xFF	; 255
    3734:	2f 1a       	sub	r2, r31
    3736:	3f 0a       	sbc	r3, r31

    //communication_log(LEVEL_FINE, "%.3f %.3f", lCur, lNext);

    // initialize minSeg with the current segment index
    // minSeg holds the segment index with smallest squared distance minDist
    int16_t minSeg = curSeg;
    3738:	2c a9       	ldd	r18, Y+52	; 0x34
    373a:	3d a9       	ldd	r19, Y+53	; 0x35
    373c:	3a a7       	std	Y+42, r19	; 0x2a
    373e:	29 a7       	std	Y+41, r18	; 0x29
    // segStart holds the start of the segment considered
    Point_t segStart = nextSegEnd;
    // seg is the segment index (start point of segment path[seg])
    int16_t seg = curSeg + 1;
    // pointer in array path for reading out the segment's end point
    Point_t *pathPtr = &path[seg + 1];
    3740:	c1 01       	movw	r24, r2
    3742:	01 96       	adiw	r24, 0x01	; 1
    3744:	88 0f       	add	r24, r24
    3746:	99 1f       	adc	r25, r25
    3748:	88 0f       	add	r24, r24
    374a:	99 1f       	adc	r25, r25
    374c:	ed 89       	ldd	r30, Y+21	; 0x15
    374e:	fe 89       	ldd	r31, Y+22	; 0x16
    3750:	e8 0f       	add	r30, r24
    3752:	f9 1f       	adc	r31, r25
    3754:	fe 83       	std	Y+6, r31	; 0x06
    3756:	ed 83       	std	Y+5, r30	; 0x05
    3758:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <pathFollower_segmentLimit>
    375c:	fd 8f       	std	Y+29, r31	; 0x1d
    375e:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <pathLength>
    3762:	28 2f       	mov	r18, r24
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	3a 8f       	std	Y+26, r19	; 0x1a
    3768:	29 8f       	std	Y+25, r18	; 0x19

    // counter for comparison with pathFollower_segmentLimit
    // initialization with zero means that we covered already the check of the
    // segment defined by nextSegVec and nextSegEnd from before
    uint8_t i = 0;
    376a:	19 82       	std	Y+1, r1	; 0x01
    376c:	4d 81       	ldd	r20, Y+5	; 0x05
    376e:	5e 81       	ldd	r21, Y+6	; 0x06
    3770:	5d af       	std	Y+61, r21	; 0x3d
    3772:	4c af       	std	Y+60, r20	; 0x3c
    3774:	0a ad       	ldd	r16, Y+58	; 0x3a
    3776:	1b ad       	ldd	r17, Y+59	; 0x3b
    while ((++i < pathFollower_segmentLimit) && (++seg < pathLength)) {
    3778:	04 c0       	rjmp	.+8      	; 0x3782 <pathFollower_update+0x2e4>
    377a:	cd 84       	ldd	r12, Y+13	; 0x0d
    377c:	de 84       	ldd	r13, Y+14	; 0x0e
    377e:	09 85       	ldd	r16, Y+9	; 0x09
    3780:	1a 85       	ldd	r17, Y+10	; 0x0a
    3782:	f9 81       	ldd	r31, Y+1	; 0x01
    3784:	ff 5f       	subi	r31, 0xFF	; 255
    3786:	f9 83       	std	Y+1, r31	; 0x01
    3788:	2d 8d       	ldd	r18, Y+29	; 0x1d
    378a:	f2 17       	cp	r31, r18
    378c:	08 f0       	brcs	.+2      	; 0x3790 <pathFollower_update+0x2f2>
    378e:	03 c2       	rjmp	.+1030   	; 0x3b96 <pathFollower_update+0x6f8>
    3790:	3f ef       	ldi	r19, 0xFF	; 255
    3792:	23 1a       	sub	r2, r19
    3794:	33 0a       	sbc	r3, r19
    3796:	49 8d       	ldd	r20, Y+25	; 0x19
    3798:	5a 8d       	ldd	r21, Y+26	; 0x1a
    379a:	24 16       	cp	r2, r20
    379c:	35 06       	cpc	r3, r21
    379e:	0c f0       	brlt	.+2      	; 0x37a2 <pathFollower_update+0x304>
    37a0:	fa c1       	rjmp	.+1012   	; 0x3b96 <pathFollower_update+0x6f8>
        // get end of segment
        Point_t segEnd = *++pathPtr;
    37a2:	8c ad       	ldd	r24, Y+60	; 0x3c
    37a4:	9d ad       	ldd	r25, Y+61	; 0x3d
    37a6:	04 96       	adiw	r24, 0x04	; 4
    37a8:	9d af       	std	Y+61, r25	; 0x3d
    37aa:	8c af       	std	Y+60, r24	; 0x3c
    37ac:	dc 01       	movw	r26, r24
    37ae:	0d 90       	ld	r0, X+
    37b0:	bc 91       	ld	r27, X
    37b2:	a0 2d       	mov	r26, r0
    37b4:	be 87       	std	Y+14, r27	; 0x0e
    37b6:	ad 87       	std	Y+13, r26	; 0x0d
    37b8:	fc 01       	movw	r30, r24
    37ba:	02 80       	ldd	r0, Z+2	; 0x02
    37bc:	f3 81       	ldd	r31, Z+3	; 0x03
    37be:	e0 2d       	mov	r30, r0
    37c0:	fa 87       	std	Y+10, r31	; 0x0a
    37c2:	e9 87       	std	Y+9, r30	; 0x09

        // compute segment vector as (end point - start point)
        FPoint_t vec = { segEnd.x - segStart.x, segEnd.y - segStart.y };
    37c4:	bd 01       	movw	r22, r26
    37c6:	6c 19       	sub	r22, r12
    37c8:	7d 09       	sbc	r23, r13
    37ca:	07 2e       	mov	r0, r23
    37cc:	00 0c       	add	r0, r0
    37ce:	88 0b       	sbc	r24, r24
    37d0:	99 0b       	sbc	r25, r25
    37d2:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    37d6:	4b 01       	movw	r8, r22
    37d8:	5c 01       	movw	r10, r24
    37da:	69 85       	ldd	r22, Y+9	; 0x09
    37dc:	7a 85       	ldd	r23, Y+10	; 0x0a
    37de:	60 1b       	sub	r22, r16
    37e0:	71 0b       	sbc	r23, r17
    37e2:	07 2e       	mov	r0, r23
    37e4:	00 0c       	add	r0, r0
    37e6:	88 0b       	sbc	r24, r24
    37e8:	99 0b       	sbc	r25, r25
    37ea:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    37ee:	6d 83       	std	Y+5, r22	; 0x05
    37f0:	7e 83       	std	Y+6, r23	; 0x06
    37f2:	8f 83       	std	Y+7, r24	; 0x07
    37f4:	98 87       	std	Y+8, r25	; 0x08

        // compute vector E from start of segment to current position
        FPoint_t E = { currentPos.x - segStart.x, currentPos.y - segStart.y };
    37f6:	b6 01       	movw	r22, r12
    37f8:	dd 0c       	add	r13, r13
    37fa:	88 0b       	sbc	r24, r24
    37fc:	99 0b       	sbc	r25, r25
    37fe:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3802:	9b 01       	movw	r18, r22
    3804:	ac 01       	movw	r20, r24
    3806:	69 a1       	ldd	r22, Y+33	; 0x21
    3808:	7a a1       	ldd	r23, Y+34	; 0x22
    380a:	8b a1       	ldd	r24, Y+35	; 0x23
    380c:	9c a1       	ldd	r25, Y+36	; 0x24
    380e:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    3812:	69 8b       	std	Y+17, r22	; 0x11
    3814:	7a 8b       	std	Y+18, r23	; 0x12
    3816:	8b 8b       	std	Y+19, r24	; 0x13
    3818:	9c 8b       	std	Y+20, r25	; 0x14
    381a:	b8 01       	movw	r22, r16
    381c:	11 0f       	add	r17, r17
    381e:	88 0b       	sbc	r24, r24
    3820:	99 0b       	sbc	r25, r25
    3822:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3826:	9b 01       	movw	r18, r22
    3828:	ac 01       	movw	r20, r24
    382a:	6d a1       	ldd	r22, Y+37	; 0x25
    382c:	7e a1       	ldd	r23, Y+38	; 0x26
    382e:	8f a1       	ldd	r24, Y+39	; 0x27
    3830:	98 a5       	ldd	r25, Y+40	; 0x28
    3832:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    3836:	6d 8b       	std	Y+21, r22	; 0x15
    3838:	7e 8b       	std	Y+22, r23	; 0x16
    383a:	8f 8b       	std	Y+23, r24	; 0x17
    383c:	98 8f       	std	Y+24, r25	; 0x18
        float
            // compute dot product between vector E and vector P of segment
            // equivalent to P_dot_E = vec.x * E.x + vec.y * E.y, but more accurate
            P_dot_E = fmaf(vec.x, E.x, vec.y * E.y),
    383e:	9b 01       	movw	r18, r22
    3840:	ac 01       	movw	r20, r24
    3842:	6d 81       	ldd	r22, Y+5	; 0x05
    3844:	7e 81       	ldd	r23, Y+6	; 0x06
    3846:	8f 81       	ldd	r24, Y+7	; 0x07
    3848:	98 85       	ldd	r25, Y+8	; 0x08
    384a:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
    384e:	7b 01       	movw	r14, r22
    3850:	8c 01       	movw	r16, r24
    3852:	29 89       	ldd	r18, Y+17	; 0x11
    3854:	3a 89       	ldd	r19, Y+18	; 0x12
    3856:	4b 89       	ldd	r20, Y+19	; 0x13
    3858:	5c 89       	ldd	r21, Y+20	; 0x14
    385a:	c5 01       	movw	r24, r10
    385c:	b4 01       	movw	r22, r8
    385e:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>
    3862:	6b 01       	movw	r12, r22
    3864:	7c 01       	movw	r14, r24

// *************************** LOCAL FUNCTIONS *********************************

// compute squared length of a vector
static inline float sqLen(const FPoint_t vec) {
    return square(vec.x) + square(vec.y);
    3866:	c5 01       	movw	r24, r10
    3868:	b4 01       	movw	r22, r8
    386a:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    386e:	2b 01       	movw	r4, r22
    3870:	3c 01       	movw	r6, r24
    3872:	6d 81       	ldd	r22, Y+5	; 0x05
    3874:	7e 81       	ldd	r23, Y+6	; 0x06
    3876:	8f 81       	ldd	r24, Y+7	; 0x07
    3878:	98 85       	ldd	r25, Y+8	; 0x08
    387a:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    387e:	9b 01       	movw	r18, r22
    3880:	ac 01       	movw	r20, r24
            // compute dot product between vector E and vector P of segment
            // equivalent to P_dot_E = vec.x * E.x + vec.y * E.y, but more accurate
            P_dot_E = fmaf(vec.x, E.x, vec.y * E.y),
            // compute relative distance l (w.r.t. to segment length) of
            // the orthogonal projection of the current position onto the segment
            l = P_dot_E / sqLen(vec);
    3882:	c3 01       	movw	r24, r6
    3884:	b2 01       	movw	r22, r4
    3886:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
    388a:	9b 01       	movw	r18, r22
    388c:	ac 01       	movw	r20, r24
    388e:	c7 01       	movw	r24, r14
    3890:	b6 01       	movw	r22, r12
    3892:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
    3896:	2b 01       	movw	r4, r22
    3898:	3c 01       	movw	r6, r24

        // if the orthogonal projection of the current position onto the segment
        // is located on that segment
        if ((l >= 0.0f) && (l <= 1.0f)) {
    389a:	20 e0       	ldi	r18, 0x00	; 0
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	a9 01       	movw	r20, r18
    38a0:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    38a4:	87 fd       	sbrc	r24, 7
    38a6:	69 cf       	rjmp	.-302    	; 0x377a <pathFollower_update+0x2dc>
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e8       	ldi	r20, 0x80	; 128
    38ae:	5f e3       	ldi	r21, 0x3F	; 63
    38b0:	c3 01       	movw	r24, r6
    38b2:	b2 01       	movw	r22, r4
    38b4:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
    38b8:	18 16       	cp	r1, r24
    38ba:	0c f4       	brge	.+2      	; 0x38be <pathFollower_update+0x420>
    38bc:	5e cf       	rjmp	.-324    	; 0x377a <pathFollower_update+0x2dc>
            // compute squared distance between current position and orthogonal projection onto segment
            float sqDistOPCP = sqLenPointVecF(vec, -l, E);
    38be:	77 fa       	bst	r7, 7
    38c0:	70 94       	com	r7
    38c2:	77 f8       	bld	r7, 7
    38c4:	70 94       	com	r7
}


// similar to sqLen(pointVec(vec, l, start))
static inline float sqLenPointVecF(FPoint_t vec, float l, FPoint_t start) {
    return square(fmaf(vec.x, l, start.x)) + square(fmaf(vec.y, l, start.y));
    38c6:	e9 88       	ldd	r14, Y+17	; 0x11
    38c8:	fa 88       	ldd	r15, Y+18	; 0x12
    38ca:	0b 89       	ldd	r16, Y+19	; 0x13
    38cc:	1c 89       	ldd	r17, Y+20	; 0x14
    38ce:	a3 01       	movw	r20, r6
    38d0:	92 01       	movw	r18, r4
    38d2:	c5 01       	movw	r24, r10
    38d4:	b4 01       	movw	r22, r8
    38d6:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>
    38da:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    38de:	4b 01       	movw	r8, r22
    38e0:	5c 01       	movw	r10, r24
    38e2:	ed 88       	ldd	r14, Y+21	; 0x15
    38e4:	fe 88       	ldd	r15, Y+22	; 0x16
    38e6:	0f 89       	ldd	r16, Y+23	; 0x17
    38e8:	18 8d       	ldd	r17, Y+24	; 0x18
    38ea:	a3 01       	movw	r20, r6
    38ec:	92 01       	movw	r18, r4
    38ee:	6d 81       	ldd	r22, Y+5	; 0x05
    38f0:	7e 81       	ldd	r23, Y+6	; 0x06
    38f2:	8f 81       	ldd	r24, Y+7	; 0x07
    38f4:	98 85       	ldd	r25, Y+8	; 0x08
    38f6:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>
    38fa:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    38fe:	9b 01       	movw	r18, r22
    3900:	ac 01       	movw	r20, r24
    3902:	c5 01       	movw	r24, r10
    3904:	b4 01       	movw	r22, r8
    3906:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
    390a:	7b 01       	movw	r14, r22
    390c:	8c 01       	movw	r16, r24
        if ((l >= 0.0f) && (l <= 1.0f)) {
            // compute squared distance between current position and orthogonal projection onto segment
            float sqDistOPCP = sqLenPointVecF(vec, -l, E);

            // if that distance is smaller than the current minimum distance
            if (sqDistOPCP < minDist) {
    390e:	9b 01       	movw	r18, r22
    3910:	ac 01       	movw	r20, r24
    3912:	68 a9       	ldd	r22, Y+48	; 0x30
    3914:	79 a9       	ldd	r23, Y+49	; 0x31
    3916:	8a a9       	ldd	r24, Y+50	; 0x32
    3918:	9b a9       	ldd	r25, Y+51	; 0x33
    391a:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    391e:	18 16       	cp	r1, r24
    3920:	0c f0       	brlt	.+2      	; 0x3924 <pathFollower_update+0x486>
    3922:	2b cf       	rjmp	.-426    	; 0x377a <pathFollower_update+0x2dc>
    3924:	3a a6       	std	Y+42, r3	; 0x2a
    3926:	29 a6       	std	Y+41, r2	; 0x29
                // update minDist and minSeg
                minDist = sqDistOPCP;
    3928:	e8 aa       	std	Y+48, r14	; 0x30
    392a:	f9 aa       	std	Y+49, r15	; 0x31
    392c:	0a ab       	std	Y+50, r16	; 0x32
    392e:	1b ab       	std	Y+51, r17	; 0x33
    3930:	24 cf       	rjmp	.-440    	; 0x377a <pathFollower_update+0x2dc>
    } else if (minSeg > curSeg) {
        pathFollowerInfo("Switching from segment %" PRIi16 " to %" PRIi16, curSeg, minSeg);

        // if the end of the path has been reached, deactivate follower and report success
        if (minSeg == pathLength - 1) {
            pathFollower_status.enabled = false;
    3932:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <pathFollower_status>
            pathFollowerInfoP("End of path reached");
    3936:	84 ea       	ldi	r24, 0xA4	; 164
    3938:	92 e0       	ldi	r25, 0x02	; 2
    393a:	9f 93       	push	r25
    393c:	8f 93       	push	r24
    393e:	f2 e0       	ldi	r31, 0x02	; 2
    3940:	ff 93       	push	r31
    3942:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <communication_log_P>
            return false;
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	1f a6       	std	Y+47, r1	; 0x2f
    // report that pathFollower_status was updated with a new lookahead point
    // and possibly also new segments start and end points
    // A controller should now use the lookahead point as an intermediate goal
    // position and generate appropriate control inputs
    return true;
}
    394e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3950:	ed 96       	adiw	r28, 0x3d	; 61
    3952:	0f b6       	in	r0, 0x3f	; 63
    3954:	f8 94       	cli
    3956:	de bf       	out	0x3e, r29	; 62
    3958:	0f be       	out	0x3f, r0	; 63
    395a:	cd bf       	out	0x3d, r28	; 61
    395c:	df 91       	pop	r29
    395e:	cf 91       	pop	r28
    3960:	1f 91       	pop	r17
    3962:	0f 91       	pop	r16
    3964:	ff 90       	pop	r15
    3966:	ef 90       	pop	r14
    3968:	df 90       	pop	r13
    396a:	cf 90       	pop	r12
    396c:	bf 90       	pop	r11
    396e:	af 90       	pop	r10
    3970:	9f 90       	pop	r9
    3972:	8f 90       	pop	r8
    3974:	7f 90       	pop	r7
    3976:	6f 90       	pop	r6
    3978:	5f 90       	pop	r5
    397a:	4f 90       	pop	r4
    397c:	3f 90       	pop	r3
    397e:	2f 90       	pop	r2
    3980:	08 95       	ret
    // Step 0: Initialization

    // if this is the first time, pathFollower_update() was called after either
    // reset or a path has been set
    if (! initialized) {
        initialized = true;
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <initialized>

        // initialize all local and global variables used by the path follower:
        // The first (current) segment is defined to go from the current position of the
        // robot to the first path point.
        // The next segment connects point path[0] to point path[1].
        nextSegEnd = path[1];
    3988:	e0 91 1c 08 	lds	r30, 0x081C	; 0x80081c <path>
    398c:	f0 91 1d 08 	lds	r31, 0x081D	; 0x80081d <path+0x1>
    3990:	fe 8b       	std	Y+22, r31	; 0x16
    3992:	ed 8b       	std	Y+21, r30	; 0x15
    3994:	84 81       	ldd	r24, Z+4	; 0x04
    3996:	95 81       	ldd	r25, Z+5	; 0x05
    3998:	a6 81       	ldd	r26, Z+6	; 0x06
    399a:	b7 81       	ldd	r27, Z+7	; 0x07
    399c:	7c 01       	movw	r14, r24
    399e:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <nextSegEnd>
    39a2:	90 93 07 08 	sts	0x0807, r25	; 0x800807 <nextSegEnd+0x1>
    39a6:	a0 93 08 08 	sts	0x0808, r26	; 0x800808 <nextSegEnd+0x2>
    39aa:	b0 93 09 08 	sts	0x0809, r27	; 0x800809 <nextSegEnd+0x3>
        pathFollower_status.segEnd = path[0];
    39ae:	80 81       	ld	r24, Z
    39b0:	91 81       	ldd	r25, Z+1	; 0x01
    39b2:	a2 81       	ldd	r26, Z+2	; 0x02
    39b4:	b3 81       	ldd	r27, Z+3	; 0x03
    39b6:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <pathFollower_status+0x5>
    39ba:	90 93 26 08 	sts	0x0826, r25	; 0x800826 <pathFollower_status+0x6>
    39be:	a0 93 27 08 	sts	0x0827, r26	; 0x800827 <pathFollower_status+0x7>
    39c2:	b0 93 28 08 	sts	0x0828, r27	; 0x800828 <pathFollower_status+0x8>
        curSegVec.x = pathFollower_status.segEnd.x - currentPos.x;
    39c6:	89 87       	std	Y+9, r24	; 0x09
    39c8:	9a 87       	std	Y+10, r25	; 0x0a
    39ca:	29 85       	ldd	r18, Y+9	; 0x09
    39cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    39ce:	b9 01       	movw	r22, r18
    39d0:	33 0f       	add	r19, r19
    39d2:	88 0b       	sbc	r24, r24
    39d4:	99 0b       	sbc	r25, r25
    39d6:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    39da:	29 a1       	ldd	r18, Y+33	; 0x21
    39dc:	3a a1       	ldd	r19, Y+34	; 0x22
    39de:	4b a1       	ldd	r20, Y+35	; 0x23
    39e0:	5c a1       	ldd	r21, Y+36	; 0x24
    39e2:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    39e6:	69 83       	std	Y+1, r22	; 0x01
    39e8:	7a 83       	std	Y+2, r23	; 0x02
    39ea:	8b 83       	std	Y+3, r24	; 0x03
    39ec:	9c 83       	std	Y+4, r25	; 0x04
    39ee:	60 93 12 08 	sts	0x0812, r22	; 0x800812 <curSegVec>
    39f2:	70 93 13 08 	sts	0x0813, r23	; 0x800813 <curSegVec+0x1>
    39f6:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <curSegVec+0x2>
    39fa:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <curSegVec+0x3>
        curSegVec.y = pathFollower_status.segEnd.y - currentPos.y;
    39fe:	00 91 27 08 	lds	r16, 0x0827	; 0x800827 <pathFollower_status+0x7>
    3a02:	10 91 28 08 	lds	r17, 0x0828	; 0x800828 <pathFollower_status+0x8>
    3a06:	b8 01       	movw	r22, r16
    3a08:	01 2e       	mov	r0, r17
    3a0a:	00 0c       	add	r0, r0
    3a0c:	88 0b       	sbc	r24, r24
    3a0e:	99 0b       	sbc	r25, r25
    3a10:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3a14:	2d a1       	ldd	r18, Y+37	; 0x25
    3a16:	3e a1       	ldd	r19, Y+38	; 0x26
    3a18:	4f a1       	ldd	r20, Y+39	; 0x27
    3a1a:	58 a5       	ldd	r21, Y+40	; 0x28
    3a1c:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    3a20:	6d 83       	std	Y+5, r22	; 0x05
    3a22:	7e 83       	std	Y+6, r23	; 0x06
    3a24:	8f 83       	std	Y+7, r24	; 0x07
    3a26:	98 87       	std	Y+8, r25	; 0x08
    3a28:	60 93 16 08 	sts	0x0816, r22	; 0x800816 <curSegVec+0x4>
    3a2c:	70 93 17 08 	sts	0x0817, r23	; 0x800817 <curSegVec+0x5>
    3a30:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <curSegVec+0x6>
    3a34:	90 93 19 08 	sts	0x0819, r25	; 0x800819 <curSegVec+0x7>
        pathFollower_status.segStart.x = currentPos.x;
    3a38:	69 a1       	ldd	r22, Y+33	; 0x21
    3a3a:	7a a1       	ldd	r23, Y+34	; 0x22
    3a3c:	8b a1       	ldd	r24, Y+35	; 0x23
    3a3e:	9c a1       	ldd	r25, Y+36	; 0x24
    3a40:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    3a44:	5b 01       	movw	r10, r22
    3a46:	70 93 22 08 	sts	0x0822, r23	; 0x800822 <pathFollower_status+0x2>
    3a4a:	60 93 21 08 	sts	0x0821, r22	; 0x800821 <pathFollower_status+0x1>
        pathFollower_status.segStart.y = currentPos.y;
    3a4e:	6d a1       	ldd	r22, Y+37	; 0x25
    3a50:	7e a1       	ldd	r23, Y+38	; 0x26
    3a52:	8f a1       	ldd	r24, Y+39	; 0x27
    3a54:	98 a5       	ldd	r25, Y+40	; 0x28
    3a56:	0e 94 ac 22 	call	0x4558	; 0x4558 <__fixsfsi>
    3a5a:	4b 01       	movw	r8, r22
    3a5c:	70 93 24 08 	sts	0x0824, r23	; 0x800824 <pathFollower_status+0x4>
    3a60:	60 93 23 08 	sts	0x0823, r22	; 0x800823 <pathFollower_status+0x3>

        nextSegVec.x = nextSegEnd.x - pathFollower_status.segEnd.x;
    3a64:	17 01       	movw	r2, r14
    3a66:	b7 01       	movw	r22, r14
    3a68:	49 85       	ldd	r20, Y+9	; 0x09
    3a6a:	5a 85       	ldd	r21, Y+10	; 0x0a
    3a6c:	64 1b       	sub	r22, r20
    3a6e:	75 0b       	sbc	r23, r21
    3a70:	07 2e       	mov	r0, r23
    3a72:	00 0c       	add	r0, r0
    3a74:	88 0b       	sbc	r24, r24
    3a76:	99 0b       	sbc	r25, r25
    3a78:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3a7c:	6d 87       	std	Y+13, r22	; 0x0d
    3a7e:	7e 87       	std	Y+14, r23	; 0x0e
    3a80:	8f 87       	std	Y+15, r24	; 0x0f
    3a82:	98 8b       	std	Y+16, r25	; 0x10
    3a84:	60 93 fe 07 	sts	0x07FE, r22	; 0x8007fe <nextSegVec>
    3a88:	70 93 ff 07 	sts	0x07FF, r23	; 0x8007ff <nextSegVec+0x1>
    3a8c:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <nextSegVec+0x2>
    3a90:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <nextSegVec+0x3>
        nextSegVec.y = nextSegEnd.y - pathFollower_status.segEnd.y;
    3a94:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <nextSegEnd+0x2>
    3a98:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <nextSegEnd+0x3>
    3a9c:	9b af       	std	Y+59, r25	; 0x3b
    3a9e:	8a af       	std	Y+58, r24	; 0x3a
    3aa0:	bc 01       	movw	r22, r24
    3aa2:	60 1b       	sub	r22, r16
    3aa4:	71 0b       	sbc	r23, r17
    3aa6:	07 2e       	mov	r0, r23
    3aa8:	00 0c       	add	r0, r0
    3aaa:	88 0b       	sbc	r24, r24
    3aac:	99 0b       	sbc	r25, r25
    3aae:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3ab2:	69 8b       	std	Y+17, r22	; 0x11
    3ab4:	7a 8b       	std	Y+18, r23	; 0x12
    3ab6:	8b 8b       	std	Y+19, r24	; 0x13
    3ab8:	9c 8b       	std	Y+20, r25	; 0x14
    3aba:	60 93 02 08 	sts	0x0802, r22	; 0x800802 <nextSegVec+0x4>
    3abe:	70 93 03 08 	sts	0x0803, r23	; 0x800803 <nextSegVec+0x5>
    3ac2:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <nextSegVec+0x6>
    3ac6:	90 93 05 08 	sts	0x0805, r25	; 0x800805 <nextSegVec+0x7>

// *************************** LOCAL FUNCTIONS *********************************

// compute squared length of a vector
static inline float sqLen(const FPoint_t vec) {
    return square(vec.x) + square(vec.y);
    3aca:	6d 85       	ldd	r22, Y+13	; 0x0d
    3acc:	7e 85       	ldd	r23, Y+14	; 0x0e
    3ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad0:	98 89       	ldd	r25, Y+16	; 0x10
    3ad2:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    3ad6:	6b 01       	movw	r12, r22
    3ad8:	7c 01       	movw	r14, r24
    3ada:	69 89       	ldd	r22, Y+17	; 0x11
    3adc:	7a 89       	ldd	r23, Y+18	; 0x12
    3ade:	8b 89       	ldd	r24, Y+19	; 0x13
    3ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ae2:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    3ae6:	9b 01       	movw	r18, r22
    3ae8:	ac 01       	movw	r20, r24
    3aea:	c7 01       	movw	r24, r14
    3aec:	b6 01       	movw	r22, r12
    3aee:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
    3af2:	69 8f       	std	Y+25, r22	; 0x19
    3af4:	7a 8f       	std	Y+26, r23	; 0x1a
    3af6:	8b 8f       	std	Y+27, r24	; 0x1b
    3af8:	9c 8f       	std	Y+28, r25	; 0x1c
        pathFollower_status.segStart.x = currentPos.x;
        pathFollower_status.segStart.y = currentPos.y;

        nextSegVec.x = nextSegEnd.x - pathFollower_status.segEnd.x;
        nextSegVec.y = nextSegEnd.y - pathFollower_status.segEnd.y;
        nextSegLenSq = sqLen(nextSegVec);
    3afa:	60 93 fa 07 	sts	0x07FA, r22	; 0x8007fa <nextSegLenSq>
    3afe:	70 93 fb 07 	sts	0x07FB, r23	; 0x8007fb <nextSegLenSq+0x1>
    3b02:	80 93 fc 07 	sts	0x07FC, r24	; 0x8007fc <nextSegLenSq+0x2>
    3b06:	90 93 fd 07 	sts	0x07FD, r25	; 0x8007fd <nextSegLenSq+0x3>
        nextSegLen = sqrt(nextSegLenSq);
    3b0a:	0e 94 6e 25 	call	0x4adc	; 0x4adc <sqrt>
    3b0e:	60 93 f6 07 	sts	0x07F6, r22	; 0x8007f6 <nextSegLen>
    3b12:	70 93 f7 07 	sts	0x07F7, r23	; 0x8007f7 <nextSegLen+0x1>
    3b16:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <nextSegLen+0x2>
    3b1a:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <nextSegLen+0x3>

// *************************** LOCAL FUNCTIONS *********************************

// compute squared length of a vector
static inline float sqLen(const FPoint_t vec) {
    return square(vec.x) + square(vec.y);
    3b1e:	69 81       	ldd	r22, Y+1	; 0x01
    3b20:	7a 81       	ldd	r23, Y+2	; 0x02
    3b22:	8b 81       	ldd	r24, Y+3	; 0x03
    3b24:	9c 81       	ldd	r25, Y+4	; 0x04
    3b26:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    3b2a:	6b 01       	movw	r12, r22
    3b2c:	7c 01       	movw	r14, r24
    3b2e:	6d 81       	ldd	r22, Y+5	; 0x05
    3b30:	7e 81       	ldd	r23, Y+6	; 0x06
    3b32:	8f 81       	ldd	r24, Y+7	; 0x07
    3b34:	98 85       	ldd	r25, Y+8	; 0x08
    3b36:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    3b3a:	a7 01       	movw	r20, r14
    3b3c:	96 01       	movw	r18, r12
    3b3e:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
    3b42:	2b 01       	movw	r4, r22
    3b44:	3c 01       	movw	r6, r24
        nextSegVec.x = nextSegEnd.x - pathFollower_status.segEnd.x;
        nextSegVec.y = nextSegEnd.y - pathFollower_status.segEnd.y;
        nextSegLenSq = sqLen(nextSegVec);
        nextSegLen = sqrt(nextSegLenSq);

        curSegLenSq = sqLen(curSegVec);
    3b46:	60 93 0e 08 	sts	0x080E, r22	; 0x80080e <curSegLenSq>
    3b4a:	70 93 0f 08 	sts	0x080F, r23	; 0x80080f <curSegLenSq+0x1>
    3b4e:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <curSegLenSq+0x2>
    3b52:	90 93 11 08 	sts	0x0811, r25	; 0x800811 <curSegLenSq+0x3>
        curSegLen = sqrt(curSegLenSq);
    3b56:	0e 94 6e 25 	call	0x4adc	; 0x4adc <sqrt>
    3b5a:	9b 01       	movw	r18, r22
    3b5c:	ac 01       	movw	r20, r24
    3b5e:	60 93 0a 08 	sts	0x080A, r22	; 0x80080a <curSegLen>
    3b62:	70 93 0b 08 	sts	0x080B, r23	; 0x80080b <curSegLen+0x1>
    3b66:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <curSegLen+0x2>
    3b6a:	90 93 0d 08 	sts	0x080D, r25	; 0x80080d <curSegLen+0x3>

        relL = pathFollower_lookaheadDistance / curSegLen;
    3b6e:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <pathFollower_lookaheadDistance>
    3b72:	70 91 37 02 	lds	r23, 0x0237	; 0x800237 <pathFollower_lookaheadDistance+0x1>
    3b76:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <pathFollower_lookaheadDistance+0x2>
    3b7a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <pathFollower_lookaheadDistance+0x3>
    3b7e:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
    3b82:	60 93 f2 07 	sts	0x07F2, r22	; 0x8007f2 <relL>
    3b86:	70 93 f3 07 	sts	0x07F3, r23	; 0x8007f3 <relL+0x1>
    3b8a:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <relL+0x2>
    3b8e:	90 93 f5 07 	sts	0x07F5, r25	; 0x8007f5 <relL+0x3>
    3b92:	61 01       	movw	r12, r2
    3b94:	16 cd       	rjmp	.-1492   	; 0x35c2 <pathFollower_update+0x124>
        // segEnd becomes the start of the segment in the next iteration
        segStart = segEnd;
    }

    // if minSeg hit the maximum, output an error (note that this should not happen)
    if (minSeg == pathLength) {
    3b96:	89 a5       	ldd	r24, Y+41	; 0x29
    3b98:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b9a:	a9 8d       	ldd	r26, Y+25	; 0x19
    3b9c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3b9e:	8a 17       	cp	r24, r26
    3ba0:	9b 07       	cpc	r25, r27
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <pathFollower_update+0x708>
    3ba4:	23 c3       	rjmp	.+1606   	; 0x41ec <pathFollower_update+0xd4e>
        pathFollowerErrorP("Unable to locate segment for orthogonal projection");

    // if segment with smallest distance between orthogonal projection and current position
    // is after the current segment
    } else if (minSeg > curSeg) {
    3ba6:	e9 a5       	ldd	r30, Y+41	; 0x29
    3ba8:	fa a5       	ldd	r31, Y+42	; 0x2a
    3baa:	2c a9       	ldd	r18, Y+52	; 0x34
    3bac:	3d a9       	ldd	r19, Y+53	; 0x35
    3bae:	2e 17       	cp	r18, r30
    3bb0:	3f 07       	cpc	r19, r31
    3bb2:	0c f4       	brge	.+2      	; 0x3bb6 <pathFollower_update+0x718>
    3bb4:	1a c1       	rjmp	.+564    	; 0x3dea <pathFollower_update+0x94c>
    3bb6:	c0 90 f2 07 	lds	r12, 0x07F2	; 0x8007f2 <relL>
    3bba:	d0 90 f3 07 	lds	r13, 0x07F3	; 0x8007f3 <relL+0x1>
    3bbe:	e0 90 f4 07 	lds	r14, 0x07F4	; 0x8007f4 <relL+0x2>
    3bc2:	f0 90 f5 07 	lds	r15, 0x07F5	; 0x8007f5 <relL+0x3>
    //         after the orthogonal projection from step 1

    // safe-guard in case robot deviates from path too much such that a switch to another segment
    // does not occur. In this case, the orthogonal projection stops at the end of the current segment.
    // This prevents the lookahead point from being placed outside the path.
    if (lCur > 1.0f)
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	40 e8       	ldi	r20, 0x80	; 128
    3bcc:	5f e3       	ldi	r21, 0x3F	; 63
    3bce:	6b a5       	ldd	r22, Y+43	; 0x2b
    3bd0:	7c a5       	ldd	r23, Y+44	; 0x2c
    3bd2:	8d a5       	ldd	r24, Y+45	; 0x2d
    3bd4:	9e a5       	ldd	r25, Y+46	; 0x2e
    3bd6:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    3bda:	18 16       	cp	r1, r24
    3bdc:	44 f4       	brge	.+16     	; 0x3bee <pathFollower_update+0x750>
        lCur = 1.0f;
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	a0 e8       	ldi	r26, 0x80	; 128
    3be4:	bf e3       	ldi	r27, 0x3F	; 63
    3be6:	8b a7       	std	Y+43, r24	; 0x2b
    3be8:	9c a7       	std	Y+44, r25	; 0x2c
    3bea:	ad a7       	std	Y+45, r26	; 0x2d
    3bec:	be a7       	std	Y+46, r27	; 0x2e

    // compute the relative distance of the lookahead point in terms of the current segment
    float relLA = relL + lCur;
    3bee:	a7 01       	movw	r20, r14
    3bf0:	96 01       	movw	r18, r12
    3bf2:	6b a5       	ldd	r22, Y+43	; 0x2b
    3bf4:	7c a5       	ldd	r23, Y+44	; 0x2c
    3bf6:	8d a5       	ldd	r24, Y+45	; 0x2d
    3bf8:	9e a5       	ldd	r25, Y+46	; 0x2e
    3bfa:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
    3bfe:	4b 01       	movw	r8, r22
    3c00:	5c 01       	movw	r10, r24

    // if lookahead point is on the current segment
    if (relLA <= 1.0f) {
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	40 e8       	ldi	r20, 0x80	; 128
    3c08:	5f e3       	ldi	r21, 0x3F	; 63
    3c0a:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
    3c0e:	18 16       	cp	r1, r24
    3c10:	0c f0       	brlt	.+2      	; 0x3c14 <pathFollower_update+0x776>
    3c12:	ff c2       	rjmp	.+1534   	; 0x4212 <pathFollower_update+0xd74>

        // subtract the distance between orthogonal projection on current segment to current segment end
        // from pathFollower_lookaheadDistance, such that Lrem contains the remaining distance of the lookahead
        // point along the path after the current segment.
        // This is expressed shorter as:
        float Lrem = (relLA - 1.0f) * curSegLen;
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	40 e8       	ldi	r20, 0x80	; 128
    3c1a:	5f e3       	ldi	r21, 0x3F	; 63
    3c1c:	c5 01       	movw	r24, r10
    3c1e:	b4 01       	movw	r22, r8
    3c20:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    3c24:	20 91 0a 08 	lds	r18, 0x080A	; 0x80080a <curSegLen>
    3c28:	30 91 0b 08 	lds	r19, 0x080B	; 0x80080b <curSegLen+0x1>
    3c2c:	40 91 0c 08 	lds	r20, 0x080C	; 0x80080c <curSegLen+0x2>
    3c30:	50 91 0d 08 	lds	r21, 0x080D	; 0x80080d <curSegLen+0x3>
    3c34:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
    3c38:	6b 01       	movw	r12, r22
    3c3a:	7c 01       	movw	r14, r24

        // if lookahead point is on the next segment
        if (Lrem <= nextSegLen) {
    3c3c:	80 90 f6 07 	lds	r8, 0x07F6	; 0x8007f6 <nextSegLen>
    3c40:	90 90 f7 07 	lds	r9, 0x07F7	; 0x8007f7 <nextSegLen+0x1>
    3c44:	a0 90 f8 07 	lds	r10, 0x07F8	; 0x8007f8 <nextSegLen+0x2>
    3c48:	b0 90 f9 07 	lds	r11, 0x07F9	; 0x8007f9 <nextSegLen+0x3>
    3c4c:	a5 01       	movw	r20, r10
    3c4e:	94 01       	movw	r18, r8
    3c50:	0e 94 30 22 	call	0x4460	; 0x4460 <__cmpsf2>
            // compute lookahead point on next segment
            pathFollower_status.lookahead = pointVec(nextSegVec, Lrem / nextSegLen, pathFollower_status.segEnd);
    3c54:	a5 01       	movw	r20, r10
    3c56:	94 01       	movw	r18, r8
        // point along the path after the current segment.
        // This is expressed shorter as:
        float Lrem = (relLA - 1.0f) * curSegLen;

        // if lookahead point is on the next segment
        if (Lrem <= nextSegLen) {
    3c58:	18 16       	cp	r1, r24
    3c5a:	0c f0       	brlt	.+2      	; 0x3c5e <pathFollower_update+0x7c0>
    3c5c:	7e c2       	rjmp	.+1276   	; 0x415a <pathFollower_update+0xcbc>
            pathFollower_status.lookahead = pointVec(nextSegVec, Lrem / nextSegLen, pathFollower_status.segEnd);

        // if lookahead point is after the next segment
        } else {
            // update Lrem by subtracting the length of the next segment
            Lrem -= nextSegLen;
    3c5e:	c7 01       	movw	r24, r14
    3c60:	b6 01       	movw	r22, r12
    3c62:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    3c66:	6b 01       	movw	r12, r22
    3c68:	7c 01       	movw	r14, r24

            // search for segment where lookahead point is located

            // segStart holds the start of the segment considered
            Point_t segStart = nextSegEnd;
    3c6a:	00 91 06 08 	lds	r16, 0x0806	; 0x800806 <nextSegEnd>
    3c6e:	10 91 07 08 	lds	r17, 0x0807	; 0x800807 <nextSegEnd+0x1>
    3c72:	a0 91 08 08 	lds	r26, 0x0808	; 0x800808 <nextSegEnd+0x2>
    3c76:	b0 91 09 08 	lds	r27, 0x0809	; 0x800809 <nextSegEnd+0x3>
    3c7a:	ba 83       	std	Y+2, r27	; 0x02
    3c7c:	a9 83       	std	Y+1, r26	; 0x01
            // seg is the segment index (start point of segment path[seg])
            uint8_t seg = curSeg + 1;
    3c7e:	30 90 33 02 	lds	r3, 0x0233	; 0x800233 <curSeg>
            // pointer in array path for reading out the segment's end point
            Point_t *pathPtr = &path[seg + 1];
    3c82:	88 24       	eor	r8, r8
    3c84:	83 94       	inc	r8
    3c86:	83 0c       	add	r8, r3
    3c88:	91 2c       	mov	r9, r1
    3c8a:	bf ef       	ldi	r27, 0xFF	; 255
    3c8c:	8b 1a       	sub	r8, r27
    3c8e:	9b 0a       	sbc	r9, r27
    3c90:	88 0c       	add	r8, r8
    3c92:	99 1c       	adc	r9, r9
    3c94:	88 0c       	add	r8, r8
    3c96:	99 1c       	adc	r9, r9
    3c98:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <path>
    3c9c:	90 91 1d 08 	lds	r25, 0x081D	; 0x80081d <path+0x1>
    3ca0:	88 0e       	add	r8, r24
    3ca2:	99 1e       	adc	r9, r25

            while (++seg < pathLength) {
    3ca4:	33 94       	inc	r3
    3ca6:	33 94       	inc	r3
    3ca8:	20 90 1b 08 	lds	r2, 0x081B	; 0x80081b <pathLength>
    3cac:	32 14       	cp	r3, r2
    3cae:	80 f0       	brcs	.+32     	; 0x3cd0 <pathFollower_update+0x832>
    3cb0:	85 c0       	rjmp	.+266    	; 0x3dbc <pathFollower_update+0x91e>
                    // compute lookahead point on that segment
                    pathFollower_status.lookahead = pointVec(vec, Lrem / vecLen, segStart);
                    break;
                } else
                    // update Lrem by subtracting the length of the segment
                    Lrem -= vecLen;
    3cb2:	c7 01       	movw	r24, r14
    3cb4:	b6 01       	movw	r22, r12
    3cb6:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    3cba:	6b 01       	movw	r12, r22
    3cbc:	7c 01       	movw	r14, r24
            // seg is the segment index (start point of segment path[seg])
            uint8_t seg = curSeg + 1;
            // pointer in array path for reading out the segment's end point
            Point_t *pathPtr = &path[seg + 1];

            while (++seg < pathLength) {
    3cbe:	33 94       	inc	r3
                } else
                    // update Lrem by subtracting the length of the segment
                    Lrem -= vecLen;

                // segEnd becomes the start of the segment in the next iteration
                segStart = segEnd;
    3cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc4:	9a 83       	std	Y+2, r25	; 0x02
    3cc6:	89 83       	std	Y+1, r24	; 0x01
    3cc8:	85 01       	movw	r16, r10
            // seg is the segment index (start point of segment path[seg])
            uint8_t seg = curSeg + 1;
            // pointer in array path for reading out the segment's end point
            Point_t *pathPtr = &path[seg + 1];

            while (++seg < pathLength) {
    3cca:	32 14       	cp	r3, r2
    3ccc:	08 f0       	brcs	.+2      	; 0x3cd0 <pathFollower_update+0x832>
    3cce:	76 c0       	rjmp	.+236    	; 0x3dbc <pathFollower_update+0x91e>
                // get end of segment
                Point_t segEnd = *++pathPtr;
    3cd0:	e4 e0       	ldi	r30, 0x04	; 4
    3cd2:	8e 0e       	add	r8, r30
    3cd4:	91 1c       	adc	r9, r1
    3cd6:	d4 01       	movw	r26, r8
    3cd8:	ad 90       	ld	r10, X+
    3cda:	bc 90       	ld	r11, X
    3cdc:	11 97       	sbiw	r26, 0x01	; 1
    3cde:	12 96       	adiw	r26, 0x02	; 2
    3ce0:	ed 91       	ld	r30, X+
    3ce2:	fc 91       	ld	r31, X
    3ce4:	13 97       	sbiw	r26, 0x03	; 3
    3ce6:	fe 87       	std	Y+14, r31	; 0x0e
    3ce8:	ed 87       	std	Y+13, r30	; 0x0d

                // compute segment vector as (end point - start point)
                FPoint_t vec = { segEnd.x - segStart.x, segEnd.y - segStart.y };
    3cea:	b5 01       	movw	r22, r10
    3cec:	60 1b       	sub	r22, r16
    3cee:	71 0b       	sbc	r23, r17
    3cf0:	07 2e       	mov	r0, r23
    3cf2:	00 0c       	add	r0, r0
    3cf4:	88 0b       	sbc	r24, r24
    3cf6:	99 0b       	sbc	r25, r25
    3cf8:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3cfc:	6d 83       	std	Y+5, r22	; 0x05
    3cfe:	7e 83       	std	Y+6, r23	; 0x06
    3d00:	8f 83       	std	Y+7, r24	; 0x07
    3d02:	98 87       	std	Y+8, r25	; 0x08
    3d04:	6d 85       	ldd	r22, Y+13	; 0x0d
    3d06:	7e 85       	ldd	r23, Y+14	; 0x0e
    3d08:	29 81       	ldd	r18, Y+1	; 0x01
    3d0a:	3a 81       	ldd	r19, Y+2	; 0x02
    3d0c:	62 1b       	sub	r22, r18
    3d0e:	73 0b       	sbc	r23, r19
    3d10:	07 2e       	mov	r0, r23
    3d12:	00 0c       	add	r0, r0
    3d14:	88 0b       	sbc	r24, r24
    3d16:	99 0b       	sbc	r25, r25
    3d18:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3d1c:	69 87       	std	Y+9, r22	; 0x09
    3d1e:	7a 87       	std	Y+10, r23	; 0x0a
    3d20:	8b 87       	std	Y+11, r24	; 0x0b
    3d22:	9c 87       	std	Y+12, r25	; 0x0c
                // compute length of vec
                float vecLen = hypotf(vec.x, vec.y);
    3d24:	9b 01       	movw	r18, r22
    3d26:	ac 01       	movw	r20, r24
    3d28:	6d 81       	ldd	r22, Y+5	; 0x05
    3d2a:	7e 81       	ldd	r23, Y+6	; 0x06
    3d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d2e:	98 85       	ldd	r25, Y+8	; 0x08
    3d30:	0e 94 36 24 	call	0x486c	; 0x486c <hypot>
    3d34:	2b 01       	movw	r4, r22
    3d36:	3c 01       	movw	r6, r24

                // if lookahead point is on the segment
                if (vecLen >= Lrem) {
    3d38:	a7 01       	movw	r20, r14
    3d3a:	96 01       	movw	r18, r12
    3d3c:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
                    // compute lookahead point on that segment
                    pathFollower_status.lookahead = pointVec(vec, Lrem / vecLen, segStart);
    3d40:	a3 01       	movw	r20, r6
    3d42:	92 01       	movw	r18, r4
                FPoint_t vec = { segEnd.x - segStart.x, segEnd.y - segStart.y };
                // compute length of vec
                float vecLen = hypotf(vec.x, vec.y);

                // if lookahead point is on the segment
                if (vecLen >= Lrem) {
    3d44:	87 fd       	sbrc	r24, 7
    3d46:	b5 cf       	rjmp	.-150    	; 0x3cb2 <pathFollower_update+0x814>
                    // compute lookahead point on that segment
                    pathFollower_status.lookahead = pointVec(vec, Lrem / vecLen, segStart);
    3d48:	c7 01       	movw	r24, r14
    3d4a:	b6 01       	movw	r22, r12
    3d4c:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
    3d50:	4b 01       	movw	r8, r22
    3d52:	5c 01       	movw	r10, r24
// compute the location of a point on a line in the relative distance l (w.r.t.
// length of vector vec) where the line is determined by its start point start
// and the direction vector vec.
static inline FPoint_t pointVec(FPoint_t vec, float l, Point_t start) {
    // compute FPoint_t p = { (vec.x * l) + start.x, (vec.y * l) + start.y };
    FPoint_t p = { fmaf(vec.x, l, start.x), fmaf(vec.y, l, start.y) };
    3d54:	b8 01       	movw	r22, r16
    3d56:	11 0f       	add	r17, r17
    3d58:	88 0b       	sbc	r24, r24
    3d5a:	99 0b       	sbc	r25, r25
    3d5c:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3d60:	7b 01       	movw	r14, r22
    3d62:	8c 01       	movw	r16, r24
    3d64:	a5 01       	movw	r20, r10
    3d66:	94 01       	movw	r18, r8
    3d68:	6d 81       	ldd	r22, Y+5	; 0x05
    3d6a:	7e 81       	ldd	r23, Y+6	; 0x06
    3d6c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d6e:	98 85       	ldd	r25, Y+8	; 0x08
    3d70:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>
    3d74:	2b 01       	movw	r4, r22
    3d76:	3c 01       	movw	r6, r24
    3d78:	49 81       	ldd	r20, Y+1	; 0x01
    3d7a:	5a 81       	ldd	r21, Y+2	; 0x02
    3d7c:	ba 01       	movw	r22, r20
    3d7e:	55 0f       	add	r21, r21
    3d80:	88 0b       	sbc	r24, r24
    3d82:	99 0b       	sbc	r25, r25
    3d84:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3d88:	7b 01       	movw	r14, r22
    3d8a:	8c 01       	movw	r16, r24
    3d8c:	a5 01       	movw	r20, r10
    3d8e:	94 01       	movw	r18, r8
    3d90:	69 85       	ldd	r22, Y+9	; 0x09
    3d92:	7a 85       	ldd	r23, Y+10	; 0x0a
    3d94:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d96:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d98:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>
                float vecLen = hypotf(vec.x, vec.y);

                // if lookahead point is on the segment
                if (vecLen >= Lrem) {
                    // compute lookahead point on that segment
                    pathFollower_status.lookahead = pointVec(vec, Lrem / vecLen, segStart);
    3d9c:	40 92 29 08 	sts	0x0829, r4	; 0x800829 <pathFollower_status+0x9>
    3da0:	50 92 2a 08 	sts	0x082A, r5	; 0x80082a <pathFollower_status+0xa>
    3da4:	60 92 2b 08 	sts	0x082B, r6	; 0x80082b <pathFollower_status+0xb>
    3da8:	70 92 2c 08 	sts	0x082C, r7	; 0x80082c <pathFollower_status+0xc>
    3dac:	60 93 2d 08 	sts	0x082D, r22	; 0x80082d <pathFollower_status+0xd>
    3db0:	70 93 2e 08 	sts	0x082E, r23	; 0x80082e <pathFollower_status+0xe>
    3db4:	80 93 2f 08 	sts	0x082F, r24	; 0x80082f <pathFollower_status+0xf>
    3db8:	90 93 30 08 	sts	0x0830, r25	; 0x800830 <pathFollower_status+0x10>
            // if last segment was reached, but still the lookahead point could not
            // be found, output an error message.
            // Note that this condition should not occur, except when enlarging
            // the lookahead distance by more than that distance during a following
            // approach
            if (seg == pathLength) {
    3dbc:	23 10       	cpse	r2, r3
    3dbe:	c7 cd       	rjmp	.-1138   	; 0x394e <pathFollower_update+0x4b0>
                pathFollowerErrorP("Unable to locate segment for lookahead point");
    3dc0:	87 e7       	ldi	r24, 0x77	; 119
    3dc2:	92 e0       	ldi	r25, 0x02	; 2
    3dc4:	9f 93       	push	r25
    3dc6:	8f 93       	push	r24
    3dc8:	1f 92       	push	r1
    3dca:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <communication_log_P>
    3dce:	0f 90       	pop	r0
    3dd0:	0f 90       	pop	r0
    3dd2:	0f 90       	pop	r0
    3dd4:	bc cd       	rjmp	.-1160   	; 0x394e <pathFollower_update+0x4b0>
    int16_t minSeg = curSeg;


    // if the orthogonal projection of the current position onto the next segment
    // is located on that segment
    if ((lNext >= 0.0f) && (lNext <= 1.0f)) {
    3dd6:	2c a8       	ldd	r2, Y+52	; 0x34
    3dd8:	3d a8       	ldd	r3, Y+53	; 0x35
    3dda:	bf ef       	ldi	r27, 0xFF	; 255
    3ddc:	2b 1a       	sub	r2, r27
    3dde:	3b 0a       	sbc	r3, r27

    //communication_log(LEVEL_FINE, "%.3f %.3f", lCur, lNext);

    // initialize minSeg with the current segment index
    // minSeg holds the segment index with smallest squared distance minDist
    int16_t minSeg = curSeg;
    3de0:	ec a9       	ldd	r30, Y+52	; 0x34
    3de2:	fd a9       	ldd	r31, Y+53	; 0x35
    3de4:	fa a7       	std	Y+42, r31	; 0x2a
    3de6:	e9 a7       	std	Y+41, r30	; 0x29
    3de8:	ab cc       	rjmp	.-1706   	; 0x3740 <pathFollower_update+0x2a2>
        pathFollowerErrorP("Unable to locate segment for orthogonal projection");

    // if segment with smallest distance between orthogonal projection and current position
    // is after the current segment
    } else if (minSeg > curSeg) {
        pathFollowerInfo("Switching from segment %" PRIi16 " to %" PRIi16, curSeg, minSeg);
    3dea:	3a a5       	ldd	r19, Y+42	; 0x2a
    3dec:	3f 93       	push	r19
    3dee:	49 a5       	ldd	r20, Y+41	; 0x29
    3df0:	4f 93       	push	r20
    3df2:	5d a9       	ldd	r21, Y+53	; 0x35
    3df4:	5f 93       	push	r21
    3df6:	8c a9       	ldd	r24, Y+52	; 0x34
    3df8:	8f 93       	push	r24
    3dfa:	8b ea       	ldi	r24, 0xAB	; 171
    3dfc:	93 e0       	ldi	r25, 0x03	; 3
    3dfe:	9f 93       	push	r25
    3e00:	8f 93       	push	r24
    3e02:	92 e0       	ldi	r25, 0x02	; 2
    3e04:	9f 93       	push	r25
    3e06:	0e 94 21 18 	call	0x3042	; 0x3042 <communication_log>

        // if the end of the path has been reached, deactivate follower and report success
        if (minSeg == pathLength - 1) {
    3e0a:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <pathLength>
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	01 97       	sbiw	r24, 0x01	; 1
    3e12:	0f b6       	in	r0, 0x3f	; 63
    3e14:	f8 94       	cli
    3e16:	de bf       	out	0x3e, r29	; 62
    3e18:	0f be       	out	0x3f, r0	; 63
    3e1a:	cd bf       	out	0x3d, r28	; 61
    3e1c:	e9 a5       	ldd	r30, Y+41	; 0x29
    3e1e:	fa a5       	ldd	r31, Y+42	; 0x2a
    3e20:	e8 17       	cp	r30, r24
    3e22:	f9 07       	cpc	r31, r25
    3e24:	09 f4       	brne	.+2      	; 0x3e28 <pathFollower_update+0x98a>
    3e26:	85 cd       	rjmp	.-1270   	; 0x3932 <pathFollower_update+0x494>
        }

        // get a pointer of path[minSeg], i.e. start of segment.
        // This produces more effective code than just addressing the array multiple
        // times at consecutive locations.
        Point_t* pathPtr = &path[minSeg];
    3e28:	e0 91 1c 08 	lds	r30, 0x081C	; 0x80081c <path>
    3e2c:	f0 91 1d 08 	lds	r31, 0x081D	; 0x80081d <path+0x1>
    3e30:	89 a5       	ldd	r24, Y+41	; 0x29
    3e32:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e34:	88 0f       	add	r24, r24
    3e36:	99 1f       	adc	r25, r25
    3e38:	88 0f       	add	r24, r24
    3e3a:	99 1f       	adc	r25, r25
    3e3c:	e8 0f       	add	r30, r24
    3e3e:	f9 1f       	adc	r31, r25

        // if a switch to the next segment is needed, some required variables
        // are stored already in local variables
        if (minSeg == curSeg + 1) {
    3e40:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <curSeg>
    3e44:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <curSeg+0x1>
    3e48:	01 96       	adiw	r24, 0x01	; 1
    3e4a:	29 a5       	ldd	r18, Y+41	; 0x29
    3e4c:	3a a5       	ldd	r19, Y+42	; 0x2a
            ++pathPtr; // advance by one, since access to path[minSeg + 2] is required after this block
    3e4e:	af 01       	movw	r20, r30
    3e50:	4c 5f       	subi	r20, 0xFC	; 252
    3e52:	5f 4f       	sbci	r21, 0xFF	; 255
    3e54:	5e 83       	std	Y+6, r21	; 0x06
    3e56:	4d 83       	std	Y+5, r20	; 0x05
        // times at consecutive locations.
        Point_t* pathPtr = &path[minSeg];

        // if a switch to the next segment is needed, some required variables
        // are stored already in local variables
        if (minSeg == curSeg + 1) {
    3e58:	28 17       	cp	r18, r24
    3e5a:	39 07       	cpc	r19, r25
    3e5c:	09 f4       	brne	.+2      	; 0x3e60 <pathFollower_update+0x9c2>
    3e5e:	26 c2       	rjmp	.+1100   	; 0x42ac <pathFollower_update+0xe0e>
            pathFollower_status.segStart = pathFollower_status.segEnd;
            pathFollower_status.segEnd = nextSegEnd;
            curSegLen = nextSegLen;
        // if a switch to past the next segment is needed, update the local variables directly
        } else {
            pathFollower_status.segStart = *(pathPtr++); // equals path[minSeg]
    3e60:	80 81       	ld	r24, Z
    3e62:	91 81       	ldd	r25, Z+1	; 0x01
    3e64:	a2 81       	ldd	r26, Z+2	; 0x02
    3e66:	b3 81       	ldd	r27, Z+3	; 0x03
    3e68:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <pathFollower_status+0x1>
    3e6c:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <pathFollower_status+0x2>
    3e70:	a0 93 23 08 	sts	0x0823, r26	; 0x800823 <pathFollower_status+0x3>
    3e74:	b0 93 24 08 	sts	0x0824, r27	; 0x800824 <pathFollower_status+0x4>
            pathFollower_status.segEnd = *pathPtr;       // equals path[minSeg + 1]
    3e78:	84 81       	ldd	r24, Z+4	; 0x04
    3e7a:	95 81       	ldd	r25, Z+5	; 0x05
    3e7c:	a6 81       	ldd	r26, Z+6	; 0x06
    3e7e:	b7 81       	ldd	r27, Z+7	; 0x07
    3e80:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <pathFollower_status+0x5>
    3e84:	90 93 26 08 	sts	0x0826, r25	; 0x800826 <pathFollower_status+0x6>
    3e88:	a0 93 27 08 	sts	0x0827, r26	; 0x800827 <pathFollower_status+0x7>
    3e8c:	b0 93 28 08 	sts	0x0828, r27	; 0x800828 <pathFollower_status+0x8>
            curSegVec.x = pathFollower_status.segEnd.x - pathFollower_status.segStart.x;
    3e90:	89 87       	std	Y+9, r24	; 0x09
    3e92:	9a 87       	std	Y+10, r25	; 0x0a
    3e94:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <pathFollower_status+0x1>
    3e98:	90 91 22 08 	lds	r25, 0x0822	; 0x800822 <pathFollower_status+0x2>
    3e9c:	9a 83       	std	Y+2, r25	; 0x02
    3e9e:	89 83       	std	Y+1, r24	; 0x01
    3ea0:	69 85       	ldd	r22, Y+9	; 0x09
    3ea2:	7a 85       	ldd	r23, Y+10	; 0x0a
    3ea4:	68 1b       	sub	r22, r24
    3ea6:	79 0b       	sbc	r23, r25
    3ea8:	07 2e       	mov	r0, r23
    3eaa:	00 0c       	add	r0, r0
    3eac:	88 0b       	sbc	r24, r24
    3eae:	99 0b       	sbc	r25, r25
    3eb0:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3eb4:	2b 01       	movw	r4, r22
    3eb6:	3c 01       	movw	r6, r24
    3eb8:	60 93 12 08 	sts	0x0812, r22	; 0x800812 <curSegVec>
    3ebc:	70 93 13 08 	sts	0x0813, r23	; 0x800813 <curSegVec+0x1>
    3ec0:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <curSegVec+0x2>
    3ec4:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <curSegVec+0x3>
            curSegVec.y = pathFollower_status.segEnd.y - pathFollower_status.segStart.y;
    3ec8:	20 90 27 08 	lds	r2, 0x0827	; 0x800827 <pathFollower_status+0x7>
    3ecc:	30 90 28 08 	lds	r3, 0x0828	; 0x800828 <pathFollower_status+0x8>
    3ed0:	00 91 23 08 	lds	r16, 0x0823	; 0x800823 <pathFollower_status+0x3>
    3ed4:	10 91 24 08 	lds	r17, 0x0824	; 0x800824 <pathFollower_status+0x4>
    3ed8:	b1 01       	movw	r22, r2
    3eda:	60 1b       	sub	r22, r16
    3edc:	71 0b       	sbc	r23, r17
    3ede:	07 2e       	mov	r0, r23
    3ee0:	00 0c       	add	r0, r0
    3ee2:	88 0b       	sbc	r24, r24
    3ee4:	99 0b       	sbc	r25, r25
    3ee6:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3eea:	6b 01       	movw	r12, r22
    3eec:	7c 01       	movw	r14, r24
    3eee:	60 93 16 08 	sts	0x0816, r22	; 0x800816 <curSegVec+0x4>
    3ef2:	70 93 17 08 	sts	0x0817, r23	; 0x800817 <curSegVec+0x5>
    3ef6:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <curSegVec+0x6>
    3efa:	90 93 19 08 	sts	0x0819, r25	; 0x800819 <curSegVec+0x7>

// *************************** LOCAL FUNCTIONS *********************************

// compute squared length of a vector
static inline float sqLen(const FPoint_t vec) {
    return square(vec.x) + square(vec.y);
    3efe:	c3 01       	movw	r24, r6
    3f00:	b2 01       	movw	r22, r4
    3f02:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    3f06:	4b 01       	movw	r8, r22
    3f08:	5c 01       	movw	r10, r24
    3f0a:	c7 01       	movw	r24, r14
    3f0c:	b6 01       	movw	r22, r12
    3f0e:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    3f12:	9b 01       	movw	r18, r22
    3f14:	ac 01       	movw	r20, r24
    3f16:	c5 01       	movw	r24, r10
    3f18:	b4 01       	movw	r22, r8
    3f1a:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
    3f1e:	4b 01       	movw	r8, r22
    3f20:	5c 01       	movw	r10, r24
        } else {
            pathFollower_status.segStart = *(pathPtr++); // equals path[minSeg]
            pathFollower_status.segEnd = *pathPtr;       // equals path[minSeg + 1]
            curSegVec.x = pathFollower_status.segEnd.x - pathFollower_status.segStart.x;
            curSegVec.y = pathFollower_status.segEnd.y - pathFollower_status.segStart.y;
            curSegLenSq = sqLen(curSegVec);
    3f22:	60 93 0e 08 	sts	0x080E, r22	; 0x80080e <curSegLenSq>
    3f26:	70 93 0f 08 	sts	0x080F, r23	; 0x80080f <curSegLenSq+0x1>
    3f2a:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <curSegLenSq+0x2>
    3f2e:	90 93 11 08 	sts	0x0811, r25	; 0x800811 <curSegLenSq+0x3>

            // recomputation of lCur is required, as it is needed for the next step
            FPoint_t ECur = { currentPos.x - pathFollower_status.segStart.x, currentPos.y - pathFollower_status.segStart.y };
            float
                // equivalent to P_dot_ECur = curSegVec.x * ECur.x + curSegVec.y * ECur.y, but more accurate
                P_dot_ECur = fmaf(curSegVec.x, ECur.x, curSegVec.y * ECur.y);
    3f32:	b8 01       	movw	r22, r16
    3f34:	11 0f       	add	r17, r17
    3f36:	88 0b       	sbc	r24, r24
    3f38:	99 0b       	sbc	r25, r25
    3f3a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3f3e:	9b 01       	movw	r18, r22
    3f40:	ac 01       	movw	r20, r24
    3f42:	6d a1       	ldd	r22, Y+37	; 0x25
    3f44:	7e a1       	ldd	r23, Y+38	; 0x26
    3f46:	8f a1       	ldd	r24, Y+39	; 0x27
    3f48:	98 a5       	ldd	r25, Y+40	; 0x28
    3f4a:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    3f4e:	a7 01       	movw	r20, r14
    3f50:	96 01       	movw	r18, r12
    3f52:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
    3f56:	6b 01       	movw	r12, r22
    3f58:	7c 01       	movw	r14, r24
    3f5a:	a9 81       	ldd	r26, Y+1	; 0x01
    3f5c:	ba 81       	ldd	r27, Y+2	; 0x02
    3f5e:	bd 01       	movw	r22, r26
    3f60:	bb 0f       	add	r27, r27
    3f62:	88 0b       	sbc	r24, r24
    3f64:	99 0b       	sbc	r25, r25
    3f66:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    3f6a:	9b 01       	movw	r18, r22
    3f6c:	ac 01       	movw	r20, r24
    3f6e:	69 a1       	ldd	r22, Y+33	; 0x21
    3f70:	7a a1       	ldd	r23, Y+34	; 0x22
    3f72:	8b a1       	ldd	r24, Y+35	; 0x23
    3f74:	9c a1       	ldd	r25, Y+36	; 0x24
    3f76:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    3f7a:	9b 01       	movw	r18, r22
    3f7c:	ac 01       	movw	r20, r24
    3f7e:	87 01       	movw	r16, r14
    3f80:	76 01       	movw	r14, r12
    3f82:	c3 01       	movw	r24, r6
    3f84:	b2 01       	movw	r22, r4
    3f86:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>
            lCur = P_dot_ECur / curSegLenSq;
    3f8a:	a5 01       	movw	r20, r10
    3f8c:	94 01       	movw	r18, r8
    3f8e:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
    3f92:	6b a7       	std	Y+43, r22	; 0x2b
    3f94:	7c a7       	std	Y+44, r23	; 0x2c
    3f96:	8d a7       	std	Y+45, r24	; 0x2d
    3f98:	9e a7       	std	Y+46, r25	; 0x2e

            curSegLen = sqrt(curSegLenSq);
    3f9a:	c5 01       	movw	r24, r10
    3f9c:	b4 01       	movw	r22, r8
    3f9e:	0e 94 6e 25 	call	0x4adc	; 0x4adc <sqrt>
    3fa2:	36 2f       	mov	r19, r22
    3fa4:	27 2f       	mov	r18, r23
    3fa6:	46 2f       	mov	r20, r22
    3fa8:	57 2f       	mov	r21, r23
    3faa:	bc 01       	movw	r22, r24
    3fac:	40 93 0a 08 	sts	0x080A, r20	; 0x80080a <curSegLen>
    3fb0:	50 93 0b 08 	sts	0x080B, r21	; 0x80080b <curSegLen+0x1>
    3fb4:	60 93 0c 08 	sts	0x080C, r22	; 0x80080c <curSegLen+0x2>
    3fb8:	70 93 0d 08 	sts	0x080D, r23	; 0x80080d <curSegLen+0x3>
    3fbc:	63 2f       	mov	r22, r19
    3fbe:	72 2f       	mov	r23, r18
        }

        // update the remaining local variables
        relL = pathFollower_lookaheadDistance / curSegLen;
    3fc0:	9b 01       	movw	r18, r22
    3fc2:	ac 01       	movw	r20, r24
    3fc4:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <pathFollower_lookaheadDistance>
    3fc8:	70 91 37 02 	lds	r23, 0x0237	; 0x800237 <pathFollower_lookaheadDistance+0x1>
    3fcc:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <pathFollower_lookaheadDistance+0x2>
    3fd0:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <pathFollower_lookaheadDistance+0x3>
    3fd4:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
    3fd8:	6b 01       	movw	r12, r22
    3fda:	7c 01       	movw	r14, r24
    3fdc:	60 93 f2 07 	sts	0x07F2, r22	; 0x8007f2 <relL>
    3fe0:	70 93 f3 07 	sts	0x07F3, r23	; 0x8007f3 <relL+0x1>
    3fe4:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <relL+0x2>
    3fe8:	90 93 f5 07 	sts	0x07F5, r25	; 0x8007f5 <relL+0x3>

        nextSegEnd = *(++pathPtr); // equals path[minSeg + 2]
    3fec:	ed 81       	ldd	r30, Y+5	; 0x05
    3fee:	fe 81       	ldd	r31, Y+6	; 0x06
    3ff0:	84 81       	ldd	r24, Z+4	; 0x04
    3ff2:	95 81       	ldd	r25, Z+5	; 0x05
    3ff4:	a6 81       	ldd	r26, Z+6	; 0x06
    3ff6:	b7 81       	ldd	r27, Z+7	; 0x07
    3ff8:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <nextSegEnd>
    3ffc:	90 93 07 08 	sts	0x0807, r25	; 0x800807 <nextSegEnd+0x1>
    4000:	a0 93 08 08 	sts	0x0808, r26	; 0x800808 <nextSegEnd+0x2>
    4004:	b0 93 09 08 	sts	0x0809, r27	; 0x800809 <nextSegEnd+0x3>
        nextSegVec.x = nextSegEnd.x - pathFollower_status.segEnd.x;
    4008:	bc 01       	movw	r22, r24
    400a:	29 85       	ldd	r18, Y+9	; 0x09
    400c:	3a 85       	ldd	r19, Y+10	; 0x0a
    400e:	62 1b       	sub	r22, r18
    4010:	73 0b       	sbc	r23, r19
    4012:	07 2e       	mov	r0, r23
    4014:	00 0c       	add	r0, r0
    4016:	88 0b       	sbc	r24, r24
    4018:	99 0b       	sbc	r25, r25
    401a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    401e:	2b 01       	movw	r4, r22
    4020:	3c 01       	movw	r6, r24
    4022:	60 93 fe 07 	sts	0x07FE, r22	; 0x8007fe <nextSegVec>
    4026:	70 93 ff 07 	sts	0x07FF, r23	; 0x8007ff <nextSegVec+0x1>
    402a:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <nextSegVec+0x2>
    402e:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <nextSegVec+0x3>
        nextSegVec.y = nextSegEnd.y - pathFollower_status.segEnd.y;
    4032:	60 91 08 08 	lds	r22, 0x0808	; 0x800808 <nextSegEnd+0x2>
    4036:	70 91 09 08 	lds	r23, 0x0809	; 0x800809 <nextSegEnd+0x3>
    403a:	62 19       	sub	r22, r2
    403c:	73 09       	sbc	r23, r3
    403e:	07 2e       	mov	r0, r23
    4040:	00 0c       	add	r0, r0
    4042:	88 0b       	sbc	r24, r24
    4044:	99 0b       	sbc	r25, r25
    4046:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    404a:	4b 01       	movw	r8, r22
    404c:	5c 01       	movw	r10, r24
    404e:	60 93 02 08 	sts	0x0802, r22	; 0x800802 <nextSegVec+0x4>
    4052:	70 93 03 08 	sts	0x0803, r23	; 0x800803 <nextSegVec+0x5>
    4056:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <nextSegVec+0x6>
    405a:	90 93 05 08 	sts	0x0805, r25	; 0x800805 <nextSegVec+0x7>

// *************************** LOCAL FUNCTIONS *********************************

// compute squared length of a vector
static inline float sqLen(const FPoint_t vec) {
    return square(vec.x) + square(vec.y);
    405e:	c3 01       	movw	r24, r6
    4060:	b2 01       	movw	r22, r4
    4062:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    4066:	2b 01       	movw	r4, r22
    4068:	3c 01       	movw	r6, r24
    406a:	c5 01       	movw	r24, r10
    406c:	b4 01       	movw	r22, r8
    406e:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    4072:	9b 01       	movw	r18, r22
    4074:	ac 01       	movw	r20, r24
    4076:	c3 01       	movw	r24, r6
    4078:	b2 01       	movw	r22, r4
    407a:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
        relL = pathFollower_lookaheadDistance / curSegLen;

        nextSegEnd = *(++pathPtr); // equals path[minSeg + 2]
        nextSegVec.x = nextSegEnd.x - pathFollower_status.segEnd.x;
        nextSegVec.y = nextSegEnd.y - pathFollower_status.segEnd.y;
        nextSegLenSq = sqLen(nextSegVec);
    407e:	60 93 fa 07 	sts	0x07FA, r22	; 0x8007fa <nextSegLenSq>
    4082:	70 93 fb 07 	sts	0x07FB, r23	; 0x8007fb <nextSegLenSq+0x1>
    4086:	80 93 fc 07 	sts	0x07FC, r24	; 0x8007fc <nextSegLenSq+0x2>
    408a:	90 93 fd 07 	sts	0x07FD, r25	; 0x8007fd <nextSegLenSq+0x3>
        nextSegLen = sqrt(nextSegLenSq);
    408e:	0e 94 6e 25 	call	0x4adc	; 0x4adc <sqrt>
    4092:	60 93 f6 07 	sts	0x07F6, r22	; 0x8007f6 <nextSegLen>
    4096:	70 93 f7 07 	sts	0x07F7, r23	; 0x8007f7 <nextSegLen+0x1>
    409a:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <nextSegLen+0x2>
    409e:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <nextSegLen+0x3>

        curSeg = minSeg;
    40a2:	49 a5       	ldd	r20, Y+41	; 0x29
    40a4:	5a a5       	ldd	r21, Y+42	; 0x2a
    40a6:	50 93 34 02 	sts	0x0234, r21	; 0x800234 <curSeg+0x1>
    40aa:	40 93 33 02 	sts	0x0233, r20	; 0x800233 <curSeg>
    40ae:	8b cd       	rjmp	.-1258   	; 0x3bc6 <pathFollower_update+0x728>
}


// similar to sqLen(pointVec(vec, l, start))
static inline float sqLenPointVecF(FPoint_t vec, float l, FPoint_t start) {
    return square(fmaf(vec.x, l, start.x)) + square(fmaf(vec.y, l, start.y));
    40b0:	83 01       	movw	r16, r6
    40b2:	72 01       	movw	r14, r4
    40b4:	4e a8       	ldd	r4, Y+54	; 0x36
    40b6:	5f a8       	ldd	r5, Y+55	; 0x37
    40b8:	68 ac       	ldd	r6, Y+56	; 0x38
    40ba:	79 ac       	ldd	r7, Y+57	; 0x39
    40bc:	77 fa       	bst	r7, 7
    40be:	70 94       	com	r7
    40c0:	77 f8       	bld	r7, 7
    40c2:	70 94       	com	r7
    40c4:	a3 01       	movw	r20, r6
    40c6:	92 01       	movw	r18, r4
    40c8:	6d 85       	ldd	r22, Y+13	; 0x0d
    40ca:	7e 85       	ldd	r23, Y+14	; 0x0e
    40cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    40ce:	98 89       	ldd	r25, Y+16	; 0x10
    40d0:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>
    40d4:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    40d8:	69 83       	std	Y+1, r22	; 0x01
    40da:	7a 83       	std	Y+2, r23	; 0x02
    40dc:	8b 83       	std	Y+3, r24	; 0x03
    40de:	9c 83       	std	Y+4, r25	; 0x04
    40e0:	85 01       	movw	r16, r10
    40e2:	74 01       	movw	r14, r8
    40e4:	a3 01       	movw	r20, r6
    40e6:	92 01       	movw	r18, r4
    40e8:	69 89       	ldd	r22, Y+17	; 0x11
    40ea:	7a 89       	ldd	r23, Y+18	; 0x12
    40ec:	8b 89       	ldd	r24, Y+19	; 0x13
    40ee:	9c 89       	ldd	r25, Y+20	; 0x14
    40f0:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>
    40f4:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <square>
    40f8:	9b 01       	movw	r18, r22
    40fa:	ac 01       	movw	r20, r24
    40fc:	69 81       	ldd	r22, Y+1	; 0x01
    40fe:	7a 81       	ldd	r23, Y+2	; 0x02
    4100:	8b 81       	ldd	r24, Y+3	; 0x03
    4102:	9c 81       	ldd	r25, Y+4	; 0x04
    4104:	0e 94 c4 21 	call	0x4388	; 0x4388 <__addsf3>
    4108:	69 83       	std	Y+1, r22	; 0x01
    410a:	7d 83       	std	Y+5, r23	; 0x05
    410c:	18 2f       	mov	r17, r24
    410e:	09 2f       	mov	r16, r25

        // if that distance is smaller than the current minimum distance
        // or if orthogonal projection onto the current segment is already
        // past the current segment (in which case we definitively need to
        // switch at least to the next segment)
        if ((sqDistOPCPNext < minDist) || (lCur > 1.0f)) {
    4110:	9b 01       	movw	r18, r22
    4112:	48 2f       	mov	r20, r24
    4114:	59 2f       	mov	r21, r25
    4116:	68 a9       	ldd	r22, Y+48	; 0x30
    4118:	79 a9       	ldd	r23, Y+49	; 0x31
    411a:	8a a9       	ldd	r24, Y+50	; 0x32
    411c:	9b a9       	ldd	r25, Y+51	; 0x33
    411e:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    4122:	18 16       	cp	r1, r24
    4124:	6c f0       	brlt	.+26     	; 0x4140 <pathFollower_update+0xca2>
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	40 e8       	ldi	r20, 0x80	; 128
    412c:	5f e3       	ldi	r21, 0x3F	; 63
    412e:	6b a5       	ldd	r22, Y+43	; 0x2b
    4130:	7c a5       	ldd	r23, Y+44	; 0x2c
    4132:	8d a5       	ldd	r24, Y+45	; 0x2d
    4134:	9e a5       	ldd	r25, Y+46	; 0x2e
    4136:	0e 94 23 24 	call	0x4846	; 0x4846 <__gesf2>
    413a:	18 16       	cp	r1, r24
    413c:	0c f0       	brlt	.+2      	; 0x4140 <pathFollower_update+0xca2>
    413e:	ac c0       	rjmp	.+344    	; 0x4298 <pathFollower_update+0xdfa>
            // update minDist and minSeg
            minDist = sqDistOPCPNext;
            ++minSeg;
    4140:	8c a9       	ldd	r24, Y+52	; 0x34
    4142:	9d a9       	ldd	r25, Y+53	; 0x35
    4144:	01 96       	adiw	r24, 0x01	; 1
    4146:	9a a7       	std	Y+42, r25	; 0x2a
    4148:	89 a7       	std	Y+41, r24	; 0x29
    414a:	1c 01       	movw	r2, r24
        // or if orthogonal projection onto the current segment is already
        // past the current segment (in which case we definitively need to
        // switch at least to the next segment)
        if ((sqDistOPCPNext < minDist) || (lCur > 1.0f)) {
            // update minDist and minSeg
            minDist = sqDistOPCPNext;
    414c:	99 81       	ldd	r25, Y+1	; 0x01
    414e:	98 ab       	std	Y+48, r25	; 0x30
    4150:	ad 81       	ldd	r26, Y+5	; 0x05
    4152:	a9 ab       	std	Y+49, r26	; 0x31
    4154:	1a ab       	std	Y+50, r17	; 0x32
    4156:	0b ab       	std	Y+51, r16	; 0x33
    4158:	f3 ca       	rjmp	.-2586   	; 0x3740 <pathFollower_update+0x2a2>
        float Lrem = (relLA - 1.0f) * curSegLen;

        // if lookahead point is on the next segment
        if (Lrem <= nextSegLen) {
            // compute lookahead point on next segment
            pathFollower_status.lookahead = pointVec(nextSegVec, Lrem / nextSegLen, pathFollower_status.segEnd);
    415a:	c7 01       	movw	r24, r14
    415c:	b6 01       	movw	r22, r12
    415e:	0e 94 3a 22 	call	0x4474	; 0x4474 <__divsf3>
    4162:	4b 01       	movw	r8, r22
    4164:	5c 01       	movw	r10, r24
// compute the location of a point on a line in the relative distance l (w.r.t.
// length of vector vec) where the line is determined by its start point start
// and the direction vector vec.
static inline FPoint_t pointVec(FPoint_t vec, float l, Point_t start) {
    // compute FPoint_t p = { (vec.x * l) + start.x, (vec.y * l) + start.y };
    FPoint_t p = { fmaf(vec.x, l, start.x), fmaf(vec.y, l, start.y) };
    4166:	60 91 25 08 	lds	r22, 0x0825	; 0x800825 <pathFollower_status+0x5>
    416a:	70 91 26 08 	lds	r23, 0x0826	; 0x800826 <pathFollower_status+0x6>
    416e:	07 2e       	mov	r0, r23
    4170:	00 0c       	add	r0, r0
    4172:	88 0b       	sbc	r24, r24
    4174:	99 0b       	sbc	r25, r25
    4176:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    417a:	7b 01       	movw	r14, r22
    417c:	8c 01       	movw	r16, r24
    417e:	60 91 fe 07 	lds	r22, 0x07FE	; 0x8007fe <nextSegVec>
    4182:	70 91 ff 07 	lds	r23, 0x07FF	; 0x8007ff <nextSegVec+0x1>
    4186:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <nextSegVec+0x2>
    418a:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <nextSegVec+0x3>
    418e:	a5 01       	movw	r20, r10
    4190:	94 01       	movw	r18, r8
    4192:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>
    4196:	2b 01       	movw	r4, r22
    4198:	3c 01       	movw	r6, r24
    419a:	60 91 27 08 	lds	r22, 0x0827	; 0x800827 <pathFollower_status+0x7>
    419e:	70 91 28 08 	lds	r23, 0x0828	; 0x800828 <pathFollower_status+0x8>
    41a2:	07 2e       	mov	r0, r23
    41a4:	00 0c       	add	r0, r0
    41a6:	88 0b       	sbc	r24, r24
    41a8:	99 0b       	sbc	r25, r25
    41aa:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    41ae:	7b 01       	movw	r14, r22
    41b0:	8c 01       	movw	r16, r24
    41b2:	60 91 02 08 	lds	r22, 0x0802	; 0x800802 <nextSegVec+0x4>
    41b6:	70 91 03 08 	lds	r23, 0x0803	; 0x800803 <nextSegVec+0x5>
    41ba:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <nextSegVec+0x6>
    41be:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <nextSegVec+0x7>
    41c2:	a5 01       	movw	r20, r10
    41c4:	94 01       	movw	r18, r8
    41c6:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>
        float Lrem = (relLA - 1.0f) * curSegLen;

        // if lookahead point is on the next segment
        if (Lrem <= nextSegLen) {
            // compute lookahead point on next segment
            pathFollower_status.lookahead = pointVec(nextSegVec, Lrem / nextSegLen, pathFollower_status.segEnd);
    41ca:	40 92 29 08 	sts	0x0829, r4	; 0x800829 <pathFollower_status+0x9>
    41ce:	50 92 2a 08 	sts	0x082A, r5	; 0x80082a <pathFollower_status+0xa>
    41d2:	60 92 2b 08 	sts	0x082B, r6	; 0x80082b <pathFollower_status+0xb>
    41d6:	70 92 2c 08 	sts	0x082C, r7	; 0x80082c <pathFollower_status+0xc>
    41da:	60 93 2d 08 	sts	0x082D, r22	; 0x80082d <pathFollower_status+0xd>
    41de:	70 93 2e 08 	sts	0x082E, r23	; 0x80082e <pathFollower_status+0xe>
    41e2:	80 93 2f 08 	sts	0x082F, r24	; 0x80082f <pathFollower_status+0xf>
    41e6:	90 93 30 08 	sts	0x0830, r25	; 0x800830 <pathFollower_status+0x10>
    41ea:	b1 cb       	rjmp	.-2206   	; 0x394e <pathFollower_update+0x4b0>
        segStart = segEnd;
    }

    // if minSeg hit the maximum, output an error (note that this should not happen)
    if (minSeg == pathLength) {
        pathFollowerErrorP("Unable to locate segment for orthogonal projection");
    41ec:	88 eb       	ldi	r24, 0xB8	; 184
    41ee:	92 e0       	ldi	r25, 0x02	; 2
    41f0:	9f 93       	push	r25
    41f2:	8f 93       	push	r24
    41f4:	1f 92       	push	r1
    41f6:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <communication_log_P>
    41fa:	c0 90 f2 07 	lds	r12, 0x07F2	; 0x8007f2 <relL>
    41fe:	d0 90 f3 07 	lds	r13, 0x07F3	; 0x8007f3 <relL+0x1>
    4202:	e0 90 f4 07 	lds	r14, 0x07F4	; 0x8007f4 <relL+0x2>
    4206:	f0 90 f5 07 	lds	r15, 0x07F5	; 0x8007f5 <relL+0x3>
    420a:	0f 90       	pop	r0
    420c:	0f 90       	pop	r0
    420e:	0f 90       	pop	r0
    4210:	da cc       	rjmp	.-1612   	; 0x3bc6 <pathFollower_update+0x728>
// compute the location of a point on a line in the relative distance l (w.r.t.
// length of vector vec) where the line is determined by its start point start
// and the direction vector vec.
static inline FPoint_t pointVec(FPoint_t vec, float l, Point_t start) {
    // compute FPoint_t p = { (vec.x * l) + start.x, (vec.y * l) + start.y };
    FPoint_t p = { fmaf(vec.x, l, start.x), fmaf(vec.y, l, start.y) };
    4212:	60 91 21 08 	lds	r22, 0x0821	; 0x800821 <pathFollower_status+0x1>
    4216:	70 91 22 08 	lds	r23, 0x0822	; 0x800822 <pathFollower_status+0x2>
    421a:	07 2e       	mov	r0, r23
    421c:	00 0c       	add	r0, r0
    421e:	88 0b       	sbc	r24, r24
    4220:	99 0b       	sbc	r25, r25
    4222:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    4226:	7b 01       	movw	r14, r22
    4228:	8c 01       	movw	r16, r24
    422a:	60 91 12 08 	lds	r22, 0x0812	; 0x800812 <curSegVec>
    422e:	70 91 13 08 	lds	r23, 0x0813	; 0x800813 <curSegVec+0x1>
    4232:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <curSegVec+0x2>
    4236:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <curSegVec+0x3>
    423a:	a5 01       	movw	r20, r10
    423c:	94 01       	movw	r18, r8
    423e:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>
    4242:	2b 01       	movw	r4, r22
    4244:	3c 01       	movw	r6, r24
    4246:	60 91 23 08 	lds	r22, 0x0823	; 0x800823 <pathFollower_status+0x3>
    424a:	70 91 24 08 	lds	r23, 0x0824	; 0x800824 <pathFollower_status+0x4>
    424e:	07 2e       	mov	r0, r23
    4250:	00 0c       	add	r0, r0
    4252:	88 0b       	sbc	r24, r24
    4254:	99 0b       	sbc	r25, r25
    4256:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__floatsisf>
    425a:	7b 01       	movw	r14, r22
    425c:	8c 01       	movw	r16, r24
    425e:	60 91 16 08 	lds	r22, 0x0816	; 0x800816 <curSegVec+0x4>
    4262:	70 91 17 08 	lds	r23, 0x0817	; 0x800817 <curSegVec+0x5>
    4266:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <curSegVec+0x6>
    426a:	90 91 19 08 	lds	r25, 0x0819	; 0x800819 <curSegVec+0x7>
    426e:	a5 01       	movw	r20, r10
    4270:	94 01       	movw	r18, r8
    4272:	0e 94 1f 23 	call	0x463e	; 0x463e <fma>

    // if lookahead point is on the current segment
    if (relLA <= 1.0f) {

        // compute lookahead point on current segment
        pathFollower_status.lookahead = pointVec(curSegVec, relLA, pathFollower_status.segStart);
    4276:	40 92 29 08 	sts	0x0829, r4	; 0x800829 <pathFollower_status+0x9>
    427a:	50 92 2a 08 	sts	0x082A, r5	; 0x80082a <pathFollower_status+0xa>
    427e:	60 92 2b 08 	sts	0x082B, r6	; 0x80082b <pathFollower_status+0xb>
    4282:	70 92 2c 08 	sts	0x082C, r7	; 0x80082c <pathFollower_status+0xc>
    4286:	60 93 2d 08 	sts	0x082D, r22	; 0x80082d <pathFollower_status+0xd>
    428a:	70 93 2e 08 	sts	0x082E, r23	; 0x80082e <pathFollower_status+0xe>
    428e:	80 93 2f 08 	sts	0x082F, r24	; 0x80082f <pathFollower_status+0xf>
    4292:	90 93 30 08 	sts	0x0830, r25	; 0x800830 <pathFollower_status+0x10>
    4296:	5b cb       	rjmp	.-2378   	; 0x394e <pathFollower_update+0x4b0>

        // if that distance is smaller than the current minimum distance
        // or if orthogonal projection onto the current segment is already
        // past the current segment (in which case we definitively need to
        // switch at least to the next segment)
        if ((sqDistOPCPNext < minDist) || (lCur > 1.0f)) {
    4298:	2c a8       	ldd	r2, Y+52	; 0x34
    429a:	3d a8       	ldd	r3, Y+53	; 0x35
    429c:	3f ef       	ldi	r19, 0xFF	; 255
    429e:	23 1a       	sub	r2, r19
    42a0:	33 0a       	sbc	r3, r19

    //communication_log(LEVEL_FINE, "%.3f %.3f", lCur, lNext);

    // initialize minSeg with the current segment index
    // minSeg holds the segment index with smallest squared distance minDist
    int16_t minSeg = curSeg;
    42a2:	4c a9       	ldd	r20, Y+52	; 0x34
    42a4:	5d a9       	ldd	r21, Y+53	; 0x35
    42a6:	5a a7       	std	Y+42, r21	; 0x2a
    42a8:	49 a7       	std	Y+41, r20	; 0x29
    42aa:	4a ca       	rjmp	.-2924   	; 0x3740 <pathFollower_update+0x2a2>
        // if a switch to the next segment is needed, some required variables
        // are stored already in local variables
        if (minSeg == curSeg + 1) {
            ++pathPtr; // advance by one, since access to path[minSeg + 2] is required after this block
            lCur = lNext;
            curSegLenSq = nextSegLenSq;
    42ac:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <nextSegLenSq>
    42b0:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <nextSegLenSq+0x1>
    42b4:	a0 91 fc 07 	lds	r26, 0x07FC	; 0x8007fc <nextSegLenSq+0x2>
    42b8:	b0 91 fd 07 	lds	r27, 0x07FD	; 0x8007fd <nextSegLenSq+0x3>
    42bc:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <curSegLenSq>
    42c0:	90 93 0f 08 	sts	0x080F, r25	; 0x80080f <curSegLenSq+0x1>
    42c4:	a0 93 10 08 	sts	0x0810, r26	; 0x800810 <curSegLenSq+0x2>
    42c8:	b0 93 11 08 	sts	0x0811, r27	; 0x800811 <curSegLenSq+0x3>
            curSegVec = nextSegVec;
    42cc:	88 e0       	ldi	r24, 0x08	; 8
    42ce:	ee ef       	ldi	r30, 0xFE	; 254
    42d0:	f7 e0       	ldi	r31, 0x07	; 7
    42d2:	a2 e1       	ldi	r26, 0x12	; 18
    42d4:	b8 e0       	ldi	r27, 0x08	; 8
    42d6:	01 90       	ld	r0, Z+
    42d8:	0d 92       	st	X+, r0
    42da:	8a 95       	dec	r24
    42dc:	e1 f7       	brne	.-8      	; 0x42d6 <pathFollower_update+0xe38>
            pathFollower_status.segStart = pathFollower_status.segEnd;
    42de:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <pathFollower_status+0x5>
    42e2:	90 91 26 08 	lds	r25, 0x0826	; 0x800826 <pathFollower_status+0x6>
    42e6:	a0 91 27 08 	lds	r26, 0x0827	; 0x800827 <pathFollower_status+0x7>
    42ea:	b0 91 28 08 	lds	r27, 0x0828	; 0x800828 <pathFollower_status+0x8>
    42ee:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <pathFollower_status+0x1>
    42f2:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <pathFollower_status+0x2>
    42f6:	a0 93 23 08 	sts	0x0823, r26	; 0x800823 <pathFollower_status+0x3>
    42fa:	b0 93 24 08 	sts	0x0824, r27	; 0x800824 <pathFollower_status+0x4>
            pathFollower_status.segEnd = nextSegEnd;
    42fe:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <nextSegEnd>
    4302:	90 91 07 08 	lds	r25, 0x0807	; 0x800807 <nextSegEnd+0x1>
    4306:	a0 91 08 08 	lds	r26, 0x0808	; 0x800808 <nextSegEnd+0x2>
    430a:	b0 91 09 08 	lds	r27, 0x0809	; 0x800809 <nextSegEnd+0x3>
    430e:	58 2f       	mov	r21, r24
    4310:	49 2f       	mov	r20, r25
    4312:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <pathFollower_status+0x5>
    4316:	90 93 26 08 	sts	0x0826, r25	; 0x800826 <pathFollower_status+0x6>
    431a:	a0 93 27 08 	sts	0x0827, r26	; 0x800827 <pathFollower_status+0x7>
    431e:	b0 93 28 08 	sts	0x0828, r27	; 0x800828 <pathFollower_status+0x8>
            curSegLen = nextSegLen;
    4322:	60 91 f6 07 	lds	r22, 0x07F6	; 0x8007f6 <nextSegLen>
    4326:	70 91 f7 07 	lds	r23, 0x07F7	; 0x8007f7 <nextSegLen+0x1>
    432a:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <nextSegLen+0x2>
    432e:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <nextSegLen+0x3>
    4332:	8b 01       	movw	r16, r22
    4334:	9c 01       	movw	r18, r24
    4336:	00 93 0a 08 	sts	0x080A, r16	; 0x80080a <curSegLen>
    433a:	10 93 0b 08 	sts	0x080B, r17	; 0x80080b <curSegLen+0x1>
    433e:	20 93 0c 08 	sts	0x080C, r18	; 0x80080c <curSegLen+0x2>
    4342:	30 93 0d 08 	sts	0x080D, r19	; 0x80080d <curSegLen+0x3>
    4346:	59 87       	std	Y+9, r21	; 0x09
    4348:	4a 87       	std	Y+10, r20	; 0x0a
    434a:	20 90 27 08 	lds	r2, 0x0827	; 0x800827 <pathFollower_status+0x7>
    434e:	30 90 28 08 	lds	r3, 0x0828	; 0x800828 <pathFollower_status+0x8>

        // if a switch to the next segment is needed, some required variables
        // are stored already in local variables
        if (minSeg == curSeg + 1) {
            ++pathPtr; // advance by one, since access to path[minSeg + 2] is required after this block
            lCur = lNext;
    4352:	2e a9       	ldd	r18, Y+54	; 0x36
    4354:	3f a9       	ldd	r19, Y+55	; 0x37
    4356:	48 ad       	ldd	r20, Y+56	; 0x38
    4358:	59 ad       	ldd	r21, Y+57	; 0x39
    435a:	2b a7       	std	Y+43, r18	; 0x2b
    435c:	3c a7       	std	Y+44, r19	; 0x2c
    435e:	4d a7       	std	Y+45, r20	; 0x2d
    4360:	5e a7       	std	Y+46, r21	; 0x2e
    4362:	2e ce       	rjmp	.-932    	; 0x3fc0 <pathFollower_update+0xb22>

00004364 <acos>:
    4364:	9f 93       	push	r25
    4366:	9f 77       	andi	r25, 0x7F	; 127
    4368:	0e 94 28 23 	call	0x4650	; 0x4650 <__fp_arccos>
    436c:	0f 90       	pop	r0
    436e:	00 20       	and	r0, r0
    4370:	42 f4       	brpl	.+16     	; 0x4382 <acos+0x1e>
    4372:	90 58       	subi	r25, 0x80	; 128
    4374:	a2 ea       	ldi	r26, 0xA2	; 162
    4376:	2a ed       	ldi	r18, 0xDA	; 218
    4378:	3f e0       	ldi	r19, 0x0F	; 15
    437a:	49 e4       	ldi	r20, 0x49	; 73
    437c:	50 e4       	ldi	r21, 0x40	; 64
    437e:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__addsf3x>
    4382:	0c 94 d5 23 	jmp	0x47aa	; 0x47aa <__fp_round>

00004386 <__subsf3>:
    4386:	50 58       	subi	r21, 0x80	; 128

00004388 <__addsf3>:
    4388:	bb 27       	eor	r27, r27
    438a:	aa 27       	eor	r26, r26
    438c:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__addsf3x>
    4390:	0c 94 d5 23 	jmp	0x47aa	; 0x47aa <__fp_round>
    4394:	0e 94 9c 23 	call	0x4738	; 0x4738 <__fp_pscA>
    4398:	38 f0       	brcs	.+14     	; 0x43a8 <__addsf3+0x20>
    439a:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fp_pscB>
    439e:	20 f0       	brcs	.+8      	; 0x43a8 <__addsf3+0x20>
    43a0:	39 f4       	brne	.+14     	; 0x43b0 <__addsf3+0x28>
    43a2:	9f 3f       	cpi	r25, 0xFF	; 255
    43a4:	19 f4       	brne	.+6      	; 0x43ac <__addsf3+0x24>
    43a6:	26 f4       	brtc	.+8      	; 0x43b0 <__addsf3+0x28>
    43a8:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__fp_nan>
    43ac:	0e f4       	brtc	.+2      	; 0x43b0 <__addsf3+0x28>
    43ae:	e0 95       	com	r30
    43b0:	e7 fb       	bst	r30, 7
    43b2:	0c 94 6c 23 	jmp	0x46d8	; 0x46d8 <__fp_inf>

000043b6 <__addsf3x>:
    43b6:	e9 2f       	mov	r30, r25
    43b8:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__fp_split3>
    43bc:	58 f3       	brcs	.-42     	; 0x4394 <__addsf3+0xc>
    43be:	ba 17       	cp	r27, r26
    43c0:	62 07       	cpc	r22, r18
    43c2:	73 07       	cpc	r23, r19
    43c4:	84 07       	cpc	r24, r20
    43c6:	95 07       	cpc	r25, r21
    43c8:	20 f0       	brcs	.+8      	; 0x43d2 <__addsf3x+0x1c>
    43ca:	79 f4       	brne	.+30     	; 0x43ea <__addsf3x+0x34>
    43cc:	a6 f5       	brtc	.+104    	; 0x4436 <__addsf3x+0x80>
    43ce:	0c 94 1c 24 	jmp	0x4838	; 0x4838 <__fp_zero>
    43d2:	0e f4       	brtc	.+2      	; 0x43d6 <__addsf3x+0x20>
    43d4:	e0 95       	com	r30
    43d6:	0b 2e       	mov	r0, r27
    43d8:	ba 2f       	mov	r27, r26
    43da:	a0 2d       	mov	r26, r0
    43dc:	0b 01       	movw	r0, r22
    43de:	b9 01       	movw	r22, r18
    43e0:	90 01       	movw	r18, r0
    43e2:	0c 01       	movw	r0, r24
    43e4:	ca 01       	movw	r24, r20
    43e6:	a0 01       	movw	r20, r0
    43e8:	11 24       	eor	r1, r1
    43ea:	ff 27       	eor	r31, r31
    43ec:	59 1b       	sub	r21, r25
    43ee:	99 f0       	breq	.+38     	; 0x4416 <__addsf3x+0x60>
    43f0:	59 3f       	cpi	r21, 0xF9	; 249
    43f2:	50 f4       	brcc	.+20     	; 0x4408 <__addsf3x+0x52>
    43f4:	50 3e       	cpi	r21, 0xE0	; 224
    43f6:	68 f1       	brcs	.+90     	; 0x4452 <__addsf3x+0x9c>
    43f8:	1a 16       	cp	r1, r26
    43fa:	f0 40       	sbci	r31, 0x00	; 0
    43fc:	a2 2f       	mov	r26, r18
    43fe:	23 2f       	mov	r18, r19
    4400:	34 2f       	mov	r19, r20
    4402:	44 27       	eor	r20, r20
    4404:	58 5f       	subi	r21, 0xF8	; 248
    4406:	f3 cf       	rjmp	.-26     	; 0x43ee <__addsf3x+0x38>
    4408:	46 95       	lsr	r20
    440a:	37 95       	ror	r19
    440c:	27 95       	ror	r18
    440e:	a7 95       	ror	r26
    4410:	f0 40       	sbci	r31, 0x00	; 0
    4412:	53 95       	inc	r21
    4414:	c9 f7       	brne	.-14     	; 0x4408 <__addsf3x+0x52>
    4416:	7e f4       	brtc	.+30     	; 0x4436 <__addsf3x+0x80>
    4418:	1f 16       	cp	r1, r31
    441a:	ba 0b       	sbc	r27, r26
    441c:	62 0b       	sbc	r22, r18
    441e:	73 0b       	sbc	r23, r19
    4420:	84 0b       	sbc	r24, r20
    4422:	ba f0       	brmi	.+46     	; 0x4452 <__addsf3x+0x9c>
    4424:	91 50       	subi	r25, 0x01	; 1
    4426:	a1 f0       	breq	.+40     	; 0x4450 <__addsf3x+0x9a>
    4428:	ff 0f       	add	r31, r31
    442a:	bb 1f       	adc	r27, r27
    442c:	66 1f       	adc	r22, r22
    442e:	77 1f       	adc	r23, r23
    4430:	88 1f       	adc	r24, r24
    4432:	c2 f7       	brpl	.-16     	; 0x4424 <__addsf3x+0x6e>
    4434:	0e c0       	rjmp	.+28     	; 0x4452 <__addsf3x+0x9c>
    4436:	ba 0f       	add	r27, r26
    4438:	62 1f       	adc	r22, r18
    443a:	73 1f       	adc	r23, r19
    443c:	84 1f       	adc	r24, r20
    443e:	48 f4       	brcc	.+18     	; 0x4452 <__addsf3x+0x9c>
    4440:	87 95       	ror	r24
    4442:	77 95       	ror	r23
    4444:	67 95       	ror	r22
    4446:	b7 95       	ror	r27
    4448:	f7 95       	ror	r31
    444a:	9e 3f       	cpi	r25, 0xFE	; 254
    444c:	08 f0       	brcs	.+2      	; 0x4450 <__addsf3x+0x9a>
    444e:	b0 cf       	rjmp	.-160    	; 0x43b0 <__addsf3+0x28>
    4450:	93 95       	inc	r25
    4452:	88 0f       	add	r24, r24
    4454:	08 f0       	brcs	.+2      	; 0x4458 <__addsf3x+0xa2>
    4456:	99 27       	eor	r25, r25
    4458:	ee 0f       	add	r30, r30
    445a:	97 95       	ror	r25
    445c:	87 95       	ror	r24
    445e:	08 95       	ret

00004460 <__cmpsf2>:
    4460:	0e 94 48 23 	call	0x4690	; 0x4690 <__fp_cmp>
    4464:	08 f4       	brcc	.+2      	; 0x4468 <__cmpsf2+0x8>
    4466:	81 e0       	ldi	r24, 0x01	; 1
    4468:	08 95       	ret

0000446a <cos>:
    446a:	0e 94 ac 23 	call	0x4758	; 0x4758 <__fp_rempio2>
    446e:	e3 95       	inc	r30
    4470:	0c 94 e6 23 	jmp	0x47cc	; 0x47cc <__fp_sinus>

00004474 <__divsf3>:
    4474:	0e 94 4e 22 	call	0x449c	; 0x449c <__divsf3x>
    4478:	0c 94 d5 23 	jmp	0x47aa	; 0x47aa <__fp_round>
    447c:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fp_pscB>
    4480:	58 f0       	brcs	.+22     	; 0x4498 <__divsf3+0x24>
    4482:	0e 94 9c 23 	call	0x4738	; 0x4738 <__fp_pscA>
    4486:	40 f0       	brcs	.+16     	; 0x4498 <__divsf3+0x24>
    4488:	29 f4       	brne	.+10     	; 0x4494 <__divsf3+0x20>
    448a:	5f 3f       	cpi	r21, 0xFF	; 255
    448c:	29 f0       	breq	.+10     	; 0x4498 <__divsf3+0x24>
    448e:	0c 94 6c 23 	jmp	0x46d8	; 0x46d8 <__fp_inf>
    4492:	51 11       	cpse	r21, r1
    4494:	0c 94 1d 24 	jmp	0x483a	; 0x483a <__fp_szero>
    4498:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__fp_nan>

0000449c <__divsf3x>:
    449c:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__fp_split3>
    44a0:	68 f3       	brcs	.-38     	; 0x447c <__divsf3+0x8>

000044a2 <__divsf3_pse>:
    44a2:	99 23       	and	r25, r25
    44a4:	b1 f3       	breq	.-20     	; 0x4492 <__divsf3+0x1e>
    44a6:	55 23       	and	r21, r21
    44a8:	91 f3       	breq	.-28     	; 0x448e <__divsf3+0x1a>
    44aa:	95 1b       	sub	r25, r21
    44ac:	55 0b       	sbc	r21, r21
    44ae:	bb 27       	eor	r27, r27
    44b0:	aa 27       	eor	r26, r26
    44b2:	62 17       	cp	r22, r18
    44b4:	73 07       	cpc	r23, r19
    44b6:	84 07       	cpc	r24, r20
    44b8:	38 f0       	brcs	.+14     	; 0x44c8 <__divsf3_pse+0x26>
    44ba:	9f 5f       	subi	r25, 0xFF	; 255
    44bc:	5f 4f       	sbci	r21, 0xFF	; 255
    44be:	22 0f       	add	r18, r18
    44c0:	33 1f       	adc	r19, r19
    44c2:	44 1f       	adc	r20, r20
    44c4:	aa 1f       	adc	r26, r26
    44c6:	a9 f3       	breq	.-22     	; 0x44b2 <__divsf3_pse+0x10>
    44c8:	35 d0       	rcall	.+106    	; 0x4534 <__divsf3_pse+0x92>
    44ca:	0e 2e       	mov	r0, r30
    44cc:	3a f0       	brmi	.+14     	; 0x44dc <__divsf3_pse+0x3a>
    44ce:	e0 e8       	ldi	r30, 0x80	; 128
    44d0:	32 d0       	rcall	.+100    	; 0x4536 <__divsf3_pse+0x94>
    44d2:	91 50       	subi	r25, 0x01	; 1
    44d4:	50 40       	sbci	r21, 0x00	; 0
    44d6:	e6 95       	lsr	r30
    44d8:	00 1c       	adc	r0, r0
    44da:	ca f7       	brpl	.-14     	; 0x44ce <__divsf3_pse+0x2c>
    44dc:	2b d0       	rcall	.+86     	; 0x4534 <__divsf3_pse+0x92>
    44de:	fe 2f       	mov	r31, r30
    44e0:	29 d0       	rcall	.+82     	; 0x4534 <__divsf3_pse+0x92>
    44e2:	66 0f       	add	r22, r22
    44e4:	77 1f       	adc	r23, r23
    44e6:	88 1f       	adc	r24, r24
    44e8:	bb 1f       	adc	r27, r27
    44ea:	26 17       	cp	r18, r22
    44ec:	37 07       	cpc	r19, r23
    44ee:	48 07       	cpc	r20, r24
    44f0:	ab 07       	cpc	r26, r27
    44f2:	b0 e8       	ldi	r27, 0x80	; 128
    44f4:	09 f0       	breq	.+2      	; 0x44f8 <__divsf3_pse+0x56>
    44f6:	bb 0b       	sbc	r27, r27
    44f8:	80 2d       	mov	r24, r0
    44fa:	bf 01       	movw	r22, r30
    44fc:	ff 27       	eor	r31, r31
    44fe:	93 58       	subi	r25, 0x83	; 131
    4500:	5f 4f       	sbci	r21, 0xFF	; 255
    4502:	3a f0       	brmi	.+14     	; 0x4512 <__divsf3_pse+0x70>
    4504:	9e 3f       	cpi	r25, 0xFE	; 254
    4506:	51 05       	cpc	r21, r1
    4508:	78 f0       	brcs	.+30     	; 0x4528 <__divsf3_pse+0x86>
    450a:	0c 94 6c 23 	jmp	0x46d8	; 0x46d8 <__fp_inf>
    450e:	0c 94 1d 24 	jmp	0x483a	; 0x483a <__fp_szero>
    4512:	5f 3f       	cpi	r21, 0xFF	; 255
    4514:	e4 f3       	brlt	.-8      	; 0x450e <__divsf3_pse+0x6c>
    4516:	98 3e       	cpi	r25, 0xE8	; 232
    4518:	d4 f3       	brlt	.-12     	; 0x450e <__divsf3_pse+0x6c>
    451a:	86 95       	lsr	r24
    451c:	77 95       	ror	r23
    451e:	67 95       	ror	r22
    4520:	b7 95       	ror	r27
    4522:	f7 95       	ror	r31
    4524:	9f 5f       	subi	r25, 0xFF	; 255
    4526:	c9 f7       	brne	.-14     	; 0x451a <__divsf3_pse+0x78>
    4528:	88 0f       	add	r24, r24
    452a:	91 1d       	adc	r25, r1
    452c:	96 95       	lsr	r25
    452e:	87 95       	ror	r24
    4530:	97 f9       	bld	r25, 7
    4532:	08 95       	ret
    4534:	e1 e0       	ldi	r30, 0x01	; 1
    4536:	66 0f       	add	r22, r22
    4538:	77 1f       	adc	r23, r23
    453a:	88 1f       	adc	r24, r24
    453c:	bb 1f       	adc	r27, r27
    453e:	62 17       	cp	r22, r18
    4540:	73 07       	cpc	r23, r19
    4542:	84 07       	cpc	r24, r20
    4544:	ba 07       	cpc	r27, r26
    4546:	20 f0       	brcs	.+8      	; 0x4550 <__divsf3_pse+0xae>
    4548:	62 1b       	sub	r22, r18
    454a:	73 0b       	sbc	r23, r19
    454c:	84 0b       	sbc	r24, r20
    454e:	ba 0b       	sbc	r27, r26
    4550:	ee 1f       	adc	r30, r30
    4552:	88 f7       	brcc	.-30     	; 0x4536 <__divsf3_pse+0x94>
    4554:	e0 95       	com	r30
    4556:	08 95       	ret

00004558 <__fixsfsi>:
    4558:	0e 94 b3 22 	call	0x4566	; 0x4566 <__fixunssfsi>
    455c:	68 94       	set
    455e:	b1 11       	cpse	r27, r1
    4560:	0c 94 1d 24 	jmp	0x483a	; 0x483a <__fp_szero>
    4564:	08 95       	ret

00004566 <__fixunssfsi>:
    4566:	0e 94 02 24 	call	0x4804	; 0x4804 <__fp_splitA>
    456a:	88 f0       	brcs	.+34     	; 0x458e <__fixunssfsi+0x28>
    456c:	9f 57       	subi	r25, 0x7F	; 127
    456e:	98 f0       	brcs	.+38     	; 0x4596 <__fixunssfsi+0x30>
    4570:	b9 2f       	mov	r27, r25
    4572:	99 27       	eor	r25, r25
    4574:	b7 51       	subi	r27, 0x17	; 23
    4576:	b0 f0       	brcs	.+44     	; 0x45a4 <__fixunssfsi+0x3e>
    4578:	e1 f0       	breq	.+56     	; 0x45b2 <__fixunssfsi+0x4c>
    457a:	66 0f       	add	r22, r22
    457c:	77 1f       	adc	r23, r23
    457e:	88 1f       	adc	r24, r24
    4580:	99 1f       	adc	r25, r25
    4582:	1a f0       	brmi	.+6      	; 0x458a <__fixunssfsi+0x24>
    4584:	ba 95       	dec	r27
    4586:	c9 f7       	brne	.-14     	; 0x457a <__fixunssfsi+0x14>
    4588:	14 c0       	rjmp	.+40     	; 0x45b2 <__fixunssfsi+0x4c>
    458a:	b1 30       	cpi	r27, 0x01	; 1
    458c:	91 f0       	breq	.+36     	; 0x45b2 <__fixunssfsi+0x4c>
    458e:	0e 94 1c 24 	call	0x4838	; 0x4838 <__fp_zero>
    4592:	b1 e0       	ldi	r27, 0x01	; 1
    4594:	08 95       	ret
    4596:	0c 94 1c 24 	jmp	0x4838	; 0x4838 <__fp_zero>
    459a:	67 2f       	mov	r22, r23
    459c:	78 2f       	mov	r23, r24
    459e:	88 27       	eor	r24, r24
    45a0:	b8 5f       	subi	r27, 0xF8	; 248
    45a2:	39 f0       	breq	.+14     	; 0x45b2 <__fixunssfsi+0x4c>
    45a4:	b9 3f       	cpi	r27, 0xF9	; 249
    45a6:	cc f3       	brlt	.-14     	; 0x459a <__fixunssfsi+0x34>
    45a8:	86 95       	lsr	r24
    45aa:	77 95       	ror	r23
    45ac:	67 95       	ror	r22
    45ae:	b3 95       	inc	r27
    45b0:	d9 f7       	brne	.-10     	; 0x45a8 <__fixunssfsi+0x42>
    45b2:	3e f4       	brtc	.+14     	; 0x45c2 <__fixunssfsi+0x5c>
    45b4:	90 95       	com	r25
    45b6:	80 95       	com	r24
    45b8:	70 95       	com	r23
    45ba:	61 95       	neg	r22
    45bc:	7f 4f       	sbci	r23, 0xFF	; 255
    45be:	8f 4f       	sbci	r24, 0xFF	; 255
    45c0:	9f 4f       	sbci	r25, 0xFF	; 255
    45c2:	08 95       	ret

000045c4 <__floatunsisf>:
    45c4:	e8 94       	clt
    45c6:	09 c0       	rjmp	.+18     	; 0x45da <__floatsisf+0x12>

000045c8 <__floatsisf>:
    45c8:	97 fb       	bst	r25, 7
    45ca:	3e f4       	brtc	.+14     	; 0x45da <__floatsisf+0x12>
    45cc:	90 95       	com	r25
    45ce:	80 95       	com	r24
    45d0:	70 95       	com	r23
    45d2:	61 95       	neg	r22
    45d4:	7f 4f       	sbci	r23, 0xFF	; 255
    45d6:	8f 4f       	sbci	r24, 0xFF	; 255
    45d8:	9f 4f       	sbci	r25, 0xFF	; 255
    45da:	99 23       	and	r25, r25
    45dc:	a9 f0       	breq	.+42     	; 0x4608 <__floatsisf+0x40>
    45de:	f9 2f       	mov	r31, r25
    45e0:	96 e9       	ldi	r25, 0x96	; 150
    45e2:	bb 27       	eor	r27, r27
    45e4:	93 95       	inc	r25
    45e6:	f6 95       	lsr	r31
    45e8:	87 95       	ror	r24
    45ea:	77 95       	ror	r23
    45ec:	67 95       	ror	r22
    45ee:	b7 95       	ror	r27
    45f0:	f1 11       	cpse	r31, r1
    45f2:	f8 cf       	rjmp	.-16     	; 0x45e4 <__floatsisf+0x1c>
    45f4:	fa f4       	brpl	.+62     	; 0x4634 <__floatsisf+0x6c>
    45f6:	bb 0f       	add	r27, r27
    45f8:	11 f4       	brne	.+4      	; 0x45fe <__floatsisf+0x36>
    45fa:	60 ff       	sbrs	r22, 0
    45fc:	1b c0       	rjmp	.+54     	; 0x4634 <__floatsisf+0x6c>
    45fe:	6f 5f       	subi	r22, 0xFF	; 255
    4600:	7f 4f       	sbci	r23, 0xFF	; 255
    4602:	8f 4f       	sbci	r24, 0xFF	; 255
    4604:	9f 4f       	sbci	r25, 0xFF	; 255
    4606:	16 c0       	rjmp	.+44     	; 0x4634 <__floatsisf+0x6c>
    4608:	88 23       	and	r24, r24
    460a:	11 f0       	breq	.+4      	; 0x4610 <__floatsisf+0x48>
    460c:	96 e9       	ldi	r25, 0x96	; 150
    460e:	11 c0       	rjmp	.+34     	; 0x4632 <__floatsisf+0x6a>
    4610:	77 23       	and	r23, r23
    4612:	21 f0       	breq	.+8      	; 0x461c <__floatsisf+0x54>
    4614:	9e e8       	ldi	r25, 0x8E	; 142
    4616:	87 2f       	mov	r24, r23
    4618:	76 2f       	mov	r23, r22
    461a:	05 c0       	rjmp	.+10     	; 0x4626 <__floatsisf+0x5e>
    461c:	66 23       	and	r22, r22
    461e:	71 f0       	breq	.+28     	; 0x463c <__floatsisf+0x74>
    4620:	96 e8       	ldi	r25, 0x86	; 134
    4622:	86 2f       	mov	r24, r22
    4624:	70 e0       	ldi	r23, 0x00	; 0
    4626:	60 e0       	ldi	r22, 0x00	; 0
    4628:	2a f0       	brmi	.+10     	; 0x4634 <__floatsisf+0x6c>
    462a:	9a 95       	dec	r25
    462c:	66 0f       	add	r22, r22
    462e:	77 1f       	adc	r23, r23
    4630:	88 1f       	adc	r24, r24
    4632:	da f7       	brpl	.-10     	; 0x462a <__floatsisf+0x62>
    4634:	88 0f       	add	r24, r24
    4636:	96 95       	lsr	r25
    4638:	87 95       	ror	r24
    463a:	97 f9       	bld	r25, 7
    463c:	08 95       	ret

0000463e <fma>:
    463e:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__mulsf3x>
    4642:	97 01       	movw	r18, r14
    4644:	a8 01       	movw	r20, r16
    4646:	aa 27       	eor	r26, r26
    4648:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__addsf3x>
    464c:	0c 94 d5 23 	jmp	0x47aa	; 0x47aa <__fp_round>

00004650 <__fp_arccos>:
    4650:	df 93       	push	r29
    4652:	cf 93       	push	r28
    4654:	1f 93       	push	r17
    4656:	0f 93       	push	r16
    4658:	8b 01       	movw	r16, r22
    465a:	ec 01       	movw	r28, r24
    465c:	e4 e0       	ldi	r30, 0x04	; 4
    465e:	f1 e0       	ldi	r31, 0x01	; 1
    4660:	0e 94 75 23 	call	0x46ea	; 0x46ea <__fp_powser>
    4664:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__fp_round>
    4668:	98 01       	movw	r18, r16
    466a:	ae 01       	movw	r20, r28
    466c:	8b 01       	movw	r16, r22
    466e:	ec 01       	movw	r28, r24
    4670:	60 e0       	ldi	r22, 0x00	; 0
    4672:	70 e0       	ldi	r23, 0x00	; 0
    4674:	80 e8       	ldi	r24, 0x80	; 128
    4676:	9f e3       	ldi	r25, 0x3F	; 63
    4678:	0e 94 c3 21 	call	0x4386	; 0x4386 <__subsf3>
    467c:	0e 94 6e 25 	call	0x4adc	; 0x4adc <sqrt>
    4680:	98 01       	movw	r18, r16
    4682:	ae 01       	movw	r20, r28
    4684:	0f 91       	pop	r16
    4686:	1f 91       	pop	r17
    4688:	cf 91       	pop	r28
    468a:	df 91       	pop	r29
    468c:	0c 94 e2 24 	jmp	0x49c4	; 0x49c4 <__mulsf3x>

00004690 <__fp_cmp>:
    4690:	99 0f       	add	r25, r25
    4692:	00 08       	sbc	r0, r0
    4694:	55 0f       	add	r21, r21
    4696:	aa 0b       	sbc	r26, r26
    4698:	e0 e8       	ldi	r30, 0x80	; 128
    469a:	fe ef       	ldi	r31, 0xFE	; 254
    469c:	16 16       	cp	r1, r22
    469e:	17 06       	cpc	r1, r23
    46a0:	e8 07       	cpc	r30, r24
    46a2:	f9 07       	cpc	r31, r25
    46a4:	c0 f0       	brcs	.+48     	; 0x46d6 <__fp_cmp+0x46>
    46a6:	12 16       	cp	r1, r18
    46a8:	13 06       	cpc	r1, r19
    46aa:	e4 07       	cpc	r30, r20
    46ac:	f5 07       	cpc	r31, r21
    46ae:	98 f0       	brcs	.+38     	; 0x46d6 <__fp_cmp+0x46>
    46b0:	62 1b       	sub	r22, r18
    46b2:	73 0b       	sbc	r23, r19
    46b4:	84 0b       	sbc	r24, r20
    46b6:	95 0b       	sbc	r25, r21
    46b8:	39 f4       	brne	.+14     	; 0x46c8 <__fp_cmp+0x38>
    46ba:	0a 26       	eor	r0, r26
    46bc:	61 f0       	breq	.+24     	; 0x46d6 <__fp_cmp+0x46>
    46be:	23 2b       	or	r18, r19
    46c0:	24 2b       	or	r18, r20
    46c2:	25 2b       	or	r18, r21
    46c4:	21 f4       	brne	.+8      	; 0x46ce <__fp_cmp+0x3e>
    46c6:	08 95       	ret
    46c8:	0a 26       	eor	r0, r26
    46ca:	09 f4       	brne	.+2      	; 0x46ce <__fp_cmp+0x3e>
    46cc:	a1 40       	sbci	r26, 0x01	; 1
    46ce:	a6 95       	lsr	r26
    46d0:	8f ef       	ldi	r24, 0xFF	; 255
    46d2:	81 1d       	adc	r24, r1
    46d4:	81 1d       	adc	r24, r1
    46d6:	08 95       	ret

000046d8 <__fp_inf>:
    46d8:	97 f9       	bld	r25, 7
    46da:	9f 67       	ori	r25, 0x7F	; 127
    46dc:	80 e8       	ldi	r24, 0x80	; 128
    46de:	70 e0       	ldi	r23, 0x00	; 0
    46e0:	60 e0       	ldi	r22, 0x00	; 0
    46e2:	08 95       	ret

000046e4 <__fp_nan>:
    46e4:	9f ef       	ldi	r25, 0xFF	; 255
    46e6:	80 ec       	ldi	r24, 0xC0	; 192
    46e8:	08 95       	ret

000046ea <__fp_powser>:
    46ea:	df 93       	push	r29
    46ec:	cf 93       	push	r28
    46ee:	1f 93       	push	r17
    46f0:	0f 93       	push	r16
    46f2:	ff 92       	push	r15
    46f4:	ef 92       	push	r14
    46f6:	df 92       	push	r13
    46f8:	7b 01       	movw	r14, r22
    46fa:	8c 01       	movw	r16, r24
    46fc:	68 94       	set
    46fe:	06 c0       	rjmp	.+12     	; 0x470c <__fp_powser+0x22>
    4700:	da 2e       	mov	r13, r26
    4702:	ef 01       	movw	r28, r30
    4704:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__mulsf3x>
    4708:	fe 01       	movw	r30, r28
    470a:	e8 94       	clt
    470c:	a5 91       	lpm	r26, Z+
    470e:	25 91       	lpm	r18, Z+
    4710:	35 91       	lpm	r19, Z+
    4712:	45 91       	lpm	r20, Z+
    4714:	55 91       	lpm	r21, Z+
    4716:	a6 f3       	brts	.-24     	; 0x4700 <__fp_powser+0x16>
    4718:	ef 01       	movw	r28, r30
    471a:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__addsf3x>
    471e:	fe 01       	movw	r30, r28
    4720:	97 01       	movw	r18, r14
    4722:	a8 01       	movw	r20, r16
    4724:	da 94       	dec	r13
    4726:	69 f7       	brne	.-38     	; 0x4702 <__fp_powser+0x18>
    4728:	df 90       	pop	r13
    472a:	ef 90       	pop	r14
    472c:	ff 90       	pop	r15
    472e:	0f 91       	pop	r16
    4730:	1f 91       	pop	r17
    4732:	cf 91       	pop	r28
    4734:	df 91       	pop	r29
    4736:	08 95       	ret

00004738 <__fp_pscA>:
    4738:	00 24       	eor	r0, r0
    473a:	0a 94       	dec	r0
    473c:	16 16       	cp	r1, r22
    473e:	17 06       	cpc	r1, r23
    4740:	18 06       	cpc	r1, r24
    4742:	09 06       	cpc	r0, r25
    4744:	08 95       	ret

00004746 <__fp_pscB>:
    4746:	00 24       	eor	r0, r0
    4748:	0a 94       	dec	r0
    474a:	12 16       	cp	r1, r18
    474c:	13 06       	cpc	r1, r19
    474e:	14 06       	cpc	r1, r20
    4750:	05 06       	cpc	r0, r21
    4752:	08 95       	ret
    4754:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__fp_nan>

00004758 <__fp_rempio2>:
    4758:	0e 94 02 24 	call	0x4804	; 0x4804 <__fp_splitA>
    475c:	d8 f3       	brcs	.-10     	; 0x4754 <__fp_pscB+0xe>
    475e:	e8 94       	clt
    4760:	e0 e0       	ldi	r30, 0x00	; 0
    4762:	bb 27       	eor	r27, r27
    4764:	9f 57       	subi	r25, 0x7F	; 127
    4766:	f0 f0       	brcs	.+60     	; 0x47a4 <__fp_rempio2+0x4c>
    4768:	2a ed       	ldi	r18, 0xDA	; 218
    476a:	3f e0       	ldi	r19, 0x0F	; 15
    476c:	49 ec       	ldi	r20, 0xC9	; 201
    476e:	06 c0       	rjmp	.+12     	; 0x477c <__fp_rempio2+0x24>
    4770:	ee 0f       	add	r30, r30
    4772:	bb 0f       	add	r27, r27
    4774:	66 1f       	adc	r22, r22
    4776:	77 1f       	adc	r23, r23
    4778:	88 1f       	adc	r24, r24
    477a:	28 f0       	brcs	.+10     	; 0x4786 <__fp_rempio2+0x2e>
    477c:	b2 3a       	cpi	r27, 0xA2	; 162
    477e:	62 07       	cpc	r22, r18
    4780:	73 07       	cpc	r23, r19
    4782:	84 07       	cpc	r24, r20
    4784:	28 f0       	brcs	.+10     	; 0x4790 <__fp_rempio2+0x38>
    4786:	b2 5a       	subi	r27, 0xA2	; 162
    4788:	62 0b       	sbc	r22, r18
    478a:	73 0b       	sbc	r23, r19
    478c:	84 0b       	sbc	r24, r20
    478e:	e3 95       	inc	r30
    4790:	9a 95       	dec	r25
    4792:	72 f7       	brpl	.-36     	; 0x4770 <__fp_rempio2+0x18>
    4794:	80 38       	cpi	r24, 0x80	; 128
    4796:	30 f4       	brcc	.+12     	; 0x47a4 <__fp_rempio2+0x4c>
    4798:	9a 95       	dec	r25
    479a:	bb 0f       	add	r27, r27
    479c:	66 1f       	adc	r22, r22
    479e:	77 1f       	adc	r23, r23
    47a0:	88 1f       	adc	r24, r24
    47a2:	d2 f7       	brpl	.-12     	; 0x4798 <__fp_rempio2+0x40>
    47a4:	90 48       	sbci	r25, 0x80	; 128
    47a6:	0c 94 f4 25 	jmp	0x4be8	; 0x4be8 <__fp_mpack_finite>

000047aa <__fp_round>:
    47aa:	09 2e       	mov	r0, r25
    47ac:	03 94       	inc	r0
    47ae:	00 0c       	add	r0, r0
    47b0:	11 f4       	brne	.+4      	; 0x47b6 <__fp_round+0xc>
    47b2:	88 23       	and	r24, r24
    47b4:	52 f0       	brmi	.+20     	; 0x47ca <__fp_round+0x20>
    47b6:	bb 0f       	add	r27, r27
    47b8:	40 f4       	brcc	.+16     	; 0x47ca <__fp_round+0x20>
    47ba:	bf 2b       	or	r27, r31
    47bc:	11 f4       	brne	.+4      	; 0x47c2 <__fp_round+0x18>
    47be:	60 ff       	sbrs	r22, 0
    47c0:	04 c0       	rjmp	.+8      	; 0x47ca <__fp_round+0x20>
    47c2:	6f 5f       	subi	r22, 0xFF	; 255
    47c4:	7f 4f       	sbci	r23, 0xFF	; 255
    47c6:	8f 4f       	sbci	r24, 0xFF	; 255
    47c8:	9f 4f       	sbci	r25, 0xFF	; 255
    47ca:	08 95       	ret

000047cc <__fp_sinus>:
    47cc:	ef 93       	push	r30
    47ce:	e0 ff       	sbrs	r30, 0
    47d0:	07 c0       	rjmp	.+14     	; 0x47e0 <__fp_sinus+0x14>
    47d2:	a2 ea       	ldi	r26, 0xA2	; 162
    47d4:	2a ed       	ldi	r18, 0xDA	; 218
    47d6:	3f e0       	ldi	r19, 0x0F	; 15
    47d8:	49 ec       	ldi	r20, 0xC9	; 201
    47da:	5f eb       	ldi	r21, 0xBF	; 191
    47dc:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__addsf3x>
    47e0:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__fp_round>
    47e4:	0f 90       	pop	r0
    47e6:	03 94       	inc	r0
    47e8:	01 fc       	sbrc	r0, 1
    47ea:	90 58       	subi	r25, 0x80	; 128
    47ec:	ec e2       	ldi	r30, 0x2C	; 44
    47ee:	f1 e0       	ldi	r31, 0x01	; 1
    47f0:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <__fp_powsodd>

000047f4 <__fp_split3>:
    47f4:	57 fd       	sbrc	r21, 7
    47f6:	90 58       	subi	r25, 0x80	; 128
    47f8:	44 0f       	add	r20, r20
    47fa:	55 1f       	adc	r21, r21
    47fc:	59 f0       	breq	.+22     	; 0x4814 <__fp_splitA+0x10>
    47fe:	5f 3f       	cpi	r21, 0xFF	; 255
    4800:	71 f0       	breq	.+28     	; 0x481e <__fp_splitA+0x1a>
    4802:	47 95       	ror	r20

00004804 <__fp_splitA>:
    4804:	88 0f       	add	r24, r24
    4806:	97 fb       	bst	r25, 7
    4808:	99 1f       	adc	r25, r25
    480a:	61 f0       	breq	.+24     	; 0x4824 <__fp_splitA+0x20>
    480c:	9f 3f       	cpi	r25, 0xFF	; 255
    480e:	79 f0       	breq	.+30     	; 0x482e <__fp_splitA+0x2a>
    4810:	87 95       	ror	r24
    4812:	08 95       	ret
    4814:	12 16       	cp	r1, r18
    4816:	13 06       	cpc	r1, r19
    4818:	14 06       	cpc	r1, r20
    481a:	55 1f       	adc	r21, r21
    481c:	f2 cf       	rjmp	.-28     	; 0x4802 <__fp_split3+0xe>
    481e:	46 95       	lsr	r20
    4820:	f1 df       	rcall	.-30     	; 0x4804 <__fp_splitA>
    4822:	08 c0       	rjmp	.+16     	; 0x4834 <__fp_splitA+0x30>
    4824:	16 16       	cp	r1, r22
    4826:	17 06       	cpc	r1, r23
    4828:	18 06       	cpc	r1, r24
    482a:	99 1f       	adc	r25, r25
    482c:	f1 cf       	rjmp	.-30     	; 0x4810 <__fp_splitA+0xc>
    482e:	86 95       	lsr	r24
    4830:	71 05       	cpc	r23, r1
    4832:	61 05       	cpc	r22, r1
    4834:	08 94       	sec
    4836:	08 95       	ret

00004838 <__fp_zero>:
    4838:	e8 94       	clt

0000483a <__fp_szero>:
    483a:	bb 27       	eor	r27, r27
    483c:	66 27       	eor	r22, r22
    483e:	77 27       	eor	r23, r23
    4840:	cb 01       	movw	r24, r22
    4842:	97 f9       	bld	r25, 7
    4844:	08 95       	ret

00004846 <__gesf2>:
    4846:	0e 94 48 23 	call	0x4690	; 0x4690 <__fp_cmp>
    484a:	08 f4       	brcc	.+2      	; 0x484e <__gesf2+0x8>
    484c:	8f ef       	ldi	r24, 0xFF	; 255
    484e:	08 95       	ret
    4850:	0e 94 9c 23 	call	0x4738	; 0x4738 <__fp_pscA>
    4854:	29 f0       	breq	.+10     	; 0x4860 <__gesf2+0x1a>
    4856:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fp_pscB>
    485a:	11 f0       	breq	.+4      	; 0x4860 <__gesf2+0x1a>
    485c:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__fp_nan>
    4860:	0c 94 6c 23 	jmp	0x46d8	; 0x46d8 <__fp_inf>
    4864:	b9 01       	movw	r22, r18
    4866:	ca 01       	movw	r24, r20
    4868:	0c 94 f2 25 	jmp	0x4be4	; 0x4be4 <__fp_mpack>

0000486c <hypot>:
    486c:	9f 77       	andi	r25, 0x7F	; 127
    486e:	5f 77       	andi	r21, 0x7F	; 127
    4870:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__fp_split3>
    4874:	68 f3       	brcs	.-38     	; 0x4850 <__gesf2+0xa>
    4876:	99 23       	and	r25, r25
    4878:	a9 f3       	breq	.-22     	; 0x4864 <__gesf2+0x1e>
    487a:	55 23       	and	r21, r21
    487c:	a9 f3       	breq	.-22     	; 0x4868 <__gesf2+0x22>
    487e:	ff 27       	eor	r31, r31
    4880:	95 17       	cp	r25, r21
    4882:	58 f4       	brcc	.+22     	; 0x489a <hypot+0x2e>
    4884:	e5 2f       	mov	r30, r21
    4886:	e9 1b       	sub	r30, r25
    4888:	ed 30       	cpi	r30, 0x0D	; 13
    488a:	60 f7       	brcc	.-40     	; 0x4864 <__gesf2+0x1e>
    488c:	5e 3b       	cpi	r21, 0xBE	; 190
    488e:	10 f0       	brcs	.+4      	; 0x4894 <hypot+0x28>
    4890:	f1 e4       	ldi	r31, 0x41	; 65
    4892:	1c c0       	rjmp	.+56     	; 0x48cc <hypot+0x60>
    4894:	90 34       	cpi	r25, 0x40	; 64
    4896:	e0 f4       	brcc	.+56     	; 0x48d0 <hypot+0x64>
    4898:	0a c0       	rjmp	.+20     	; 0x48ae <hypot+0x42>
    489a:	e9 2f       	mov	r30, r25
    489c:	e5 1b       	sub	r30, r21
    489e:	ed 30       	cpi	r30, 0x0D	; 13
    48a0:	18 f7       	brcc	.-58     	; 0x4868 <__gesf2+0x22>
    48a2:	9e 3b       	cpi	r25, 0xBE	; 190
    48a4:	10 f0       	brcs	.+4      	; 0x48aa <hypot+0x3e>
    48a6:	f1 e4       	ldi	r31, 0x41	; 65
    48a8:	11 c0       	rjmp	.+34     	; 0x48cc <hypot+0x60>
    48aa:	50 34       	cpi	r21, 0x40	; 64
    48ac:	88 f4       	brcc	.+34     	; 0x48d0 <hypot+0x64>
    48ae:	f9 ea       	ldi	r31, 0xA9	; 169
    48b0:	88 23       	and	r24, r24
    48b2:	2a f0       	brmi	.+10     	; 0x48be <hypot+0x52>
    48b4:	9a 95       	dec	r25
    48b6:	66 0f       	add	r22, r22
    48b8:	77 1f       	adc	r23, r23
    48ba:	88 1f       	adc	r24, r24
    48bc:	da f7       	brpl	.-10     	; 0x48b4 <hypot+0x48>
    48be:	44 23       	and	r20, r20
    48c0:	2a f0       	brmi	.+10     	; 0x48cc <hypot+0x60>
    48c2:	5a 95       	dec	r21
    48c4:	22 0f       	add	r18, r18
    48c6:	33 1f       	adc	r19, r19
    48c8:	44 1f       	adc	r20, r20
    48ca:	da f7       	brpl	.-10     	; 0x48c2 <hypot+0x56>
    48cc:	9f 1b       	sub	r25, r31
    48ce:	5f 1b       	sub	r21, r31
    48d0:	ff 93       	push	r31
    48d2:	1f 93       	push	r17
    48d4:	0f 93       	push	r16
    48d6:	ff 92       	push	r15
    48d8:	ef 92       	push	r14
    48da:	79 01       	movw	r14, r18
    48dc:	8a 01       	movw	r16, r20
    48de:	bb 27       	eor	r27, r27
    48e0:	ab 2f       	mov	r26, r27
    48e2:	9b 01       	movw	r18, r22
    48e4:	ac 01       	movw	r20, r24
    48e6:	0e 94 e5 24 	call	0x49ca	; 0x49ca <__mulsf3_pse>
    48ea:	97 01       	movw	r18, r14
    48ec:	a8 01       	movw	r20, r16
    48ee:	bf 93       	push	r27
    48f0:	7b 01       	movw	r14, r22
    48f2:	8c 01       	movw	r16, r24
    48f4:	aa 27       	eor	r26, r26
    48f6:	ba 2f       	mov	r27, r26
    48f8:	b9 01       	movw	r22, r18
    48fa:	ca 01       	movw	r24, r20
    48fc:	0e 94 e5 24 	call	0x49ca	; 0x49ca <__mulsf3_pse>
    4900:	af 91       	pop	r26
    4902:	97 01       	movw	r18, r14
    4904:	a8 01       	movw	r20, r16
    4906:	ef 90       	pop	r14
    4908:	ff 90       	pop	r15
    490a:	0f 91       	pop	r16
    490c:	1f 91       	pop	r17
    490e:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__addsf3x>
    4912:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__fp_round>
    4916:	0e 94 6e 25 	call	0x4adc	; 0x4adc <sqrt>
    491a:	4f 91       	pop	r20
    491c:	40 ff       	sbrs	r20, 0
    491e:	08 95       	ret
    4920:	55 27       	eor	r21, r21
    4922:	47 fd       	sbrc	r20, 7
    4924:	50 95       	com	r21
    4926:	0c 94 99 24 	jmp	0x4932	; 0x4932 <ldexp>
    492a:	0c 94 6c 23 	jmp	0x46d8	; 0x46d8 <__fp_inf>
    492e:	0c 94 f2 25 	jmp	0x4be4	; 0x4be4 <__fp_mpack>

00004932 <ldexp>:
    4932:	0e 94 02 24 	call	0x4804	; 0x4804 <__fp_splitA>
    4936:	d8 f3       	brcs	.-10     	; 0x492e <hypot+0xc2>
    4938:	99 23       	and	r25, r25
    493a:	c9 f3       	breq	.-14     	; 0x492e <hypot+0xc2>
    493c:	94 0f       	add	r25, r20
    493e:	51 1d       	adc	r21, r1
    4940:	a3 f3       	brvs	.-24     	; 0x492a <hypot+0xbe>
    4942:	91 50       	subi	r25, 0x01	; 1
    4944:	50 40       	sbci	r21, 0x00	; 0
    4946:	94 f0       	brlt	.+36     	; 0x496c <ldexp+0x3a>
    4948:	59 f0       	breq	.+22     	; 0x4960 <ldexp+0x2e>
    494a:	88 23       	and	r24, r24
    494c:	32 f0       	brmi	.+12     	; 0x495a <ldexp+0x28>
    494e:	66 0f       	add	r22, r22
    4950:	77 1f       	adc	r23, r23
    4952:	88 1f       	adc	r24, r24
    4954:	91 50       	subi	r25, 0x01	; 1
    4956:	50 40       	sbci	r21, 0x00	; 0
    4958:	c1 f7       	brne	.-16     	; 0x494a <ldexp+0x18>
    495a:	9e 3f       	cpi	r25, 0xFE	; 254
    495c:	51 05       	cpc	r21, r1
    495e:	2c f7       	brge	.-54     	; 0x492a <hypot+0xbe>
    4960:	88 0f       	add	r24, r24
    4962:	91 1d       	adc	r25, r1
    4964:	96 95       	lsr	r25
    4966:	87 95       	ror	r24
    4968:	97 f9       	bld	r25, 7
    496a:	08 95       	ret
    496c:	5f 3f       	cpi	r21, 0xFF	; 255
    496e:	ac f0       	brlt	.+42     	; 0x499a <ldexp+0x68>
    4970:	98 3e       	cpi	r25, 0xE8	; 232
    4972:	9c f0       	brlt	.+38     	; 0x499a <ldexp+0x68>
    4974:	bb 27       	eor	r27, r27
    4976:	86 95       	lsr	r24
    4978:	77 95       	ror	r23
    497a:	67 95       	ror	r22
    497c:	b7 95       	ror	r27
    497e:	08 f4       	brcc	.+2      	; 0x4982 <ldexp+0x50>
    4980:	b1 60       	ori	r27, 0x01	; 1
    4982:	93 95       	inc	r25
    4984:	c1 f7       	brne	.-16     	; 0x4976 <ldexp+0x44>
    4986:	bb 0f       	add	r27, r27
    4988:	58 f7       	brcc	.-42     	; 0x4960 <ldexp+0x2e>
    498a:	11 f4       	brne	.+4      	; 0x4990 <ldexp+0x5e>
    498c:	60 ff       	sbrs	r22, 0
    498e:	e8 cf       	rjmp	.-48     	; 0x4960 <ldexp+0x2e>
    4990:	6f 5f       	subi	r22, 0xFF	; 255
    4992:	7f 4f       	sbci	r23, 0xFF	; 255
    4994:	8f 4f       	sbci	r24, 0xFF	; 255
    4996:	9f 4f       	sbci	r25, 0xFF	; 255
    4998:	e3 cf       	rjmp	.-58     	; 0x4960 <ldexp+0x2e>
    499a:	0c 94 1d 24 	jmp	0x483a	; 0x483a <__fp_szero>

0000499e <__mulsf3>:
    499e:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__mulsf3x>
    49a2:	0c 94 d5 23 	jmp	0x47aa	; 0x47aa <__fp_round>
    49a6:	0e 94 9c 23 	call	0x4738	; 0x4738 <__fp_pscA>
    49aa:	38 f0       	brcs	.+14     	; 0x49ba <__mulsf3+0x1c>
    49ac:	0e 94 a3 23 	call	0x4746	; 0x4746 <__fp_pscB>
    49b0:	20 f0       	brcs	.+8      	; 0x49ba <__mulsf3+0x1c>
    49b2:	95 23       	and	r25, r21
    49b4:	11 f0       	breq	.+4      	; 0x49ba <__mulsf3+0x1c>
    49b6:	0c 94 6c 23 	jmp	0x46d8	; 0x46d8 <__fp_inf>
    49ba:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__fp_nan>
    49be:	11 24       	eor	r1, r1
    49c0:	0c 94 1d 24 	jmp	0x483a	; 0x483a <__fp_szero>

000049c4 <__mulsf3x>:
    49c4:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__fp_split3>
    49c8:	70 f3       	brcs	.-36     	; 0x49a6 <__mulsf3+0x8>

000049ca <__mulsf3_pse>:
    49ca:	95 9f       	mul	r25, r21
    49cc:	c1 f3       	breq	.-16     	; 0x49be <__mulsf3+0x20>
    49ce:	95 0f       	add	r25, r21
    49d0:	50 e0       	ldi	r21, 0x00	; 0
    49d2:	55 1f       	adc	r21, r21
    49d4:	62 9f       	mul	r22, r18
    49d6:	f0 01       	movw	r30, r0
    49d8:	72 9f       	mul	r23, r18
    49da:	bb 27       	eor	r27, r27
    49dc:	f0 0d       	add	r31, r0
    49de:	b1 1d       	adc	r27, r1
    49e0:	63 9f       	mul	r22, r19
    49e2:	aa 27       	eor	r26, r26
    49e4:	f0 0d       	add	r31, r0
    49e6:	b1 1d       	adc	r27, r1
    49e8:	aa 1f       	adc	r26, r26
    49ea:	64 9f       	mul	r22, r20
    49ec:	66 27       	eor	r22, r22
    49ee:	b0 0d       	add	r27, r0
    49f0:	a1 1d       	adc	r26, r1
    49f2:	66 1f       	adc	r22, r22
    49f4:	82 9f       	mul	r24, r18
    49f6:	22 27       	eor	r18, r18
    49f8:	b0 0d       	add	r27, r0
    49fa:	a1 1d       	adc	r26, r1
    49fc:	62 1f       	adc	r22, r18
    49fe:	73 9f       	mul	r23, r19
    4a00:	b0 0d       	add	r27, r0
    4a02:	a1 1d       	adc	r26, r1
    4a04:	62 1f       	adc	r22, r18
    4a06:	83 9f       	mul	r24, r19
    4a08:	a0 0d       	add	r26, r0
    4a0a:	61 1d       	adc	r22, r1
    4a0c:	22 1f       	adc	r18, r18
    4a0e:	74 9f       	mul	r23, r20
    4a10:	33 27       	eor	r19, r19
    4a12:	a0 0d       	add	r26, r0
    4a14:	61 1d       	adc	r22, r1
    4a16:	23 1f       	adc	r18, r19
    4a18:	84 9f       	mul	r24, r20
    4a1a:	60 0d       	add	r22, r0
    4a1c:	21 1d       	adc	r18, r1
    4a1e:	82 2f       	mov	r24, r18
    4a20:	76 2f       	mov	r23, r22
    4a22:	6a 2f       	mov	r22, r26
    4a24:	11 24       	eor	r1, r1
    4a26:	9f 57       	subi	r25, 0x7F	; 127
    4a28:	50 40       	sbci	r21, 0x00	; 0
    4a2a:	9a f0       	brmi	.+38     	; 0x4a52 <__mulsf3_pse+0x88>
    4a2c:	f1 f0       	breq	.+60     	; 0x4a6a <__mulsf3_pse+0xa0>
    4a2e:	88 23       	and	r24, r24
    4a30:	4a f0       	brmi	.+18     	; 0x4a44 <__mulsf3_pse+0x7a>
    4a32:	ee 0f       	add	r30, r30
    4a34:	ff 1f       	adc	r31, r31
    4a36:	bb 1f       	adc	r27, r27
    4a38:	66 1f       	adc	r22, r22
    4a3a:	77 1f       	adc	r23, r23
    4a3c:	88 1f       	adc	r24, r24
    4a3e:	91 50       	subi	r25, 0x01	; 1
    4a40:	50 40       	sbci	r21, 0x00	; 0
    4a42:	a9 f7       	brne	.-22     	; 0x4a2e <__mulsf3_pse+0x64>
    4a44:	9e 3f       	cpi	r25, 0xFE	; 254
    4a46:	51 05       	cpc	r21, r1
    4a48:	80 f0       	brcs	.+32     	; 0x4a6a <__mulsf3_pse+0xa0>
    4a4a:	0c 94 6c 23 	jmp	0x46d8	; 0x46d8 <__fp_inf>
    4a4e:	0c 94 1d 24 	jmp	0x483a	; 0x483a <__fp_szero>
    4a52:	5f 3f       	cpi	r21, 0xFF	; 255
    4a54:	e4 f3       	brlt	.-8      	; 0x4a4e <__mulsf3_pse+0x84>
    4a56:	98 3e       	cpi	r25, 0xE8	; 232
    4a58:	d4 f3       	brlt	.-12     	; 0x4a4e <__mulsf3_pse+0x84>
    4a5a:	86 95       	lsr	r24
    4a5c:	77 95       	ror	r23
    4a5e:	67 95       	ror	r22
    4a60:	b7 95       	ror	r27
    4a62:	f7 95       	ror	r31
    4a64:	e7 95       	ror	r30
    4a66:	9f 5f       	subi	r25, 0xFF	; 255
    4a68:	c1 f7       	brne	.-16     	; 0x4a5a <__mulsf3_pse+0x90>
    4a6a:	fe 2b       	or	r31, r30
    4a6c:	88 0f       	add	r24, r24
    4a6e:	91 1d       	adc	r25, r1
    4a70:	96 95       	lsr	r25
    4a72:	87 95       	ror	r24
    4a74:	97 f9       	bld	r25, 7
    4a76:	08 95       	ret

00004a78 <round>:
    4a78:	0e 94 02 24 	call	0x4804	; 0x4804 <__fp_splitA>
    4a7c:	e8 f0       	brcs	.+58     	; 0x4ab8 <round+0x40>
    4a7e:	9e 37       	cpi	r25, 0x7E	; 126
    4a80:	e8 f0       	brcs	.+58     	; 0x4abc <round+0x44>
    4a82:	96 39       	cpi	r25, 0x96	; 150
    4a84:	b8 f4       	brcc	.+46     	; 0x4ab4 <round+0x3c>
    4a86:	9e 38       	cpi	r25, 0x8E	; 142
    4a88:	48 f4       	brcc	.+18     	; 0x4a9c <round+0x24>
    4a8a:	67 2f       	mov	r22, r23
    4a8c:	78 2f       	mov	r23, r24
    4a8e:	88 27       	eor	r24, r24
    4a90:	98 5f       	subi	r25, 0xF8	; 248
    4a92:	f9 cf       	rjmp	.-14     	; 0x4a86 <round+0xe>
    4a94:	86 95       	lsr	r24
    4a96:	77 95       	ror	r23
    4a98:	67 95       	ror	r22
    4a9a:	93 95       	inc	r25
    4a9c:	95 39       	cpi	r25, 0x95	; 149
    4a9e:	d0 f3       	brcs	.-12     	; 0x4a94 <round+0x1c>
    4aa0:	b6 2f       	mov	r27, r22
    4aa2:	b1 70       	andi	r27, 0x01	; 1
    4aa4:	6b 0f       	add	r22, r27
    4aa6:	71 1d       	adc	r23, r1
    4aa8:	81 1d       	adc	r24, r1
    4aaa:	20 f4       	brcc	.+8      	; 0x4ab4 <round+0x3c>
    4aac:	87 95       	ror	r24
    4aae:	77 95       	ror	r23
    4ab0:	67 95       	ror	r22
    4ab2:	93 95       	inc	r25
    4ab4:	0c 94 d7 25 	jmp	0x4bae	; 0x4bae <__fp_mintl>
    4ab8:	0c 94 f2 25 	jmp	0x4be4	; 0x4be4 <__fp_mpack>
    4abc:	0c 94 1d 24 	jmp	0x483a	; 0x483a <__fp_szero>

00004ac0 <sin>:
    4ac0:	9f 93       	push	r25
    4ac2:	0e 94 ac 23 	call	0x4758	; 0x4758 <__fp_rempio2>
    4ac6:	0f 90       	pop	r0
    4ac8:	07 fc       	sbrc	r0, 7
    4aca:	ee 5f       	subi	r30, 0xFE	; 254
    4acc:	0c 94 e6 23 	jmp	0x47cc	; 0x47cc <__fp_sinus>
    4ad0:	19 f4       	brne	.+6      	; 0x4ad8 <sin+0x18>
    4ad2:	16 f4       	brtc	.+4      	; 0x4ad8 <sin+0x18>
    4ad4:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__fp_nan>
    4ad8:	0c 94 f2 25 	jmp	0x4be4	; 0x4be4 <__fp_mpack>

00004adc <sqrt>:
    4adc:	0e 94 02 24 	call	0x4804	; 0x4804 <__fp_splitA>
    4ae0:	b8 f3       	brcs	.-18     	; 0x4ad0 <sin+0x10>
    4ae2:	99 23       	and	r25, r25
    4ae4:	c9 f3       	breq	.-14     	; 0x4ad8 <sin+0x18>
    4ae6:	b6 f3       	brts	.-20     	; 0x4ad4 <sin+0x14>
    4ae8:	9f 57       	subi	r25, 0x7F	; 127
    4aea:	55 0b       	sbc	r21, r21
    4aec:	87 ff       	sbrs	r24, 7
    4aee:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__fp_norm2>
    4af2:	00 24       	eor	r0, r0
    4af4:	a0 e6       	ldi	r26, 0x60	; 96
    4af6:	40 ea       	ldi	r20, 0xA0	; 160
    4af8:	90 01       	movw	r18, r0
    4afa:	80 58       	subi	r24, 0x80	; 128
    4afc:	56 95       	lsr	r21
    4afe:	97 95       	ror	r25
    4b00:	28 f4       	brcc	.+10     	; 0x4b0c <sqrt+0x30>
    4b02:	80 5c       	subi	r24, 0xC0	; 192
    4b04:	66 0f       	add	r22, r22
    4b06:	77 1f       	adc	r23, r23
    4b08:	88 1f       	adc	r24, r24
    4b0a:	20 f0       	brcs	.+8      	; 0x4b14 <sqrt+0x38>
    4b0c:	26 17       	cp	r18, r22
    4b0e:	37 07       	cpc	r19, r23
    4b10:	48 07       	cpc	r20, r24
    4b12:	30 f4       	brcc	.+12     	; 0x4b20 <sqrt+0x44>
    4b14:	62 1b       	sub	r22, r18
    4b16:	73 0b       	sbc	r23, r19
    4b18:	84 0b       	sbc	r24, r20
    4b1a:	20 29       	or	r18, r0
    4b1c:	31 29       	or	r19, r1
    4b1e:	4a 2b       	or	r20, r26
    4b20:	a6 95       	lsr	r26
    4b22:	17 94       	ror	r1
    4b24:	07 94       	ror	r0
    4b26:	20 25       	eor	r18, r0
    4b28:	31 25       	eor	r19, r1
    4b2a:	4a 27       	eor	r20, r26
    4b2c:	58 f7       	brcc	.-42     	; 0x4b04 <sqrt+0x28>
    4b2e:	66 0f       	add	r22, r22
    4b30:	77 1f       	adc	r23, r23
    4b32:	88 1f       	adc	r24, r24
    4b34:	20 f0       	brcs	.+8      	; 0x4b3e <sqrt+0x62>
    4b36:	26 17       	cp	r18, r22
    4b38:	37 07       	cpc	r19, r23
    4b3a:	48 07       	cpc	r20, r24
    4b3c:	30 f4       	brcc	.+12     	; 0x4b4a <sqrt+0x6e>
    4b3e:	62 0b       	sbc	r22, r18
    4b40:	73 0b       	sbc	r23, r19
    4b42:	84 0b       	sbc	r24, r20
    4b44:	20 0d       	add	r18, r0
    4b46:	31 1d       	adc	r19, r1
    4b48:	41 1d       	adc	r20, r1
    4b4a:	a0 95       	com	r26
    4b4c:	81 f7       	brne	.-32     	; 0x4b2e <sqrt+0x52>
    4b4e:	b9 01       	movw	r22, r18
    4b50:	84 2f       	mov	r24, r20
    4b52:	91 58       	subi	r25, 0x81	; 129
    4b54:	88 0f       	add	r24, r24
    4b56:	96 95       	lsr	r25
    4b58:	87 95       	ror	r24
    4b5a:	08 95       	ret

00004b5c <square>:
    4b5c:	9b 01       	movw	r18, r22
    4b5e:	ac 01       	movw	r20, r24
    4b60:	0c 94 cf 24 	jmp	0x499e	; 0x499e <__mulsf3>

00004b64 <tan>:
    4b64:	df 93       	push	r29
    4b66:	d9 2f       	mov	r29, r25
    4b68:	0e 94 ac 23 	call	0x4758	; 0x4758 <__fp_rempio2>
    4b6c:	e6 95       	lsr	r30
    4b6e:	d7 95       	ror	r29
    4b70:	2a ed       	ldi	r18, 0xDA	; 218
    4b72:	3f e0       	ldi	r19, 0x0F	; 15
    4b74:	49 e4       	ldi	r20, 0x49	; 73
    4b76:	5f e3       	ldi	r21, 0x3F	; 63
    4b78:	b3 3a       	cpi	r27, 0xA3	; 163
    4b7a:	62 07       	cpc	r22, r18
    4b7c:	73 07       	cpc	r23, r19
    4b7e:	84 07       	cpc	r24, r20
    4b80:	95 07       	cpc	r25, r21
    4b82:	d7 95       	ror	r29
    4b84:	3a f0       	brmi	.+14     	; 0x4b94 <tan+0x30>
    4b86:	a2 ea       	ldi	r26, 0xA2	; 162
    4b88:	49 ec       	ldi	r20, 0xC9	; 201
    4b8a:	90 68       	ori	r25, 0x80	; 128
    4b8c:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__addsf3x>
    4b90:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__fp_round>
    4b94:	ea e4       	ldi	r30, 0x4A	; 74
    4b96:	f1 e0       	ldi	r31, 0x01	; 1
    4b98:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <__fp_powsodd>
    4b9c:	dd 0f       	add	r29, r29
    4b9e:	13 f0       	brvs	.+4      	; 0x4ba4 <tan+0x40>
    4ba0:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <inverse>
    4ba4:	dd 0f       	add	r29, r29
    4ba6:	0b f4       	brvc	.+2      	; 0x4baa <tan+0x46>
    4ba8:	90 58       	subi	r25, 0x80	; 128
    4baa:	df 91       	pop	r29
    4bac:	08 95       	ret

00004bae <__fp_mintl>:
    4bae:	88 23       	and	r24, r24
    4bb0:	71 f4       	brne	.+28     	; 0x4bce <__fp_mintl+0x20>
    4bb2:	77 23       	and	r23, r23
    4bb4:	21 f0       	breq	.+8      	; 0x4bbe <__fp_mintl+0x10>
    4bb6:	98 50       	subi	r25, 0x08	; 8
    4bb8:	87 2b       	or	r24, r23
    4bba:	76 2f       	mov	r23, r22
    4bbc:	07 c0       	rjmp	.+14     	; 0x4bcc <__fp_mintl+0x1e>
    4bbe:	66 23       	and	r22, r22
    4bc0:	11 f4       	brne	.+4      	; 0x4bc6 <__fp_mintl+0x18>
    4bc2:	99 27       	eor	r25, r25
    4bc4:	0d c0       	rjmp	.+26     	; 0x4be0 <__fp_mintl+0x32>
    4bc6:	90 51       	subi	r25, 0x10	; 16
    4bc8:	86 2b       	or	r24, r22
    4bca:	70 e0       	ldi	r23, 0x00	; 0
    4bcc:	60 e0       	ldi	r22, 0x00	; 0
    4bce:	2a f0       	brmi	.+10     	; 0x4bda <__fp_mintl+0x2c>
    4bd0:	9a 95       	dec	r25
    4bd2:	66 0f       	add	r22, r22
    4bd4:	77 1f       	adc	r23, r23
    4bd6:	88 1f       	adc	r24, r24
    4bd8:	da f7       	brpl	.-10     	; 0x4bd0 <__fp_mintl+0x22>
    4bda:	88 0f       	add	r24, r24
    4bdc:	96 95       	lsr	r25
    4bde:	87 95       	ror	r24
    4be0:	97 f9       	bld	r25, 7
    4be2:	08 95       	ret

00004be4 <__fp_mpack>:
    4be4:	9f 3f       	cpi	r25, 0xFF	; 255
    4be6:	31 f0       	breq	.+12     	; 0x4bf4 <__fp_mpack_finite+0xc>

00004be8 <__fp_mpack_finite>:
    4be8:	91 50       	subi	r25, 0x01	; 1
    4bea:	20 f4       	brcc	.+8      	; 0x4bf4 <__fp_mpack_finite+0xc>
    4bec:	87 95       	ror	r24
    4bee:	77 95       	ror	r23
    4bf0:	67 95       	ror	r22
    4bf2:	b7 95       	ror	r27
    4bf4:	88 0f       	add	r24, r24
    4bf6:	91 1d       	adc	r25, r1
    4bf8:	96 95       	lsr	r25
    4bfa:	87 95       	ror	r24
    4bfc:	97 f9       	bld	r25, 7
    4bfe:	08 95       	ret

00004c00 <__fp_norm2>:
    4c00:	91 50       	subi	r25, 0x01	; 1
    4c02:	50 40       	sbci	r21, 0x00	; 0
    4c04:	66 0f       	add	r22, r22
    4c06:	77 1f       	adc	r23, r23
    4c08:	88 1f       	adc	r24, r24
    4c0a:	d2 f7       	brpl	.-12     	; 0x4c00 <__fp_norm2>
    4c0c:	08 95       	ret

00004c0e <__fp_powsodd>:
    4c0e:	9f 93       	push	r25
    4c10:	8f 93       	push	r24
    4c12:	7f 93       	push	r23
    4c14:	6f 93       	push	r22
    4c16:	ff 93       	push	r31
    4c18:	ef 93       	push	r30
    4c1a:	9b 01       	movw	r18, r22
    4c1c:	ac 01       	movw	r20, r24
    4c1e:	0e 94 cf 24 	call	0x499e	; 0x499e <__mulsf3>
    4c22:	ef 91       	pop	r30
    4c24:	ff 91       	pop	r31
    4c26:	0e 94 75 23 	call	0x46ea	; 0x46ea <__fp_powser>
    4c2a:	2f 91       	pop	r18
    4c2c:	3f 91       	pop	r19
    4c2e:	4f 91       	pop	r20
    4c30:	5f 91       	pop	r21
    4c32:	0c 94 cf 24 	jmp	0x499e	; 0x499e <__mulsf3>

00004c36 <inverse>:
    4c36:	9b 01       	movw	r18, r22
    4c38:	ac 01       	movw	r20, r24
    4c3a:	60 e0       	ldi	r22, 0x00	; 0
    4c3c:	70 e0       	ldi	r23, 0x00	; 0
    4c3e:	80 e8       	ldi	r24, 0x80	; 128
    4c40:	9f e3       	ldi	r25, 0x3F	; 63
    4c42:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <__divsf3>

00004c46 <vfprintf>:
    4c46:	2f 92       	push	r2
    4c48:	3f 92       	push	r3
    4c4a:	4f 92       	push	r4
    4c4c:	5f 92       	push	r5
    4c4e:	6f 92       	push	r6
    4c50:	7f 92       	push	r7
    4c52:	8f 92       	push	r8
    4c54:	9f 92       	push	r9
    4c56:	af 92       	push	r10
    4c58:	bf 92       	push	r11
    4c5a:	cf 92       	push	r12
    4c5c:	df 92       	push	r13
    4c5e:	ef 92       	push	r14
    4c60:	ff 92       	push	r15
    4c62:	0f 93       	push	r16
    4c64:	1f 93       	push	r17
    4c66:	cf 93       	push	r28
    4c68:	df 93       	push	r29
    4c6a:	cd b7       	in	r28, 0x3d	; 61
    4c6c:	de b7       	in	r29, 0x3e	; 62
    4c6e:	60 97       	sbiw	r28, 0x10	; 16
    4c70:	0f b6       	in	r0, 0x3f	; 63
    4c72:	f8 94       	cli
    4c74:	de bf       	out	0x3e, r29	; 62
    4c76:	0f be       	out	0x3f, r0	; 63
    4c78:	cd bf       	out	0x3d, r28	; 61
    4c7a:	7c 01       	movw	r14, r24
    4c7c:	1b 01       	movw	r2, r22
    4c7e:	6a 01       	movw	r12, r20
    4c80:	fc 01       	movw	r30, r24
    4c82:	17 82       	std	Z+7, r1	; 0x07
    4c84:	16 82       	std	Z+6, r1	; 0x06
    4c86:	83 81       	ldd	r24, Z+3	; 0x03
    4c88:	81 ff       	sbrs	r24, 1
    4c8a:	44 c3       	rjmp	.+1672   	; 0x5314 <vfprintf+0x6ce>
    4c8c:	9e 01       	movw	r18, r28
    4c8e:	2f 5f       	subi	r18, 0xFF	; 255
    4c90:	3f 4f       	sbci	r19, 0xFF	; 255
    4c92:	39 01       	movw	r6, r18
    4c94:	f7 01       	movw	r30, r14
    4c96:	93 81       	ldd	r25, Z+3	; 0x03
    4c98:	f1 01       	movw	r30, r2
    4c9a:	93 fd       	sbrc	r25, 3
    4c9c:	85 91       	lpm	r24, Z+
    4c9e:	93 ff       	sbrs	r25, 3
    4ca0:	81 91       	ld	r24, Z+
    4ca2:	1f 01       	movw	r2, r30
    4ca4:	88 23       	and	r24, r24
    4ca6:	09 f4       	brne	.+2      	; 0x4caa <vfprintf+0x64>
    4ca8:	31 c3       	rjmp	.+1634   	; 0x530c <vfprintf+0x6c6>
    4caa:	85 32       	cpi	r24, 0x25	; 37
    4cac:	39 f4       	brne	.+14     	; 0x4cbc <vfprintf+0x76>
    4cae:	93 fd       	sbrc	r25, 3
    4cb0:	85 91       	lpm	r24, Z+
    4cb2:	93 ff       	sbrs	r25, 3
    4cb4:	81 91       	ld	r24, Z+
    4cb6:	1f 01       	movw	r2, r30
    4cb8:	85 32       	cpi	r24, 0x25	; 37
    4cba:	39 f4       	brne	.+14     	; 0x4cca <vfprintf+0x84>
    4cbc:	b7 01       	movw	r22, r14
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    4cc4:	56 01       	movw	r10, r12
    4cc6:	65 01       	movw	r12, r10
    4cc8:	e5 cf       	rjmp	.-54     	; 0x4c94 <vfprintf+0x4e>
    4cca:	10 e0       	ldi	r17, 0x00	; 0
    4ccc:	51 2c       	mov	r5, r1
    4cce:	91 2c       	mov	r9, r1
    4cd0:	ff e1       	ldi	r31, 0x1F	; 31
    4cd2:	f9 15       	cp	r31, r9
    4cd4:	d8 f0       	brcs	.+54     	; 0x4d0c <vfprintf+0xc6>
    4cd6:	8b 32       	cpi	r24, 0x2B	; 43
    4cd8:	79 f0       	breq	.+30     	; 0x4cf8 <vfprintf+0xb2>
    4cda:	38 f4       	brcc	.+14     	; 0x4cea <vfprintf+0xa4>
    4cdc:	80 32       	cpi	r24, 0x20	; 32
    4cde:	79 f0       	breq	.+30     	; 0x4cfe <vfprintf+0xb8>
    4ce0:	83 32       	cpi	r24, 0x23	; 35
    4ce2:	a1 f4       	brne	.+40     	; 0x4d0c <vfprintf+0xc6>
    4ce4:	f9 2d       	mov	r31, r9
    4ce6:	f0 61       	ori	r31, 0x10	; 16
    4ce8:	2e c0       	rjmp	.+92     	; 0x4d46 <vfprintf+0x100>
    4cea:	8d 32       	cpi	r24, 0x2D	; 45
    4cec:	61 f0       	breq	.+24     	; 0x4d06 <vfprintf+0xc0>
    4cee:	80 33       	cpi	r24, 0x30	; 48
    4cf0:	69 f4       	brne	.+26     	; 0x4d0c <vfprintf+0xc6>
    4cf2:	29 2d       	mov	r18, r9
    4cf4:	21 60       	ori	r18, 0x01	; 1
    4cf6:	2d c0       	rjmp	.+90     	; 0x4d52 <vfprintf+0x10c>
    4cf8:	39 2d       	mov	r19, r9
    4cfa:	32 60       	ori	r19, 0x02	; 2
    4cfc:	93 2e       	mov	r9, r19
    4cfe:	89 2d       	mov	r24, r9
    4d00:	84 60       	ori	r24, 0x04	; 4
    4d02:	98 2e       	mov	r9, r24
    4d04:	2a c0       	rjmp	.+84     	; 0x4d5a <vfprintf+0x114>
    4d06:	e9 2d       	mov	r30, r9
    4d08:	e8 60       	ori	r30, 0x08	; 8
    4d0a:	15 c0       	rjmp	.+42     	; 0x4d36 <vfprintf+0xf0>
    4d0c:	97 fc       	sbrc	r9, 7
    4d0e:	2d c0       	rjmp	.+90     	; 0x4d6a <vfprintf+0x124>
    4d10:	20 ed       	ldi	r18, 0xD0	; 208
    4d12:	28 0f       	add	r18, r24
    4d14:	2a 30       	cpi	r18, 0x0A	; 10
    4d16:	88 f4       	brcc	.+34     	; 0x4d3a <vfprintf+0xf4>
    4d18:	96 fe       	sbrs	r9, 6
    4d1a:	06 c0       	rjmp	.+12     	; 0x4d28 <vfprintf+0xe2>
    4d1c:	3a e0       	ldi	r19, 0x0A	; 10
    4d1e:	13 9f       	mul	r17, r19
    4d20:	20 0d       	add	r18, r0
    4d22:	11 24       	eor	r1, r1
    4d24:	12 2f       	mov	r17, r18
    4d26:	19 c0       	rjmp	.+50     	; 0x4d5a <vfprintf+0x114>
    4d28:	8a e0       	ldi	r24, 0x0A	; 10
    4d2a:	58 9e       	mul	r5, r24
    4d2c:	20 0d       	add	r18, r0
    4d2e:	11 24       	eor	r1, r1
    4d30:	52 2e       	mov	r5, r18
    4d32:	e9 2d       	mov	r30, r9
    4d34:	e0 62       	ori	r30, 0x20	; 32
    4d36:	9e 2e       	mov	r9, r30
    4d38:	10 c0       	rjmp	.+32     	; 0x4d5a <vfprintf+0x114>
    4d3a:	8e 32       	cpi	r24, 0x2E	; 46
    4d3c:	31 f4       	brne	.+12     	; 0x4d4a <vfprintf+0x104>
    4d3e:	96 fc       	sbrc	r9, 6
    4d40:	e5 c2       	rjmp	.+1482   	; 0x530c <vfprintf+0x6c6>
    4d42:	f9 2d       	mov	r31, r9
    4d44:	f0 64       	ori	r31, 0x40	; 64
    4d46:	9f 2e       	mov	r9, r31
    4d48:	08 c0       	rjmp	.+16     	; 0x4d5a <vfprintf+0x114>
    4d4a:	8c 36       	cpi	r24, 0x6C	; 108
    4d4c:	21 f4       	brne	.+8      	; 0x4d56 <vfprintf+0x110>
    4d4e:	29 2d       	mov	r18, r9
    4d50:	20 68       	ori	r18, 0x80	; 128
    4d52:	92 2e       	mov	r9, r18
    4d54:	02 c0       	rjmp	.+4      	; 0x4d5a <vfprintf+0x114>
    4d56:	88 36       	cpi	r24, 0x68	; 104
    4d58:	41 f4       	brne	.+16     	; 0x4d6a <vfprintf+0x124>
    4d5a:	f1 01       	movw	r30, r2
    4d5c:	93 fd       	sbrc	r25, 3
    4d5e:	85 91       	lpm	r24, Z+
    4d60:	93 ff       	sbrs	r25, 3
    4d62:	81 91       	ld	r24, Z+
    4d64:	1f 01       	movw	r2, r30
    4d66:	81 11       	cpse	r24, r1
    4d68:	b3 cf       	rjmp	.-154    	; 0x4cd0 <vfprintf+0x8a>
    4d6a:	9b eb       	ldi	r25, 0xBB	; 187
    4d6c:	98 0f       	add	r25, r24
    4d6e:	93 30       	cpi	r25, 0x03	; 3
    4d70:	20 f4       	brcc	.+8      	; 0x4d7a <vfprintf+0x134>
    4d72:	99 2d       	mov	r25, r9
    4d74:	90 61       	ori	r25, 0x10	; 16
    4d76:	80 5e       	subi	r24, 0xE0	; 224
    4d78:	07 c0       	rjmp	.+14     	; 0x4d88 <vfprintf+0x142>
    4d7a:	9b e9       	ldi	r25, 0x9B	; 155
    4d7c:	98 0f       	add	r25, r24
    4d7e:	93 30       	cpi	r25, 0x03	; 3
    4d80:	08 f0       	brcs	.+2      	; 0x4d84 <vfprintf+0x13e>
    4d82:	66 c1       	rjmp	.+716    	; 0x5050 <vfprintf+0x40a>
    4d84:	99 2d       	mov	r25, r9
    4d86:	9f 7e       	andi	r25, 0xEF	; 239
    4d88:	96 ff       	sbrs	r25, 6
    4d8a:	16 e0       	ldi	r17, 0x06	; 6
    4d8c:	9f 73       	andi	r25, 0x3F	; 63
    4d8e:	99 2e       	mov	r9, r25
    4d90:	85 36       	cpi	r24, 0x65	; 101
    4d92:	19 f4       	brne	.+6      	; 0x4d9a <vfprintf+0x154>
    4d94:	90 64       	ori	r25, 0x40	; 64
    4d96:	99 2e       	mov	r9, r25
    4d98:	08 c0       	rjmp	.+16     	; 0x4daa <vfprintf+0x164>
    4d9a:	86 36       	cpi	r24, 0x66	; 102
    4d9c:	21 f4       	brne	.+8      	; 0x4da6 <vfprintf+0x160>
    4d9e:	39 2f       	mov	r19, r25
    4da0:	30 68       	ori	r19, 0x80	; 128
    4da2:	93 2e       	mov	r9, r19
    4da4:	02 c0       	rjmp	.+4      	; 0x4daa <vfprintf+0x164>
    4da6:	11 11       	cpse	r17, r1
    4da8:	11 50       	subi	r17, 0x01	; 1
    4daa:	97 fe       	sbrs	r9, 7
    4dac:	07 c0       	rjmp	.+14     	; 0x4dbc <vfprintf+0x176>
    4dae:	1c 33       	cpi	r17, 0x3C	; 60
    4db0:	50 f4       	brcc	.+20     	; 0x4dc6 <vfprintf+0x180>
    4db2:	44 24       	eor	r4, r4
    4db4:	43 94       	inc	r4
    4db6:	41 0e       	add	r4, r17
    4db8:	27 e0       	ldi	r18, 0x07	; 7
    4dba:	0b c0       	rjmp	.+22     	; 0x4dd2 <vfprintf+0x18c>
    4dbc:	18 30       	cpi	r17, 0x08	; 8
    4dbe:	38 f0       	brcs	.+14     	; 0x4dce <vfprintf+0x188>
    4dc0:	27 e0       	ldi	r18, 0x07	; 7
    4dc2:	17 e0       	ldi	r17, 0x07	; 7
    4dc4:	05 c0       	rjmp	.+10     	; 0x4dd0 <vfprintf+0x18a>
    4dc6:	27 e0       	ldi	r18, 0x07	; 7
    4dc8:	9c e3       	ldi	r25, 0x3C	; 60
    4dca:	49 2e       	mov	r4, r25
    4dcc:	02 c0       	rjmp	.+4      	; 0x4dd2 <vfprintf+0x18c>
    4dce:	21 2f       	mov	r18, r17
    4dd0:	41 2c       	mov	r4, r1
    4dd2:	56 01       	movw	r10, r12
    4dd4:	84 e0       	ldi	r24, 0x04	; 4
    4dd6:	a8 0e       	add	r10, r24
    4dd8:	b1 1c       	adc	r11, r1
    4dda:	f6 01       	movw	r30, r12
    4ddc:	60 81       	ld	r22, Z
    4dde:	71 81       	ldd	r23, Z+1	; 0x01
    4de0:	82 81       	ldd	r24, Z+2	; 0x02
    4de2:	93 81       	ldd	r25, Z+3	; 0x03
    4de4:	04 2d       	mov	r16, r4
    4de6:	a3 01       	movw	r20, r6
    4de8:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <__ftoa_engine>
    4dec:	6c 01       	movw	r12, r24
    4dee:	f9 81       	ldd	r31, Y+1	; 0x01
    4df0:	fc 87       	std	Y+12, r31	; 0x0c
    4df2:	f0 ff       	sbrs	r31, 0
    4df4:	02 c0       	rjmp	.+4      	; 0x4dfa <vfprintf+0x1b4>
    4df6:	f3 ff       	sbrs	r31, 3
    4df8:	06 c0       	rjmp	.+12     	; 0x4e06 <vfprintf+0x1c0>
    4dfa:	91 fc       	sbrc	r9, 1
    4dfc:	06 c0       	rjmp	.+12     	; 0x4e0a <vfprintf+0x1c4>
    4dfe:	92 fe       	sbrs	r9, 2
    4e00:	06 c0       	rjmp	.+12     	; 0x4e0e <vfprintf+0x1c8>
    4e02:	00 e2       	ldi	r16, 0x20	; 32
    4e04:	05 c0       	rjmp	.+10     	; 0x4e10 <vfprintf+0x1ca>
    4e06:	0d e2       	ldi	r16, 0x2D	; 45
    4e08:	03 c0       	rjmp	.+6      	; 0x4e10 <vfprintf+0x1ca>
    4e0a:	0b e2       	ldi	r16, 0x2B	; 43
    4e0c:	01 c0       	rjmp	.+2      	; 0x4e10 <vfprintf+0x1ca>
    4e0e:	00 e0       	ldi	r16, 0x00	; 0
    4e10:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e12:	8c 70       	andi	r24, 0x0C	; 12
    4e14:	19 f0       	breq	.+6      	; 0x4e1c <vfprintf+0x1d6>
    4e16:	01 11       	cpse	r16, r1
    4e18:	5a c2       	rjmp	.+1204   	; 0x52ce <vfprintf+0x688>
    4e1a:	9b c2       	rjmp	.+1334   	; 0x5352 <vfprintf+0x70c>
    4e1c:	97 fe       	sbrs	r9, 7
    4e1e:	10 c0       	rjmp	.+32     	; 0x4e40 <vfprintf+0x1fa>
    4e20:	4c 0c       	add	r4, r12
    4e22:	fc 85       	ldd	r31, Y+12	; 0x0c
    4e24:	f4 ff       	sbrs	r31, 4
    4e26:	04 c0       	rjmp	.+8      	; 0x4e30 <vfprintf+0x1ea>
    4e28:	8a 81       	ldd	r24, Y+2	; 0x02
    4e2a:	81 33       	cpi	r24, 0x31	; 49
    4e2c:	09 f4       	brne	.+2      	; 0x4e30 <vfprintf+0x1ea>
    4e2e:	4a 94       	dec	r4
    4e30:	14 14       	cp	r1, r4
    4e32:	74 f5       	brge	.+92     	; 0x4e90 <vfprintf+0x24a>
    4e34:	28 e0       	ldi	r18, 0x08	; 8
    4e36:	24 15       	cp	r18, r4
    4e38:	78 f5       	brcc	.+94     	; 0x4e98 <vfprintf+0x252>
    4e3a:	88 e0       	ldi	r24, 0x08	; 8
    4e3c:	48 2e       	mov	r4, r24
    4e3e:	2c c0       	rjmp	.+88     	; 0x4e98 <vfprintf+0x252>
    4e40:	96 fc       	sbrc	r9, 6
    4e42:	2a c0       	rjmp	.+84     	; 0x4e98 <vfprintf+0x252>
    4e44:	81 2f       	mov	r24, r17
    4e46:	90 e0       	ldi	r25, 0x00	; 0
    4e48:	8c 15       	cp	r24, r12
    4e4a:	9d 05       	cpc	r25, r13
    4e4c:	9c f0       	brlt	.+38     	; 0x4e74 <vfprintf+0x22e>
    4e4e:	3c ef       	ldi	r19, 0xFC	; 252
    4e50:	c3 16       	cp	r12, r19
    4e52:	3f ef       	ldi	r19, 0xFF	; 255
    4e54:	d3 06       	cpc	r13, r19
    4e56:	74 f0       	brlt	.+28     	; 0x4e74 <vfprintf+0x22e>
    4e58:	89 2d       	mov	r24, r9
    4e5a:	80 68       	ori	r24, 0x80	; 128
    4e5c:	98 2e       	mov	r9, r24
    4e5e:	0a c0       	rjmp	.+20     	; 0x4e74 <vfprintf+0x22e>
    4e60:	e2 e0       	ldi	r30, 0x02	; 2
    4e62:	f0 e0       	ldi	r31, 0x00	; 0
    4e64:	ec 0f       	add	r30, r28
    4e66:	fd 1f       	adc	r31, r29
    4e68:	e1 0f       	add	r30, r17
    4e6a:	f1 1d       	adc	r31, r1
    4e6c:	80 81       	ld	r24, Z
    4e6e:	80 33       	cpi	r24, 0x30	; 48
    4e70:	19 f4       	brne	.+6      	; 0x4e78 <vfprintf+0x232>
    4e72:	11 50       	subi	r17, 0x01	; 1
    4e74:	11 11       	cpse	r17, r1
    4e76:	f4 cf       	rjmp	.-24     	; 0x4e60 <vfprintf+0x21a>
    4e78:	97 fe       	sbrs	r9, 7
    4e7a:	0e c0       	rjmp	.+28     	; 0x4e98 <vfprintf+0x252>
    4e7c:	44 24       	eor	r4, r4
    4e7e:	43 94       	inc	r4
    4e80:	41 0e       	add	r4, r17
    4e82:	81 2f       	mov	r24, r17
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	c8 16       	cp	r12, r24
    4e88:	d9 06       	cpc	r13, r25
    4e8a:	2c f4       	brge	.+10     	; 0x4e96 <vfprintf+0x250>
    4e8c:	1c 19       	sub	r17, r12
    4e8e:	04 c0       	rjmp	.+8      	; 0x4e98 <vfprintf+0x252>
    4e90:	44 24       	eor	r4, r4
    4e92:	43 94       	inc	r4
    4e94:	01 c0       	rjmp	.+2      	; 0x4e98 <vfprintf+0x252>
    4e96:	10 e0       	ldi	r17, 0x00	; 0
    4e98:	97 fe       	sbrs	r9, 7
    4e9a:	06 c0       	rjmp	.+12     	; 0x4ea8 <vfprintf+0x262>
    4e9c:	1c 14       	cp	r1, r12
    4e9e:	1d 04       	cpc	r1, r13
    4ea0:	34 f4       	brge	.+12     	; 0x4eae <vfprintf+0x268>
    4ea2:	c6 01       	movw	r24, r12
    4ea4:	01 96       	adiw	r24, 0x01	; 1
    4ea6:	05 c0       	rjmp	.+10     	; 0x4eb2 <vfprintf+0x26c>
    4ea8:	85 e0       	ldi	r24, 0x05	; 5
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	02 c0       	rjmp	.+4      	; 0x4eb2 <vfprintf+0x26c>
    4eae:	81 e0       	ldi	r24, 0x01	; 1
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	01 11       	cpse	r16, r1
    4eb4:	01 96       	adiw	r24, 0x01	; 1
    4eb6:	11 23       	and	r17, r17
    4eb8:	31 f0       	breq	.+12     	; 0x4ec6 <vfprintf+0x280>
    4eba:	21 2f       	mov	r18, r17
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    4ebe:	2f 5f       	subi	r18, 0xFF	; 255
    4ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ec2:	82 0f       	add	r24, r18
    4ec4:	93 1f       	adc	r25, r19
    4ec6:	25 2d       	mov	r18, r5
    4ec8:	30 e0       	ldi	r19, 0x00	; 0
    4eca:	82 17       	cp	r24, r18
    4ecc:	93 07       	cpc	r25, r19
    4ece:	14 f4       	brge	.+4      	; 0x4ed4 <vfprintf+0x28e>
    4ed0:	58 1a       	sub	r5, r24
    4ed2:	01 c0       	rjmp	.+2      	; 0x4ed6 <vfprintf+0x290>
    4ed4:	51 2c       	mov	r5, r1
    4ed6:	89 2d       	mov	r24, r9
    4ed8:	89 70       	andi	r24, 0x09	; 9
    4eda:	49 f4       	brne	.+18     	; 0x4eee <vfprintf+0x2a8>
    4edc:	55 20       	and	r5, r5
    4ede:	39 f0       	breq	.+14     	; 0x4eee <vfprintf+0x2a8>
    4ee0:	b7 01       	movw	r22, r14
    4ee2:	80 e2       	ldi	r24, 0x20	; 32
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    4eea:	5a 94       	dec	r5
    4eec:	f7 cf       	rjmp	.-18     	; 0x4edc <vfprintf+0x296>
    4eee:	00 23       	and	r16, r16
    4ef0:	29 f0       	breq	.+10     	; 0x4efc <vfprintf+0x2b6>
    4ef2:	b7 01       	movw	r22, r14
    4ef4:	80 2f       	mov	r24, r16
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    4efc:	93 fc       	sbrc	r9, 3
    4efe:	09 c0       	rjmp	.+18     	; 0x4f12 <vfprintf+0x2cc>
    4f00:	55 20       	and	r5, r5
    4f02:	39 f0       	breq	.+14     	; 0x4f12 <vfprintf+0x2cc>
    4f04:	b7 01       	movw	r22, r14
    4f06:	80 e3       	ldi	r24, 0x30	; 48
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    4f0e:	5a 94       	dec	r5
    4f10:	f7 cf       	rjmp	.-18     	; 0x4f00 <vfprintf+0x2ba>
    4f12:	97 fe       	sbrs	r9, 7
    4f14:	4c c0       	rjmp	.+152    	; 0x4fae <vfprintf+0x368>
    4f16:	46 01       	movw	r8, r12
    4f18:	d7 fe       	sbrs	r13, 7
    4f1a:	02 c0       	rjmp	.+4      	; 0x4f20 <vfprintf+0x2da>
    4f1c:	81 2c       	mov	r8, r1
    4f1e:	91 2c       	mov	r9, r1
    4f20:	c6 01       	movw	r24, r12
    4f22:	88 19       	sub	r24, r8
    4f24:	99 09       	sbc	r25, r9
    4f26:	f3 01       	movw	r30, r6
    4f28:	e8 0f       	add	r30, r24
    4f2a:	f9 1f       	adc	r31, r25
    4f2c:	fe 87       	std	Y+14, r31	; 0x0e
    4f2e:	ed 87       	std	Y+13, r30	; 0x0d
    4f30:	96 01       	movw	r18, r12
    4f32:	24 19       	sub	r18, r4
    4f34:	31 09       	sbc	r19, r1
    4f36:	38 8b       	std	Y+16, r19	; 0x10
    4f38:	2f 87       	std	Y+15, r18	; 0x0f
    4f3a:	01 2f       	mov	r16, r17
    4f3c:	10 e0       	ldi	r17, 0x00	; 0
    4f3e:	11 95       	neg	r17
    4f40:	01 95       	neg	r16
    4f42:	11 09       	sbc	r17, r1
    4f44:	3f ef       	ldi	r19, 0xFF	; 255
    4f46:	83 16       	cp	r8, r19
    4f48:	93 06       	cpc	r9, r19
    4f4a:	29 f4       	brne	.+10     	; 0x4f56 <vfprintf+0x310>
    4f4c:	b7 01       	movw	r22, r14
    4f4e:	8e e2       	ldi	r24, 0x2E	; 46
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    4f56:	c8 14       	cp	r12, r8
    4f58:	d9 04       	cpc	r13, r9
    4f5a:	4c f0       	brlt	.+18     	; 0x4f6e <vfprintf+0x328>
    4f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f5e:	98 89       	ldd	r25, Y+16	; 0x10
    4f60:	88 15       	cp	r24, r8
    4f62:	99 05       	cpc	r25, r9
    4f64:	24 f4       	brge	.+8      	; 0x4f6e <vfprintf+0x328>
    4f66:	ed 85       	ldd	r30, Y+13	; 0x0d
    4f68:	fe 85       	ldd	r31, Y+14	; 0x0e
    4f6a:	81 81       	ldd	r24, Z+1	; 0x01
    4f6c:	01 c0       	rjmp	.+2      	; 0x4f70 <vfprintf+0x32a>
    4f6e:	80 e3       	ldi	r24, 0x30	; 48
    4f70:	f1 e0       	ldi	r31, 0x01	; 1
    4f72:	8f 1a       	sub	r8, r31
    4f74:	91 08       	sbc	r9, r1
    4f76:	2d 85       	ldd	r18, Y+13	; 0x0d
    4f78:	3e 85       	ldd	r19, Y+14	; 0x0e
    4f7a:	2f 5f       	subi	r18, 0xFF	; 255
    4f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f7e:	3e 87       	std	Y+14, r19	; 0x0e
    4f80:	2d 87       	std	Y+13, r18	; 0x0d
    4f82:	80 16       	cp	r8, r16
    4f84:	91 06       	cpc	r9, r17
    4f86:	2c f0       	brlt	.+10     	; 0x4f92 <vfprintf+0x34c>
    4f88:	b7 01       	movw	r22, r14
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    4f90:	d9 cf       	rjmp	.-78     	; 0x4f44 <vfprintf+0x2fe>
    4f92:	c8 14       	cp	r12, r8
    4f94:	d9 04       	cpc	r13, r9
    4f96:	41 f4       	brne	.+16     	; 0x4fa8 <vfprintf+0x362>
    4f98:	9a 81       	ldd	r25, Y+2	; 0x02
    4f9a:	96 33       	cpi	r25, 0x36	; 54
    4f9c:	20 f4       	brcc	.+8      	; 0x4fa6 <vfprintf+0x360>
    4f9e:	95 33       	cpi	r25, 0x35	; 53
    4fa0:	19 f4       	brne	.+6      	; 0x4fa8 <vfprintf+0x362>
    4fa2:	3c 85       	ldd	r19, Y+12	; 0x0c
    4fa4:	34 ff       	sbrs	r19, 4
    4fa6:	81 e3       	ldi	r24, 0x31	; 49
    4fa8:	b7 01       	movw	r22, r14
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	4e c0       	rjmp	.+156    	; 0x504a <vfprintf+0x404>
    4fae:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb0:	81 33       	cpi	r24, 0x31	; 49
    4fb2:	19 f0       	breq	.+6      	; 0x4fba <vfprintf+0x374>
    4fb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4fb6:	9f 7e       	andi	r25, 0xEF	; 239
    4fb8:	9c 87       	std	Y+12, r25	; 0x0c
    4fba:	b7 01       	movw	r22, r14
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    4fc2:	11 11       	cpse	r17, r1
    4fc4:	05 c0       	rjmp	.+10     	; 0x4fd0 <vfprintf+0x38a>
    4fc6:	94 fc       	sbrc	r9, 4
    4fc8:	18 c0       	rjmp	.+48     	; 0x4ffa <vfprintf+0x3b4>
    4fca:	85 e6       	ldi	r24, 0x65	; 101
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	17 c0       	rjmp	.+46     	; 0x4ffe <vfprintf+0x3b8>
    4fd0:	b7 01       	movw	r22, r14
    4fd2:	8e e2       	ldi	r24, 0x2E	; 46
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
    4fd6:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    4fda:	1e 5f       	subi	r17, 0xFE	; 254
    4fdc:	82 e0       	ldi	r24, 0x02	; 2
    4fde:	01 e0       	ldi	r16, 0x01	; 1
    4fe0:	08 0f       	add	r16, r24
    4fe2:	f3 01       	movw	r30, r6
    4fe4:	e8 0f       	add	r30, r24
    4fe6:	f1 1d       	adc	r31, r1
    4fe8:	80 81       	ld	r24, Z
    4fea:	b7 01       	movw	r22, r14
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    4ff2:	80 2f       	mov	r24, r16
    4ff4:	01 13       	cpse	r16, r17
    4ff6:	f3 cf       	rjmp	.-26     	; 0x4fde <vfprintf+0x398>
    4ff8:	e6 cf       	rjmp	.-52     	; 0x4fc6 <vfprintf+0x380>
    4ffa:	85 e4       	ldi	r24, 0x45	; 69
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	b7 01       	movw	r22, r14
    5000:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    5004:	d7 fc       	sbrc	r13, 7
    5006:	06 c0       	rjmp	.+12     	; 0x5014 <vfprintf+0x3ce>
    5008:	c1 14       	cp	r12, r1
    500a:	d1 04       	cpc	r13, r1
    500c:	41 f4       	brne	.+16     	; 0x501e <vfprintf+0x3d8>
    500e:	ec 85       	ldd	r30, Y+12	; 0x0c
    5010:	e4 ff       	sbrs	r30, 4
    5012:	05 c0       	rjmp	.+10     	; 0x501e <vfprintf+0x3d8>
    5014:	d1 94       	neg	r13
    5016:	c1 94       	neg	r12
    5018:	d1 08       	sbc	r13, r1
    501a:	8d e2       	ldi	r24, 0x2D	; 45
    501c:	01 c0       	rjmp	.+2      	; 0x5020 <vfprintf+0x3da>
    501e:	8b e2       	ldi	r24, 0x2B	; 43
    5020:	b7 01       	movw	r22, r14
    5022:	90 e0       	ldi	r25, 0x00	; 0
    5024:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    5028:	80 e3       	ldi	r24, 0x30	; 48
    502a:	2a e0       	ldi	r18, 0x0A	; 10
    502c:	c2 16       	cp	r12, r18
    502e:	d1 04       	cpc	r13, r1
    5030:	2c f0       	brlt	.+10     	; 0x503c <vfprintf+0x3f6>
    5032:	8f 5f       	subi	r24, 0xFF	; 255
    5034:	fa e0       	ldi	r31, 0x0A	; 10
    5036:	cf 1a       	sub	r12, r31
    5038:	d1 08       	sbc	r13, r1
    503a:	f7 cf       	rjmp	.-18     	; 0x502a <vfprintf+0x3e4>
    503c:	b7 01       	movw	r22, r14
    503e:	90 e0       	ldi	r25, 0x00	; 0
    5040:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    5044:	b7 01       	movw	r22, r14
    5046:	c6 01       	movw	r24, r12
    5048:	c0 96       	adiw	r24, 0x30	; 48
    504a:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    504e:	54 c1       	rjmp	.+680    	; 0x52f8 <vfprintf+0x6b2>
    5050:	83 36       	cpi	r24, 0x63	; 99
    5052:	31 f0       	breq	.+12     	; 0x5060 <vfprintf+0x41a>
    5054:	83 37       	cpi	r24, 0x73	; 115
    5056:	79 f0       	breq	.+30     	; 0x5076 <vfprintf+0x430>
    5058:	83 35       	cpi	r24, 0x53	; 83
    505a:	09 f0       	breq	.+2      	; 0x505e <vfprintf+0x418>
    505c:	56 c0       	rjmp	.+172    	; 0x510a <vfprintf+0x4c4>
    505e:	20 c0       	rjmp	.+64     	; 0x50a0 <vfprintf+0x45a>
    5060:	56 01       	movw	r10, r12
    5062:	32 e0       	ldi	r19, 0x02	; 2
    5064:	a3 0e       	add	r10, r19
    5066:	b1 1c       	adc	r11, r1
    5068:	f6 01       	movw	r30, r12
    506a:	80 81       	ld	r24, Z
    506c:	89 83       	std	Y+1, r24	; 0x01
    506e:	01 e0       	ldi	r16, 0x01	; 1
    5070:	10 e0       	ldi	r17, 0x00	; 0
    5072:	63 01       	movw	r12, r6
    5074:	12 c0       	rjmp	.+36     	; 0x509a <vfprintf+0x454>
    5076:	56 01       	movw	r10, r12
    5078:	f2 e0       	ldi	r31, 0x02	; 2
    507a:	af 0e       	add	r10, r31
    507c:	b1 1c       	adc	r11, r1
    507e:	f6 01       	movw	r30, r12
    5080:	c0 80       	ld	r12, Z
    5082:	d1 80       	ldd	r13, Z+1	; 0x01
    5084:	96 fe       	sbrs	r9, 6
    5086:	03 c0       	rjmp	.+6      	; 0x508e <vfprintf+0x448>
    5088:	61 2f       	mov	r22, r17
    508a:	70 e0       	ldi	r23, 0x00	; 0
    508c:	02 c0       	rjmp	.+4      	; 0x5092 <vfprintf+0x44c>
    508e:	6f ef       	ldi	r22, 0xFF	; 255
    5090:	7f ef       	ldi	r23, 0xFF	; 255
    5092:	c6 01       	movw	r24, r12
    5094:	0e 94 df 2b 	call	0x57be	; 0x57be <strnlen>
    5098:	8c 01       	movw	r16, r24
    509a:	f9 2d       	mov	r31, r9
    509c:	ff 77       	andi	r31, 0x7F	; 127
    509e:	14 c0       	rjmp	.+40     	; 0x50c8 <vfprintf+0x482>
    50a0:	56 01       	movw	r10, r12
    50a2:	22 e0       	ldi	r18, 0x02	; 2
    50a4:	a2 0e       	add	r10, r18
    50a6:	b1 1c       	adc	r11, r1
    50a8:	f6 01       	movw	r30, r12
    50aa:	c0 80       	ld	r12, Z
    50ac:	d1 80       	ldd	r13, Z+1	; 0x01
    50ae:	96 fe       	sbrs	r9, 6
    50b0:	03 c0       	rjmp	.+6      	; 0x50b8 <vfprintf+0x472>
    50b2:	61 2f       	mov	r22, r17
    50b4:	70 e0       	ldi	r23, 0x00	; 0
    50b6:	02 c0       	rjmp	.+4      	; 0x50bc <vfprintf+0x476>
    50b8:	6f ef       	ldi	r22, 0xFF	; 255
    50ba:	7f ef       	ldi	r23, 0xFF	; 255
    50bc:	c6 01       	movw	r24, r12
    50be:	0e 94 cb 2b 	call	0x5796	; 0x5796 <strnlen_P>
    50c2:	8c 01       	movw	r16, r24
    50c4:	f9 2d       	mov	r31, r9
    50c6:	f0 68       	ori	r31, 0x80	; 128
    50c8:	9f 2e       	mov	r9, r31
    50ca:	f3 fd       	sbrc	r31, 3
    50cc:	1a c0       	rjmp	.+52     	; 0x5102 <vfprintf+0x4bc>
    50ce:	85 2d       	mov	r24, r5
    50d0:	90 e0       	ldi	r25, 0x00	; 0
    50d2:	08 17       	cp	r16, r24
    50d4:	19 07       	cpc	r17, r25
    50d6:	a8 f4       	brcc	.+42     	; 0x5102 <vfprintf+0x4bc>
    50d8:	b7 01       	movw	r22, r14
    50da:	80 e2       	ldi	r24, 0x20	; 32
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    50e2:	5a 94       	dec	r5
    50e4:	f4 cf       	rjmp	.-24     	; 0x50ce <vfprintf+0x488>
    50e6:	f6 01       	movw	r30, r12
    50e8:	97 fc       	sbrc	r9, 7
    50ea:	85 91       	lpm	r24, Z+
    50ec:	97 fe       	sbrs	r9, 7
    50ee:	81 91       	ld	r24, Z+
    50f0:	6f 01       	movw	r12, r30
    50f2:	b7 01       	movw	r22, r14
    50f4:	90 e0       	ldi	r25, 0x00	; 0
    50f6:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    50fa:	51 10       	cpse	r5, r1
    50fc:	5a 94       	dec	r5
    50fe:	01 50       	subi	r16, 0x01	; 1
    5100:	11 09       	sbc	r17, r1
    5102:	01 15       	cp	r16, r1
    5104:	11 05       	cpc	r17, r1
    5106:	79 f7       	brne	.-34     	; 0x50e6 <vfprintf+0x4a0>
    5108:	f7 c0       	rjmp	.+494    	; 0x52f8 <vfprintf+0x6b2>
    510a:	84 36       	cpi	r24, 0x64	; 100
    510c:	11 f0       	breq	.+4      	; 0x5112 <vfprintf+0x4cc>
    510e:	89 36       	cpi	r24, 0x69	; 105
    5110:	61 f5       	brne	.+88     	; 0x516a <vfprintf+0x524>
    5112:	56 01       	movw	r10, r12
    5114:	97 fe       	sbrs	r9, 7
    5116:	09 c0       	rjmp	.+18     	; 0x512a <vfprintf+0x4e4>
    5118:	24 e0       	ldi	r18, 0x04	; 4
    511a:	a2 0e       	add	r10, r18
    511c:	b1 1c       	adc	r11, r1
    511e:	f6 01       	movw	r30, r12
    5120:	60 81       	ld	r22, Z
    5122:	71 81       	ldd	r23, Z+1	; 0x01
    5124:	82 81       	ldd	r24, Z+2	; 0x02
    5126:	93 81       	ldd	r25, Z+3	; 0x03
    5128:	0a c0       	rjmp	.+20     	; 0x513e <vfprintf+0x4f8>
    512a:	f2 e0       	ldi	r31, 0x02	; 2
    512c:	af 0e       	add	r10, r31
    512e:	b1 1c       	adc	r11, r1
    5130:	f6 01       	movw	r30, r12
    5132:	60 81       	ld	r22, Z
    5134:	71 81       	ldd	r23, Z+1	; 0x01
    5136:	07 2e       	mov	r0, r23
    5138:	00 0c       	add	r0, r0
    513a:	88 0b       	sbc	r24, r24
    513c:	99 0b       	sbc	r25, r25
    513e:	f9 2d       	mov	r31, r9
    5140:	ff 76       	andi	r31, 0x6F	; 111
    5142:	9f 2e       	mov	r9, r31
    5144:	97 ff       	sbrs	r25, 7
    5146:	09 c0       	rjmp	.+18     	; 0x515a <vfprintf+0x514>
    5148:	90 95       	com	r25
    514a:	80 95       	com	r24
    514c:	70 95       	com	r23
    514e:	61 95       	neg	r22
    5150:	7f 4f       	sbci	r23, 0xFF	; 255
    5152:	8f 4f       	sbci	r24, 0xFF	; 255
    5154:	9f 4f       	sbci	r25, 0xFF	; 255
    5156:	f0 68       	ori	r31, 0x80	; 128
    5158:	9f 2e       	mov	r9, r31
    515a:	2a e0       	ldi	r18, 0x0A	; 10
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	a3 01       	movw	r20, r6
    5160:	0e 94 98 2c 	call	0x5930	; 0x5930 <__ultoa_invert>
    5164:	c8 2e       	mov	r12, r24
    5166:	c6 18       	sub	r12, r6
    5168:	3f c0       	rjmp	.+126    	; 0x51e8 <vfprintf+0x5a2>
    516a:	09 2d       	mov	r16, r9
    516c:	85 37       	cpi	r24, 0x75	; 117
    516e:	21 f4       	brne	.+8      	; 0x5178 <vfprintf+0x532>
    5170:	0f 7e       	andi	r16, 0xEF	; 239
    5172:	2a e0       	ldi	r18, 0x0A	; 10
    5174:	30 e0       	ldi	r19, 0x00	; 0
    5176:	1d c0       	rjmp	.+58     	; 0x51b2 <vfprintf+0x56c>
    5178:	09 7f       	andi	r16, 0xF9	; 249
    517a:	8f 36       	cpi	r24, 0x6F	; 111
    517c:	91 f0       	breq	.+36     	; 0x51a2 <vfprintf+0x55c>
    517e:	18 f4       	brcc	.+6      	; 0x5186 <vfprintf+0x540>
    5180:	88 35       	cpi	r24, 0x58	; 88
    5182:	59 f0       	breq	.+22     	; 0x519a <vfprintf+0x554>
    5184:	c3 c0       	rjmp	.+390    	; 0x530c <vfprintf+0x6c6>
    5186:	80 37       	cpi	r24, 0x70	; 112
    5188:	19 f0       	breq	.+6      	; 0x5190 <vfprintf+0x54a>
    518a:	88 37       	cpi	r24, 0x78	; 120
    518c:	11 f0       	breq	.+4      	; 0x5192 <vfprintf+0x54c>
    518e:	be c0       	rjmp	.+380    	; 0x530c <vfprintf+0x6c6>
    5190:	00 61       	ori	r16, 0x10	; 16
    5192:	04 ff       	sbrs	r16, 4
    5194:	09 c0       	rjmp	.+18     	; 0x51a8 <vfprintf+0x562>
    5196:	04 60       	ori	r16, 0x04	; 4
    5198:	07 c0       	rjmp	.+14     	; 0x51a8 <vfprintf+0x562>
    519a:	94 fe       	sbrs	r9, 4
    519c:	08 c0       	rjmp	.+16     	; 0x51ae <vfprintf+0x568>
    519e:	06 60       	ori	r16, 0x06	; 6
    51a0:	06 c0       	rjmp	.+12     	; 0x51ae <vfprintf+0x568>
    51a2:	28 e0       	ldi	r18, 0x08	; 8
    51a4:	30 e0       	ldi	r19, 0x00	; 0
    51a6:	05 c0       	rjmp	.+10     	; 0x51b2 <vfprintf+0x56c>
    51a8:	20 e1       	ldi	r18, 0x10	; 16
    51aa:	30 e0       	ldi	r19, 0x00	; 0
    51ac:	02 c0       	rjmp	.+4      	; 0x51b2 <vfprintf+0x56c>
    51ae:	20 e1       	ldi	r18, 0x10	; 16
    51b0:	32 e0       	ldi	r19, 0x02	; 2
    51b2:	56 01       	movw	r10, r12
    51b4:	07 ff       	sbrs	r16, 7
    51b6:	09 c0       	rjmp	.+18     	; 0x51ca <vfprintf+0x584>
    51b8:	84 e0       	ldi	r24, 0x04	; 4
    51ba:	a8 0e       	add	r10, r24
    51bc:	b1 1c       	adc	r11, r1
    51be:	f6 01       	movw	r30, r12
    51c0:	60 81       	ld	r22, Z
    51c2:	71 81       	ldd	r23, Z+1	; 0x01
    51c4:	82 81       	ldd	r24, Z+2	; 0x02
    51c6:	93 81       	ldd	r25, Z+3	; 0x03
    51c8:	08 c0       	rjmp	.+16     	; 0x51da <vfprintf+0x594>
    51ca:	f2 e0       	ldi	r31, 0x02	; 2
    51cc:	af 0e       	add	r10, r31
    51ce:	b1 1c       	adc	r11, r1
    51d0:	f6 01       	movw	r30, r12
    51d2:	60 81       	ld	r22, Z
    51d4:	71 81       	ldd	r23, Z+1	; 0x01
    51d6:	80 e0       	ldi	r24, 0x00	; 0
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	a3 01       	movw	r20, r6
    51dc:	0e 94 98 2c 	call	0x5930	; 0x5930 <__ultoa_invert>
    51e0:	c8 2e       	mov	r12, r24
    51e2:	c6 18       	sub	r12, r6
    51e4:	0f 77       	andi	r16, 0x7F	; 127
    51e6:	90 2e       	mov	r9, r16
    51e8:	96 fe       	sbrs	r9, 6
    51ea:	0b c0       	rjmp	.+22     	; 0x5202 <vfprintf+0x5bc>
    51ec:	09 2d       	mov	r16, r9
    51ee:	0e 7f       	andi	r16, 0xFE	; 254
    51f0:	c1 16       	cp	r12, r17
    51f2:	50 f4       	brcc	.+20     	; 0x5208 <vfprintf+0x5c2>
    51f4:	94 fe       	sbrs	r9, 4
    51f6:	0a c0       	rjmp	.+20     	; 0x520c <vfprintf+0x5c6>
    51f8:	92 fc       	sbrc	r9, 2
    51fa:	08 c0       	rjmp	.+16     	; 0x520c <vfprintf+0x5c6>
    51fc:	09 2d       	mov	r16, r9
    51fe:	0e 7e       	andi	r16, 0xEE	; 238
    5200:	05 c0       	rjmp	.+10     	; 0x520c <vfprintf+0x5c6>
    5202:	dc 2c       	mov	r13, r12
    5204:	09 2d       	mov	r16, r9
    5206:	03 c0       	rjmp	.+6      	; 0x520e <vfprintf+0x5c8>
    5208:	dc 2c       	mov	r13, r12
    520a:	01 c0       	rjmp	.+2      	; 0x520e <vfprintf+0x5c8>
    520c:	d1 2e       	mov	r13, r17
    520e:	04 ff       	sbrs	r16, 4
    5210:	0d c0       	rjmp	.+26     	; 0x522c <vfprintf+0x5e6>
    5212:	fe 01       	movw	r30, r28
    5214:	ec 0d       	add	r30, r12
    5216:	f1 1d       	adc	r31, r1
    5218:	80 81       	ld	r24, Z
    521a:	80 33       	cpi	r24, 0x30	; 48
    521c:	11 f4       	brne	.+4      	; 0x5222 <vfprintf+0x5dc>
    521e:	09 7e       	andi	r16, 0xE9	; 233
    5220:	09 c0       	rjmp	.+18     	; 0x5234 <vfprintf+0x5ee>
    5222:	02 ff       	sbrs	r16, 2
    5224:	06 c0       	rjmp	.+12     	; 0x5232 <vfprintf+0x5ec>
    5226:	d3 94       	inc	r13
    5228:	d3 94       	inc	r13
    522a:	04 c0       	rjmp	.+8      	; 0x5234 <vfprintf+0x5ee>
    522c:	80 2f       	mov	r24, r16
    522e:	86 78       	andi	r24, 0x86	; 134
    5230:	09 f0       	breq	.+2      	; 0x5234 <vfprintf+0x5ee>
    5232:	d3 94       	inc	r13
    5234:	03 fd       	sbrc	r16, 3
    5236:	11 c0       	rjmp	.+34     	; 0x525a <vfprintf+0x614>
    5238:	00 ff       	sbrs	r16, 0
    523a:	06 c0       	rjmp	.+12     	; 0x5248 <vfprintf+0x602>
    523c:	1c 2d       	mov	r17, r12
    523e:	d5 14       	cp	r13, r5
    5240:	80 f4       	brcc	.+32     	; 0x5262 <vfprintf+0x61c>
    5242:	15 0d       	add	r17, r5
    5244:	1d 19       	sub	r17, r13
    5246:	0d c0       	rjmp	.+26     	; 0x5262 <vfprintf+0x61c>
    5248:	d5 14       	cp	r13, r5
    524a:	58 f4       	brcc	.+22     	; 0x5262 <vfprintf+0x61c>
    524c:	b7 01       	movw	r22, r14
    524e:	80 e2       	ldi	r24, 0x20	; 32
    5250:	90 e0       	ldi	r25, 0x00	; 0
    5252:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    5256:	d3 94       	inc	r13
    5258:	f7 cf       	rjmp	.-18     	; 0x5248 <vfprintf+0x602>
    525a:	d5 14       	cp	r13, r5
    525c:	10 f4       	brcc	.+4      	; 0x5262 <vfprintf+0x61c>
    525e:	5d 18       	sub	r5, r13
    5260:	01 c0       	rjmp	.+2      	; 0x5264 <vfprintf+0x61e>
    5262:	51 2c       	mov	r5, r1
    5264:	04 ff       	sbrs	r16, 4
    5266:	10 c0       	rjmp	.+32     	; 0x5288 <vfprintf+0x642>
    5268:	b7 01       	movw	r22, r14
    526a:	80 e3       	ldi	r24, 0x30	; 48
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    5272:	02 ff       	sbrs	r16, 2
    5274:	17 c0       	rjmp	.+46     	; 0x52a4 <vfprintf+0x65e>
    5276:	01 fd       	sbrc	r16, 1
    5278:	03 c0       	rjmp	.+6      	; 0x5280 <vfprintf+0x63a>
    527a:	88 e7       	ldi	r24, 0x78	; 120
    527c:	90 e0       	ldi	r25, 0x00	; 0
    527e:	02 c0       	rjmp	.+4      	; 0x5284 <vfprintf+0x63e>
    5280:	88 e5       	ldi	r24, 0x58	; 88
    5282:	90 e0       	ldi	r25, 0x00	; 0
    5284:	b7 01       	movw	r22, r14
    5286:	0c c0       	rjmp	.+24     	; 0x52a0 <vfprintf+0x65a>
    5288:	80 2f       	mov	r24, r16
    528a:	86 78       	andi	r24, 0x86	; 134
    528c:	59 f0       	breq	.+22     	; 0x52a4 <vfprintf+0x65e>
    528e:	01 ff       	sbrs	r16, 1
    5290:	02 c0       	rjmp	.+4      	; 0x5296 <vfprintf+0x650>
    5292:	8b e2       	ldi	r24, 0x2B	; 43
    5294:	01 c0       	rjmp	.+2      	; 0x5298 <vfprintf+0x652>
    5296:	80 e2       	ldi	r24, 0x20	; 32
    5298:	07 fd       	sbrc	r16, 7
    529a:	8d e2       	ldi	r24, 0x2D	; 45
    529c:	b7 01       	movw	r22, r14
    529e:	90 e0       	ldi	r25, 0x00	; 0
    52a0:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    52a4:	c1 16       	cp	r12, r17
    52a6:	38 f4       	brcc	.+14     	; 0x52b6 <vfprintf+0x670>
    52a8:	b7 01       	movw	r22, r14
    52aa:	80 e3       	ldi	r24, 0x30	; 48
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    52b2:	11 50       	subi	r17, 0x01	; 1
    52b4:	f7 cf       	rjmp	.-18     	; 0x52a4 <vfprintf+0x65e>
    52b6:	ca 94       	dec	r12
    52b8:	f3 01       	movw	r30, r6
    52ba:	ec 0d       	add	r30, r12
    52bc:	f1 1d       	adc	r31, r1
    52be:	80 81       	ld	r24, Z
    52c0:	b7 01       	movw	r22, r14
    52c2:	90 e0       	ldi	r25, 0x00	; 0
    52c4:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    52c8:	c1 10       	cpse	r12, r1
    52ca:	f5 cf       	rjmp	.-22     	; 0x52b6 <vfprintf+0x670>
    52cc:	15 c0       	rjmp	.+42     	; 0x52f8 <vfprintf+0x6b2>
    52ce:	f4 e0       	ldi	r31, 0x04	; 4
    52d0:	f5 15       	cp	r31, r5
    52d2:	60 f5       	brcc	.+88     	; 0x532c <vfprintf+0x6e6>
    52d4:	84 e0       	ldi	r24, 0x04	; 4
    52d6:	58 1a       	sub	r5, r24
    52d8:	93 fe       	sbrs	r9, 3
    52da:	1f c0       	rjmp	.+62     	; 0x531a <vfprintf+0x6d4>
    52dc:	01 11       	cpse	r16, r1
    52de:	27 c0       	rjmp	.+78     	; 0x532e <vfprintf+0x6e8>
    52e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    52e2:	23 ff       	sbrs	r18, 3
    52e4:	2a c0       	rjmp	.+84     	; 0x533a <vfprintf+0x6f4>
    52e6:	0e e6       	ldi	r16, 0x6E	; 110
    52e8:	11 e0       	ldi	r17, 0x01	; 1
    52ea:	39 2d       	mov	r19, r9
    52ec:	30 71       	andi	r19, 0x10	; 16
    52ee:	93 2e       	mov	r9, r19
    52f0:	f8 01       	movw	r30, r16
    52f2:	84 91       	lpm	r24, Z
    52f4:	81 11       	cpse	r24, r1
    52f6:	24 c0       	rjmp	.+72     	; 0x5340 <vfprintf+0x6fa>
    52f8:	55 20       	and	r5, r5
    52fa:	09 f4       	brne	.+2      	; 0x52fe <vfprintf+0x6b8>
    52fc:	e4 cc       	rjmp	.-1592   	; 0x4cc6 <vfprintf+0x80>
    52fe:	b7 01       	movw	r22, r14
    5300:	80 e2       	ldi	r24, 0x20	; 32
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    5308:	5a 94       	dec	r5
    530a:	f6 cf       	rjmp	.-20     	; 0x52f8 <vfprintf+0x6b2>
    530c:	f7 01       	movw	r30, r14
    530e:	86 81       	ldd	r24, Z+6	; 0x06
    5310:	97 81       	ldd	r25, Z+7	; 0x07
    5312:	26 c0       	rjmp	.+76     	; 0x5360 <vfprintf+0x71a>
    5314:	8f ef       	ldi	r24, 0xFF	; 255
    5316:	9f ef       	ldi	r25, 0xFF	; 255
    5318:	23 c0       	rjmp	.+70     	; 0x5360 <vfprintf+0x71a>
    531a:	b7 01       	movw	r22, r14
    531c:	80 e2       	ldi	r24, 0x20	; 32
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    5324:	5a 94       	dec	r5
    5326:	51 10       	cpse	r5, r1
    5328:	f8 cf       	rjmp	.-16     	; 0x531a <vfprintf+0x6d4>
    532a:	d8 cf       	rjmp	.-80     	; 0x52dc <vfprintf+0x696>
    532c:	51 2c       	mov	r5, r1
    532e:	b7 01       	movw	r22, r14
    5330:	80 2f       	mov	r24, r16
    5332:	90 e0       	ldi	r25, 0x00	; 0
    5334:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    5338:	d3 cf       	rjmp	.-90     	; 0x52e0 <vfprintf+0x69a>
    533a:	02 e7       	ldi	r16, 0x72	; 114
    533c:	11 e0       	ldi	r17, 0x01	; 1
    533e:	d5 cf       	rjmp	.-86     	; 0x52ea <vfprintf+0x6a4>
    5340:	91 10       	cpse	r9, r1
    5342:	80 52       	subi	r24, 0x20	; 32
    5344:	b7 01       	movw	r22, r14
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <fputc>
    534c:	0f 5f       	subi	r16, 0xFF	; 255
    534e:	1f 4f       	sbci	r17, 0xFF	; 255
    5350:	cf cf       	rjmp	.-98     	; 0x52f0 <vfprintf+0x6aa>
    5352:	23 e0       	ldi	r18, 0x03	; 3
    5354:	25 15       	cp	r18, r5
    5356:	10 f4       	brcc	.+4      	; 0x535c <vfprintf+0x716>
    5358:	83 e0       	ldi	r24, 0x03	; 3
    535a:	bd cf       	rjmp	.-134    	; 0x52d6 <vfprintf+0x690>
    535c:	51 2c       	mov	r5, r1
    535e:	c0 cf       	rjmp	.-128    	; 0x52e0 <vfprintf+0x69a>
    5360:	60 96       	adiw	r28, 0x10	; 16
    5362:	0f b6       	in	r0, 0x3f	; 63
    5364:	f8 94       	cli
    5366:	de bf       	out	0x3e, r29	; 62
    5368:	0f be       	out	0x3f, r0	; 63
    536a:	cd bf       	out	0x3d, r28	; 61
    536c:	df 91       	pop	r29
    536e:	cf 91       	pop	r28
    5370:	1f 91       	pop	r17
    5372:	0f 91       	pop	r16
    5374:	ff 90       	pop	r15
    5376:	ef 90       	pop	r14
    5378:	df 90       	pop	r13
    537a:	cf 90       	pop	r12
    537c:	bf 90       	pop	r11
    537e:	af 90       	pop	r10
    5380:	9f 90       	pop	r9
    5382:	8f 90       	pop	r8
    5384:	7f 90       	pop	r7
    5386:	6f 90       	pop	r6
    5388:	5f 90       	pop	r5
    538a:	4f 90       	pop	r4
    538c:	3f 90       	pop	r3
    538e:	2f 90       	pop	r2
    5390:	08 95       	ret

00005392 <__tablejump2__>:
    5392:	ee 0f       	add	r30, r30
    5394:	ff 1f       	adc	r31, r31
    5396:	00 24       	eor	r0, r0
    5398:	00 1c       	adc	r0, r0
    539a:	0b be       	out	0x3b, r0	; 59
    539c:	07 90       	elpm	r0, Z+
    539e:	f6 91       	elpm	r31, Z
    53a0:	e0 2d       	mov	r30, r0
    53a2:	09 94       	ijmp

000053a4 <malloc>:
    53a4:	0f 93       	push	r16
    53a6:	1f 93       	push	r17
    53a8:	cf 93       	push	r28
    53aa:	df 93       	push	r29
    53ac:	82 30       	cpi	r24, 0x02	; 2
    53ae:	91 05       	cpc	r25, r1
    53b0:	10 f4       	brcc	.+4      	; 0x53b6 <malloc+0x12>
    53b2:	82 e0       	ldi	r24, 0x02	; 2
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	e0 91 ce 0d 	lds	r30, 0x0DCE	; 0x800dce <__flp>
    53ba:	f0 91 cf 0d 	lds	r31, 0x0DCF	; 0x800dcf <__flp+0x1>
    53be:	20 e0       	ldi	r18, 0x00	; 0
    53c0:	30 e0       	ldi	r19, 0x00	; 0
    53c2:	a0 e0       	ldi	r26, 0x00	; 0
    53c4:	b0 e0       	ldi	r27, 0x00	; 0
    53c6:	30 97       	sbiw	r30, 0x00	; 0
    53c8:	19 f1       	breq	.+70     	; 0x5410 <malloc+0x6c>
    53ca:	40 81       	ld	r20, Z
    53cc:	51 81       	ldd	r21, Z+1	; 0x01
    53ce:	02 81       	ldd	r16, Z+2	; 0x02
    53d0:	13 81       	ldd	r17, Z+3	; 0x03
    53d2:	48 17       	cp	r20, r24
    53d4:	59 07       	cpc	r21, r25
    53d6:	c8 f0       	brcs	.+50     	; 0x540a <malloc+0x66>
    53d8:	84 17       	cp	r24, r20
    53da:	95 07       	cpc	r25, r21
    53dc:	69 f4       	brne	.+26     	; 0x53f8 <malloc+0x54>
    53de:	10 97       	sbiw	r26, 0x00	; 0
    53e0:	31 f0       	breq	.+12     	; 0x53ee <malloc+0x4a>
    53e2:	12 96       	adiw	r26, 0x02	; 2
    53e4:	0c 93       	st	X, r16
    53e6:	12 97       	sbiw	r26, 0x02	; 2
    53e8:	13 96       	adiw	r26, 0x03	; 3
    53ea:	1c 93       	st	X, r17
    53ec:	27 c0       	rjmp	.+78     	; 0x543c <malloc+0x98>
    53ee:	00 93 ce 0d 	sts	0x0DCE, r16	; 0x800dce <__flp>
    53f2:	10 93 cf 0d 	sts	0x0DCF, r17	; 0x800dcf <__flp+0x1>
    53f6:	22 c0       	rjmp	.+68     	; 0x543c <malloc+0x98>
    53f8:	21 15       	cp	r18, r1
    53fa:	31 05       	cpc	r19, r1
    53fc:	19 f0       	breq	.+6      	; 0x5404 <malloc+0x60>
    53fe:	42 17       	cp	r20, r18
    5400:	53 07       	cpc	r21, r19
    5402:	18 f4       	brcc	.+6      	; 0x540a <malloc+0x66>
    5404:	9a 01       	movw	r18, r20
    5406:	bd 01       	movw	r22, r26
    5408:	ef 01       	movw	r28, r30
    540a:	df 01       	movw	r26, r30
    540c:	f8 01       	movw	r30, r16
    540e:	db cf       	rjmp	.-74     	; 0x53c6 <malloc+0x22>
    5410:	21 15       	cp	r18, r1
    5412:	31 05       	cpc	r19, r1
    5414:	f9 f0       	breq	.+62     	; 0x5454 <malloc+0xb0>
    5416:	28 1b       	sub	r18, r24
    5418:	39 0b       	sbc	r19, r25
    541a:	24 30       	cpi	r18, 0x04	; 4
    541c:	31 05       	cpc	r19, r1
    541e:	80 f4       	brcc	.+32     	; 0x5440 <malloc+0x9c>
    5420:	8a 81       	ldd	r24, Y+2	; 0x02
    5422:	9b 81       	ldd	r25, Y+3	; 0x03
    5424:	61 15       	cp	r22, r1
    5426:	71 05       	cpc	r23, r1
    5428:	21 f0       	breq	.+8      	; 0x5432 <malloc+0x8e>
    542a:	fb 01       	movw	r30, r22
    542c:	93 83       	std	Z+3, r25	; 0x03
    542e:	82 83       	std	Z+2, r24	; 0x02
    5430:	04 c0       	rjmp	.+8      	; 0x543a <malloc+0x96>
    5432:	90 93 cf 0d 	sts	0x0DCF, r25	; 0x800dcf <__flp+0x1>
    5436:	80 93 ce 0d 	sts	0x0DCE, r24	; 0x800dce <__flp>
    543a:	fe 01       	movw	r30, r28
    543c:	32 96       	adiw	r30, 0x02	; 2
    543e:	44 c0       	rjmp	.+136    	; 0x54c8 <malloc+0x124>
    5440:	fe 01       	movw	r30, r28
    5442:	e2 0f       	add	r30, r18
    5444:	f3 1f       	adc	r31, r19
    5446:	81 93       	st	Z+, r24
    5448:	91 93       	st	Z+, r25
    544a:	22 50       	subi	r18, 0x02	; 2
    544c:	31 09       	sbc	r19, r1
    544e:	39 83       	std	Y+1, r19	; 0x01
    5450:	28 83       	st	Y, r18
    5452:	3a c0       	rjmp	.+116    	; 0x54c8 <malloc+0x124>
    5454:	20 91 cc 0d 	lds	r18, 0x0DCC	; 0x800dcc <__brkval>
    5458:	30 91 cd 0d 	lds	r19, 0x0DCD	; 0x800dcd <__brkval+0x1>
    545c:	23 2b       	or	r18, r19
    545e:	41 f4       	brne	.+16     	; 0x5470 <malloc+0xcc>
    5460:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5464:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5468:	30 93 cd 0d 	sts	0x0DCD, r19	; 0x800dcd <__brkval+0x1>
    546c:	20 93 cc 0d 	sts	0x0DCC, r18	; 0x800dcc <__brkval>
    5470:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5474:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5478:	21 15       	cp	r18, r1
    547a:	31 05       	cpc	r19, r1
    547c:	41 f4       	brne	.+16     	; 0x548e <malloc+0xea>
    547e:	2d b7       	in	r18, 0x3d	; 61
    5480:	3e b7       	in	r19, 0x3e	; 62
    5482:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5486:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    548a:	24 1b       	sub	r18, r20
    548c:	35 0b       	sbc	r19, r21
    548e:	e0 91 cc 0d 	lds	r30, 0x0DCC	; 0x800dcc <__brkval>
    5492:	f0 91 cd 0d 	lds	r31, 0x0DCD	; 0x800dcd <__brkval+0x1>
    5496:	e2 17       	cp	r30, r18
    5498:	f3 07       	cpc	r31, r19
    549a:	a0 f4       	brcc	.+40     	; 0x54c4 <malloc+0x120>
    549c:	2e 1b       	sub	r18, r30
    549e:	3f 0b       	sbc	r19, r31
    54a0:	28 17       	cp	r18, r24
    54a2:	39 07       	cpc	r19, r25
    54a4:	78 f0       	brcs	.+30     	; 0x54c4 <malloc+0x120>
    54a6:	ac 01       	movw	r20, r24
    54a8:	4e 5f       	subi	r20, 0xFE	; 254
    54aa:	5f 4f       	sbci	r21, 0xFF	; 255
    54ac:	24 17       	cp	r18, r20
    54ae:	35 07       	cpc	r19, r21
    54b0:	48 f0       	brcs	.+18     	; 0x54c4 <malloc+0x120>
    54b2:	4e 0f       	add	r20, r30
    54b4:	5f 1f       	adc	r21, r31
    54b6:	50 93 cd 0d 	sts	0x0DCD, r21	; 0x800dcd <__brkval+0x1>
    54ba:	40 93 cc 0d 	sts	0x0DCC, r20	; 0x800dcc <__brkval>
    54be:	81 93       	st	Z+, r24
    54c0:	91 93       	st	Z+, r25
    54c2:	02 c0       	rjmp	.+4      	; 0x54c8 <malloc+0x124>
    54c4:	e0 e0       	ldi	r30, 0x00	; 0
    54c6:	f0 e0       	ldi	r31, 0x00	; 0
    54c8:	cf 01       	movw	r24, r30
    54ca:	df 91       	pop	r29
    54cc:	cf 91       	pop	r28
    54ce:	1f 91       	pop	r17
    54d0:	0f 91       	pop	r16
    54d2:	08 95       	ret

000054d4 <free>:
    54d4:	cf 93       	push	r28
    54d6:	df 93       	push	r29
    54d8:	00 97       	sbiw	r24, 0x00	; 0
    54da:	09 f4       	brne	.+2      	; 0x54de <free+0xa>
    54dc:	81 c0       	rjmp	.+258    	; 0x55e0 <free+0x10c>
    54de:	fc 01       	movw	r30, r24
    54e0:	32 97       	sbiw	r30, 0x02	; 2
    54e2:	13 82       	std	Z+3, r1	; 0x03
    54e4:	12 82       	std	Z+2, r1	; 0x02
    54e6:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <__flp>
    54ea:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <__flp+0x1>
    54ee:	10 97       	sbiw	r26, 0x00	; 0
    54f0:	81 f4       	brne	.+32     	; 0x5512 <free+0x3e>
    54f2:	20 81       	ld	r18, Z
    54f4:	31 81       	ldd	r19, Z+1	; 0x01
    54f6:	82 0f       	add	r24, r18
    54f8:	93 1f       	adc	r25, r19
    54fa:	20 91 cc 0d 	lds	r18, 0x0DCC	; 0x800dcc <__brkval>
    54fe:	30 91 cd 0d 	lds	r19, 0x0DCD	; 0x800dcd <__brkval+0x1>
    5502:	28 17       	cp	r18, r24
    5504:	39 07       	cpc	r19, r25
    5506:	51 f5       	brne	.+84     	; 0x555c <free+0x88>
    5508:	f0 93 cd 0d 	sts	0x0DCD, r31	; 0x800dcd <__brkval+0x1>
    550c:	e0 93 cc 0d 	sts	0x0DCC, r30	; 0x800dcc <__brkval>
    5510:	67 c0       	rjmp	.+206    	; 0x55e0 <free+0x10c>
    5512:	ed 01       	movw	r28, r26
    5514:	20 e0       	ldi	r18, 0x00	; 0
    5516:	30 e0       	ldi	r19, 0x00	; 0
    5518:	ce 17       	cp	r28, r30
    551a:	df 07       	cpc	r29, r31
    551c:	40 f4       	brcc	.+16     	; 0x552e <free+0x5a>
    551e:	4a 81       	ldd	r20, Y+2	; 0x02
    5520:	5b 81       	ldd	r21, Y+3	; 0x03
    5522:	9e 01       	movw	r18, r28
    5524:	41 15       	cp	r20, r1
    5526:	51 05       	cpc	r21, r1
    5528:	f1 f0       	breq	.+60     	; 0x5566 <free+0x92>
    552a:	ea 01       	movw	r28, r20
    552c:	f5 cf       	rjmp	.-22     	; 0x5518 <free+0x44>
    552e:	d3 83       	std	Z+3, r29	; 0x03
    5530:	c2 83       	std	Z+2, r28	; 0x02
    5532:	40 81       	ld	r20, Z
    5534:	51 81       	ldd	r21, Z+1	; 0x01
    5536:	84 0f       	add	r24, r20
    5538:	95 1f       	adc	r25, r21
    553a:	c8 17       	cp	r28, r24
    553c:	d9 07       	cpc	r29, r25
    553e:	59 f4       	brne	.+22     	; 0x5556 <free+0x82>
    5540:	88 81       	ld	r24, Y
    5542:	99 81       	ldd	r25, Y+1	; 0x01
    5544:	84 0f       	add	r24, r20
    5546:	95 1f       	adc	r25, r21
    5548:	02 96       	adiw	r24, 0x02	; 2
    554a:	91 83       	std	Z+1, r25	; 0x01
    554c:	80 83       	st	Z, r24
    554e:	8a 81       	ldd	r24, Y+2	; 0x02
    5550:	9b 81       	ldd	r25, Y+3	; 0x03
    5552:	93 83       	std	Z+3, r25	; 0x03
    5554:	82 83       	std	Z+2, r24	; 0x02
    5556:	21 15       	cp	r18, r1
    5558:	31 05       	cpc	r19, r1
    555a:	29 f4       	brne	.+10     	; 0x5566 <free+0x92>
    555c:	f0 93 cf 0d 	sts	0x0DCF, r31	; 0x800dcf <__flp+0x1>
    5560:	e0 93 ce 0d 	sts	0x0DCE, r30	; 0x800dce <__flp>
    5564:	3d c0       	rjmp	.+122    	; 0x55e0 <free+0x10c>
    5566:	e9 01       	movw	r28, r18
    5568:	fb 83       	std	Y+3, r31	; 0x03
    556a:	ea 83       	std	Y+2, r30	; 0x02
    556c:	49 91       	ld	r20, Y+
    556e:	59 91       	ld	r21, Y+
    5570:	c4 0f       	add	r28, r20
    5572:	d5 1f       	adc	r29, r21
    5574:	ec 17       	cp	r30, r28
    5576:	fd 07       	cpc	r31, r29
    5578:	61 f4       	brne	.+24     	; 0x5592 <free+0xbe>
    557a:	80 81       	ld	r24, Z
    557c:	91 81       	ldd	r25, Z+1	; 0x01
    557e:	84 0f       	add	r24, r20
    5580:	95 1f       	adc	r25, r21
    5582:	02 96       	adiw	r24, 0x02	; 2
    5584:	e9 01       	movw	r28, r18
    5586:	99 83       	std	Y+1, r25	; 0x01
    5588:	88 83       	st	Y, r24
    558a:	82 81       	ldd	r24, Z+2	; 0x02
    558c:	93 81       	ldd	r25, Z+3	; 0x03
    558e:	9b 83       	std	Y+3, r25	; 0x03
    5590:	8a 83       	std	Y+2, r24	; 0x02
    5592:	e0 e0       	ldi	r30, 0x00	; 0
    5594:	f0 e0       	ldi	r31, 0x00	; 0
    5596:	12 96       	adiw	r26, 0x02	; 2
    5598:	8d 91       	ld	r24, X+
    559a:	9c 91       	ld	r25, X
    559c:	13 97       	sbiw	r26, 0x03	; 3
    559e:	00 97       	sbiw	r24, 0x00	; 0
    55a0:	19 f0       	breq	.+6      	; 0x55a8 <free+0xd4>
    55a2:	fd 01       	movw	r30, r26
    55a4:	dc 01       	movw	r26, r24
    55a6:	f7 cf       	rjmp	.-18     	; 0x5596 <free+0xc2>
    55a8:	8d 91       	ld	r24, X+
    55aa:	9c 91       	ld	r25, X
    55ac:	11 97       	sbiw	r26, 0x01	; 1
    55ae:	9d 01       	movw	r18, r26
    55b0:	2e 5f       	subi	r18, 0xFE	; 254
    55b2:	3f 4f       	sbci	r19, 0xFF	; 255
    55b4:	82 0f       	add	r24, r18
    55b6:	93 1f       	adc	r25, r19
    55b8:	20 91 cc 0d 	lds	r18, 0x0DCC	; 0x800dcc <__brkval>
    55bc:	30 91 cd 0d 	lds	r19, 0x0DCD	; 0x800dcd <__brkval+0x1>
    55c0:	28 17       	cp	r18, r24
    55c2:	39 07       	cpc	r19, r25
    55c4:	69 f4       	brne	.+26     	; 0x55e0 <free+0x10c>
    55c6:	30 97       	sbiw	r30, 0x00	; 0
    55c8:	29 f4       	brne	.+10     	; 0x55d4 <free+0x100>
    55ca:	10 92 cf 0d 	sts	0x0DCF, r1	; 0x800dcf <__flp+0x1>
    55ce:	10 92 ce 0d 	sts	0x0DCE, r1	; 0x800dce <__flp>
    55d2:	02 c0       	rjmp	.+4      	; 0x55d8 <free+0x104>
    55d4:	13 82       	std	Z+3, r1	; 0x03
    55d6:	12 82       	std	Z+2, r1	; 0x02
    55d8:	b0 93 cd 0d 	sts	0x0DCD, r27	; 0x800dcd <__brkval+0x1>
    55dc:	a0 93 cc 0d 	sts	0x0DCC, r26	; 0x800dcc <__brkval>
    55e0:	df 91       	pop	r29
    55e2:	cf 91       	pop	r28
    55e4:	08 95       	ret

000055e6 <__ftoa_engine>:
    55e6:	28 30       	cpi	r18, 0x08	; 8
    55e8:	08 f0       	brcs	.+2      	; 0x55ec <__ftoa_engine+0x6>
    55ea:	27 e0       	ldi	r18, 0x07	; 7
    55ec:	33 27       	eor	r19, r19
    55ee:	da 01       	movw	r26, r20
    55f0:	99 0f       	add	r25, r25
    55f2:	31 1d       	adc	r19, r1
    55f4:	87 fd       	sbrc	r24, 7
    55f6:	91 60       	ori	r25, 0x01	; 1
    55f8:	00 96       	adiw	r24, 0x00	; 0
    55fa:	61 05       	cpc	r22, r1
    55fc:	71 05       	cpc	r23, r1
    55fe:	39 f4       	brne	.+14     	; 0x560e <__ftoa_engine+0x28>
    5600:	32 60       	ori	r19, 0x02	; 2
    5602:	2e 5f       	subi	r18, 0xFE	; 254
    5604:	3d 93       	st	X+, r19
    5606:	30 e3       	ldi	r19, 0x30	; 48
    5608:	2a 95       	dec	r18
    560a:	e1 f7       	brne	.-8      	; 0x5604 <__ftoa_engine+0x1e>
    560c:	08 95       	ret
    560e:	9f 3f       	cpi	r25, 0xFF	; 255
    5610:	30 f0       	brcs	.+12     	; 0x561e <__ftoa_engine+0x38>
    5612:	80 38       	cpi	r24, 0x80	; 128
    5614:	71 05       	cpc	r23, r1
    5616:	61 05       	cpc	r22, r1
    5618:	09 f0       	breq	.+2      	; 0x561c <__ftoa_engine+0x36>
    561a:	3c 5f       	subi	r19, 0xFC	; 252
    561c:	3c 5f       	subi	r19, 0xFC	; 252
    561e:	3d 93       	st	X+, r19
    5620:	91 30       	cpi	r25, 0x01	; 1
    5622:	08 f0       	brcs	.+2      	; 0x5626 <__ftoa_engine+0x40>
    5624:	80 68       	ori	r24, 0x80	; 128
    5626:	91 1d       	adc	r25, r1
    5628:	df 93       	push	r29
    562a:	cf 93       	push	r28
    562c:	1f 93       	push	r17
    562e:	0f 93       	push	r16
    5630:	ff 92       	push	r15
    5632:	ef 92       	push	r14
    5634:	19 2f       	mov	r17, r25
    5636:	98 7f       	andi	r25, 0xF8	; 248
    5638:	96 95       	lsr	r25
    563a:	e9 2f       	mov	r30, r25
    563c:	96 95       	lsr	r25
    563e:	96 95       	lsr	r25
    5640:	e9 0f       	add	r30, r25
    5642:	ff 27       	eor	r31, r31
    5644:	e0 53       	subi	r30, 0x30	; 48
    5646:	fe 4f       	sbci	r31, 0xFE	; 254
    5648:	99 27       	eor	r25, r25
    564a:	33 27       	eor	r19, r19
    564c:	ee 24       	eor	r14, r14
    564e:	ff 24       	eor	r15, r15
    5650:	a7 01       	movw	r20, r14
    5652:	e7 01       	movw	r28, r14
    5654:	05 90       	lpm	r0, Z+
    5656:	08 94       	sec
    5658:	07 94       	ror	r0
    565a:	28 f4       	brcc	.+10     	; 0x5666 <__ftoa_engine+0x80>
    565c:	36 0f       	add	r19, r22
    565e:	e7 1e       	adc	r14, r23
    5660:	f8 1e       	adc	r15, r24
    5662:	49 1f       	adc	r20, r25
    5664:	51 1d       	adc	r21, r1
    5666:	66 0f       	add	r22, r22
    5668:	77 1f       	adc	r23, r23
    566a:	88 1f       	adc	r24, r24
    566c:	99 1f       	adc	r25, r25
    566e:	06 94       	lsr	r0
    5670:	a1 f7       	brne	.-24     	; 0x565a <__ftoa_engine+0x74>
    5672:	05 90       	lpm	r0, Z+
    5674:	07 94       	ror	r0
    5676:	28 f4       	brcc	.+10     	; 0x5682 <__ftoa_engine+0x9c>
    5678:	e7 0e       	add	r14, r23
    567a:	f8 1e       	adc	r15, r24
    567c:	49 1f       	adc	r20, r25
    567e:	56 1f       	adc	r21, r22
    5680:	c1 1d       	adc	r28, r1
    5682:	77 0f       	add	r23, r23
    5684:	88 1f       	adc	r24, r24
    5686:	99 1f       	adc	r25, r25
    5688:	66 1f       	adc	r22, r22
    568a:	06 94       	lsr	r0
    568c:	a1 f7       	brne	.-24     	; 0x5676 <__ftoa_engine+0x90>
    568e:	05 90       	lpm	r0, Z+
    5690:	07 94       	ror	r0
    5692:	28 f4       	brcc	.+10     	; 0x569e <__ftoa_engine+0xb8>
    5694:	f8 0e       	add	r15, r24
    5696:	49 1f       	adc	r20, r25
    5698:	56 1f       	adc	r21, r22
    569a:	c7 1f       	adc	r28, r23
    569c:	d1 1d       	adc	r29, r1
    569e:	88 0f       	add	r24, r24
    56a0:	99 1f       	adc	r25, r25
    56a2:	66 1f       	adc	r22, r22
    56a4:	77 1f       	adc	r23, r23
    56a6:	06 94       	lsr	r0
    56a8:	a1 f7       	brne	.-24     	; 0x5692 <__ftoa_engine+0xac>
    56aa:	05 90       	lpm	r0, Z+
    56ac:	07 94       	ror	r0
    56ae:	20 f4       	brcc	.+8      	; 0x56b8 <__ftoa_engine+0xd2>
    56b0:	49 0f       	add	r20, r25
    56b2:	56 1f       	adc	r21, r22
    56b4:	c7 1f       	adc	r28, r23
    56b6:	d8 1f       	adc	r29, r24
    56b8:	99 0f       	add	r25, r25
    56ba:	66 1f       	adc	r22, r22
    56bc:	77 1f       	adc	r23, r23
    56be:	88 1f       	adc	r24, r24
    56c0:	06 94       	lsr	r0
    56c2:	a9 f7       	brne	.-22     	; 0x56ae <__ftoa_engine+0xc8>
    56c4:	84 91       	lpm	r24, Z
    56c6:	10 95       	com	r17
    56c8:	17 70       	andi	r17, 0x07	; 7
    56ca:	41 f0       	breq	.+16     	; 0x56dc <__ftoa_engine+0xf6>
    56cc:	d6 95       	lsr	r29
    56ce:	c7 95       	ror	r28
    56d0:	57 95       	ror	r21
    56d2:	47 95       	ror	r20
    56d4:	f7 94       	ror	r15
    56d6:	e7 94       	ror	r14
    56d8:	1a 95       	dec	r17
    56da:	c1 f7       	brne	.-16     	; 0x56cc <__ftoa_engine+0xe6>
    56dc:	e6 e7       	ldi	r30, 0x76	; 118
    56de:	f1 e0       	ldi	r31, 0x01	; 1
    56e0:	68 94       	set
    56e2:	15 90       	lpm	r1, Z+
    56e4:	15 91       	lpm	r17, Z+
    56e6:	35 91       	lpm	r19, Z+
    56e8:	65 91       	lpm	r22, Z+
    56ea:	95 91       	lpm	r25, Z+
    56ec:	05 90       	lpm	r0, Z+
    56ee:	7f e2       	ldi	r23, 0x2F	; 47
    56f0:	73 95       	inc	r23
    56f2:	e1 18       	sub	r14, r1
    56f4:	f1 0a       	sbc	r15, r17
    56f6:	43 0b       	sbc	r20, r19
    56f8:	56 0b       	sbc	r21, r22
    56fa:	c9 0b       	sbc	r28, r25
    56fc:	d0 09       	sbc	r29, r0
    56fe:	c0 f7       	brcc	.-16     	; 0x56f0 <__ftoa_engine+0x10a>
    5700:	e1 0c       	add	r14, r1
    5702:	f1 1e       	adc	r15, r17
    5704:	43 1f       	adc	r20, r19
    5706:	56 1f       	adc	r21, r22
    5708:	c9 1f       	adc	r28, r25
    570a:	d0 1d       	adc	r29, r0
    570c:	7e f4       	brtc	.+30     	; 0x572c <__ftoa_engine+0x146>
    570e:	70 33       	cpi	r23, 0x30	; 48
    5710:	11 f4       	brne	.+4      	; 0x5716 <__ftoa_engine+0x130>
    5712:	8a 95       	dec	r24
    5714:	e6 cf       	rjmp	.-52     	; 0x56e2 <__ftoa_engine+0xfc>
    5716:	e8 94       	clt
    5718:	01 50       	subi	r16, 0x01	; 1
    571a:	30 f0       	brcs	.+12     	; 0x5728 <__ftoa_engine+0x142>
    571c:	08 0f       	add	r16, r24
    571e:	0a f4       	brpl	.+2      	; 0x5722 <__ftoa_engine+0x13c>
    5720:	00 27       	eor	r16, r16
    5722:	02 17       	cp	r16, r18
    5724:	08 f4       	brcc	.+2      	; 0x5728 <__ftoa_engine+0x142>
    5726:	20 2f       	mov	r18, r16
    5728:	23 95       	inc	r18
    572a:	02 2f       	mov	r16, r18
    572c:	7a 33       	cpi	r23, 0x3A	; 58
    572e:	28 f0       	brcs	.+10     	; 0x573a <__ftoa_engine+0x154>
    5730:	79 e3       	ldi	r23, 0x39	; 57
    5732:	7d 93       	st	X+, r23
    5734:	2a 95       	dec	r18
    5736:	e9 f7       	brne	.-6      	; 0x5732 <__ftoa_engine+0x14c>
    5738:	10 c0       	rjmp	.+32     	; 0x575a <__ftoa_engine+0x174>
    573a:	7d 93       	st	X+, r23
    573c:	2a 95       	dec	r18
    573e:	89 f6       	brne	.-94     	; 0x56e2 <__ftoa_engine+0xfc>
    5740:	06 94       	lsr	r0
    5742:	97 95       	ror	r25
    5744:	67 95       	ror	r22
    5746:	37 95       	ror	r19
    5748:	17 95       	ror	r17
    574a:	17 94       	ror	r1
    574c:	e1 18       	sub	r14, r1
    574e:	f1 0a       	sbc	r15, r17
    5750:	43 0b       	sbc	r20, r19
    5752:	56 0b       	sbc	r21, r22
    5754:	c9 0b       	sbc	r28, r25
    5756:	d0 09       	sbc	r29, r0
    5758:	98 f0       	brcs	.+38     	; 0x5780 <__ftoa_engine+0x19a>
    575a:	23 95       	inc	r18
    575c:	7e 91       	ld	r23, -X
    575e:	73 95       	inc	r23
    5760:	7a 33       	cpi	r23, 0x3A	; 58
    5762:	08 f0       	brcs	.+2      	; 0x5766 <__ftoa_engine+0x180>
    5764:	70 e3       	ldi	r23, 0x30	; 48
    5766:	7c 93       	st	X, r23
    5768:	20 13       	cpse	r18, r16
    576a:	b8 f7       	brcc	.-18     	; 0x575a <__ftoa_engine+0x174>
    576c:	7e 91       	ld	r23, -X
    576e:	70 61       	ori	r23, 0x10	; 16
    5770:	7d 93       	st	X+, r23
    5772:	30 f0       	brcs	.+12     	; 0x5780 <__ftoa_engine+0x19a>
    5774:	83 95       	inc	r24
    5776:	71 e3       	ldi	r23, 0x31	; 49
    5778:	7d 93       	st	X+, r23
    577a:	70 e3       	ldi	r23, 0x30	; 48
    577c:	2a 95       	dec	r18
    577e:	e1 f7       	brne	.-8      	; 0x5778 <__ftoa_engine+0x192>
    5780:	11 24       	eor	r1, r1
    5782:	ef 90       	pop	r14
    5784:	ff 90       	pop	r15
    5786:	0f 91       	pop	r16
    5788:	1f 91       	pop	r17
    578a:	cf 91       	pop	r28
    578c:	df 91       	pop	r29
    578e:	99 27       	eor	r25, r25
    5790:	87 fd       	sbrc	r24, 7
    5792:	90 95       	com	r25
    5794:	08 95       	ret

00005796 <strnlen_P>:
    5796:	fc 01       	movw	r30, r24
    5798:	05 90       	lpm	r0, Z+
    579a:	61 50       	subi	r22, 0x01	; 1
    579c:	70 40       	sbci	r23, 0x00	; 0
    579e:	01 10       	cpse	r0, r1
    57a0:	d8 f7       	brcc	.-10     	; 0x5798 <strnlen_P+0x2>
    57a2:	80 95       	com	r24
    57a4:	90 95       	com	r25
    57a6:	8e 0f       	add	r24, r30
    57a8:	9f 1f       	adc	r25, r31
    57aa:	08 95       	ret

000057ac <memcpy>:
    57ac:	fb 01       	movw	r30, r22
    57ae:	dc 01       	movw	r26, r24
    57b0:	02 c0       	rjmp	.+4      	; 0x57b6 <memcpy+0xa>
    57b2:	01 90       	ld	r0, Z+
    57b4:	0d 92       	st	X+, r0
    57b6:	41 50       	subi	r20, 0x01	; 1
    57b8:	50 40       	sbci	r21, 0x00	; 0
    57ba:	d8 f7       	brcc	.-10     	; 0x57b2 <memcpy+0x6>
    57bc:	08 95       	ret

000057be <strnlen>:
    57be:	fc 01       	movw	r30, r24
    57c0:	61 50       	subi	r22, 0x01	; 1
    57c2:	70 40       	sbci	r23, 0x00	; 0
    57c4:	01 90       	ld	r0, Z+
    57c6:	01 10       	cpse	r0, r1
    57c8:	d8 f7       	brcc	.-10     	; 0x57c0 <strnlen+0x2>
    57ca:	80 95       	com	r24
    57cc:	90 95       	com	r25
    57ce:	8e 0f       	add	r24, r30
    57d0:	9f 1f       	adc	r25, r31
    57d2:	08 95       	ret

000057d4 <fputc>:
    57d4:	0f 93       	push	r16
    57d6:	1f 93       	push	r17
    57d8:	cf 93       	push	r28
    57da:	df 93       	push	r29
    57dc:	fb 01       	movw	r30, r22
    57de:	23 81       	ldd	r18, Z+3	; 0x03
    57e0:	21 fd       	sbrc	r18, 1
    57e2:	03 c0       	rjmp	.+6      	; 0x57ea <fputc+0x16>
    57e4:	8f ef       	ldi	r24, 0xFF	; 255
    57e6:	9f ef       	ldi	r25, 0xFF	; 255
    57e8:	2c c0       	rjmp	.+88     	; 0x5842 <fputc+0x6e>
    57ea:	22 ff       	sbrs	r18, 2
    57ec:	16 c0       	rjmp	.+44     	; 0x581a <fputc+0x46>
    57ee:	46 81       	ldd	r20, Z+6	; 0x06
    57f0:	57 81       	ldd	r21, Z+7	; 0x07
    57f2:	24 81       	ldd	r18, Z+4	; 0x04
    57f4:	35 81       	ldd	r19, Z+5	; 0x05
    57f6:	42 17       	cp	r20, r18
    57f8:	53 07       	cpc	r21, r19
    57fa:	44 f4       	brge	.+16     	; 0x580c <fputc+0x38>
    57fc:	a0 81       	ld	r26, Z
    57fe:	b1 81       	ldd	r27, Z+1	; 0x01
    5800:	9d 01       	movw	r18, r26
    5802:	2f 5f       	subi	r18, 0xFF	; 255
    5804:	3f 4f       	sbci	r19, 0xFF	; 255
    5806:	31 83       	std	Z+1, r19	; 0x01
    5808:	20 83       	st	Z, r18
    580a:	8c 93       	st	X, r24
    580c:	26 81       	ldd	r18, Z+6	; 0x06
    580e:	37 81       	ldd	r19, Z+7	; 0x07
    5810:	2f 5f       	subi	r18, 0xFF	; 255
    5812:	3f 4f       	sbci	r19, 0xFF	; 255
    5814:	37 83       	std	Z+7, r19	; 0x07
    5816:	26 83       	std	Z+6, r18	; 0x06
    5818:	14 c0       	rjmp	.+40     	; 0x5842 <fputc+0x6e>
    581a:	8b 01       	movw	r16, r22
    581c:	ec 01       	movw	r28, r24
    581e:	fb 01       	movw	r30, r22
    5820:	00 84       	ldd	r0, Z+8	; 0x08
    5822:	f1 85       	ldd	r31, Z+9	; 0x09
    5824:	e0 2d       	mov	r30, r0
    5826:	09 95       	icall
    5828:	89 2b       	or	r24, r25
    582a:	e1 f6       	brne	.-72     	; 0x57e4 <fputc+0x10>
    582c:	d8 01       	movw	r26, r16
    582e:	16 96       	adiw	r26, 0x06	; 6
    5830:	8d 91       	ld	r24, X+
    5832:	9c 91       	ld	r25, X
    5834:	17 97       	sbiw	r26, 0x07	; 7
    5836:	01 96       	adiw	r24, 0x01	; 1
    5838:	17 96       	adiw	r26, 0x07	; 7
    583a:	9c 93       	st	X, r25
    583c:	8e 93       	st	-X, r24
    583e:	16 97       	sbiw	r26, 0x06	; 6
    5840:	ce 01       	movw	r24, r28
    5842:	df 91       	pop	r29
    5844:	cf 91       	pop	r28
    5846:	1f 91       	pop	r17
    5848:	0f 91       	pop	r16
    584a:	08 95       	ret

0000584c <vsnprintf>:
    584c:	0f 93       	push	r16
    584e:	1f 93       	push	r17
    5850:	cf 93       	push	r28
    5852:	df 93       	push	r29
    5854:	cd b7       	in	r28, 0x3d	; 61
    5856:	de b7       	in	r29, 0x3e	; 62
    5858:	2e 97       	sbiw	r28, 0x0e	; 14
    585a:	0f b6       	in	r0, 0x3f	; 63
    585c:	f8 94       	cli
    585e:	de bf       	out	0x3e, r29	; 62
    5860:	0f be       	out	0x3f, r0	; 63
    5862:	cd bf       	out	0x3d, r28	; 61
    5864:	8c 01       	movw	r16, r24
    5866:	fa 01       	movw	r30, r20
    5868:	86 e0       	ldi	r24, 0x06	; 6
    586a:	8c 83       	std	Y+4, r24	; 0x04
    586c:	1a 83       	std	Y+2, r17	; 0x02
    586e:	09 83       	std	Y+1, r16	; 0x01
    5870:	77 ff       	sbrs	r23, 7
    5872:	02 c0       	rjmp	.+4      	; 0x5878 <vsnprintf+0x2c>
    5874:	60 e0       	ldi	r22, 0x00	; 0
    5876:	70 e8       	ldi	r23, 0x80	; 128
    5878:	cb 01       	movw	r24, r22
    587a:	01 97       	sbiw	r24, 0x01	; 1
    587c:	9e 83       	std	Y+6, r25	; 0x06
    587e:	8d 83       	std	Y+5, r24	; 0x05
    5880:	a9 01       	movw	r20, r18
    5882:	bf 01       	movw	r22, r30
    5884:	ce 01       	movw	r24, r28
    5886:	01 96       	adiw	r24, 0x01	; 1
    5888:	0e 94 23 26 	call	0x4c46	; 0x4c46 <vfprintf>
    588c:	4d 81       	ldd	r20, Y+5	; 0x05
    588e:	5e 81       	ldd	r21, Y+6	; 0x06
    5890:	57 fd       	sbrc	r21, 7
    5892:	0a c0       	rjmp	.+20     	; 0x58a8 <vsnprintf+0x5c>
    5894:	2f 81       	ldd	r18, Y+7	; 0x07
    5896:	38 85       	ldd	r19, Y+8	; 0x08
    5898:	42 17       	cp	r20, r18
    589a:	53 07       	cpc	r21, r19
    589c:	0c f4       	brge	.+2      	; 0x58a0 <vsnprintf+0x54>
    589e:	9a 01       	movw	r18, r20
    58a0:	f8 01       	movw	r30, r16
    58a2:	e2 0f       	add	r30, r18
    58a4:	f3 1f       	adc	r31, r19
    58a6:	10 82       	st	Z, r1
    58a8:	2e 96       	adiw	r28, 0x0e	; 14
    58aa:	0f b6       	in	r0, 0x3f	; 63
    58ac:	f8 94       	cli
    58ae:	de bf       	out	0x3e, r29	; 62
    58b0:	0f be       	out	0x3f, r0	; 63
    58b2:	cd bf       	out	0x3d, r28	; 61
    58b4:	df 91       	pop	r29
    58b6:	cf 91       	pop	r28
    58b8:	1f 91       	pop	r17
    58ba:	0f 91       	pop	r16
    58bc:	08 95       	ret

000058be <vsnprintf_P>:
    58be:	0f 93       	push	r16
    58c0:	1f 93       	push	r17
    58c2:	cf 93       	push	r28
    58c4:	df 93       	push	r29
    58c6:	cd b7       	in	r28, 0x3d	; 61
    58c8:	de b7       	in	r29, 0x3e	; 62
    58ca:	2e 97       	sbiw	r28, 0x0e	; 14
    58cc:	0f b6       	in	r0, 0x3f	; 63
    58ce:	f8 94       	cli
    58d0:	de bf       	out	0x3e, r29	; 62
    58d2:	0f be       	out	0x3f, r0	; 63
    58d4:	cd bf       	out	0x3d, r28	; 61
    58d6:	8c 01       	movw	r16, r24
    58d8:	fa 01       	movw	r30, r20
    58da:	8e e0       	ldi	r24, 0x0E	; 14
    58dc:	8c 83       	std	Y+4, r24	; 0x04
    58de:	1a 83       	std	Y+2, r17	; 0x02
    58e0:	09 83       	std	Y+1, r16	; 0x01
    58e2:	77 ff       	sbrs	r23, 7
    58e4:	02 c0       	rjmp	.+4      	; 0x58ea <vsnprintf_P+0x2c>
    58e6:	60 e0       	ldi	r22, 0x00	; 0
    58e8:	70 e8       	ldi	r23, 0x80	; 128
    58ea:	cb 01       	movw	r24, r22
    58ec:	01 97       	sbiw	r24, 0x01	; 1
    58ee:	9e 83       	std	Y+6, r25	; 0x06
    58f0:	8d 83       	std	Y+5, r24	; 0x05
    58f2:	a9 01       	movw	r20, r18
    58f4:	bf 01       	movw	r22, r30
    58f6:	ce 01       	movw	r24, r28
    58f8:	01 96       	adiw	r24, 0x01	; 1
    58fa:	0e 94 23 26 	call	0x4c46	; 0x4c46 <vfprintf>
    58fe:	4d 81       	ldd	r20, Y+5	; 0x05
    5900:	5e 81       	ldd	r21, Y+6	; 0x06
    5902:	57 fd       	sbrc	r21, 7
    5904:	0a c0       	rjmp	.+20     	; 0x591a <vsnprintf_P+0x5c>
    5906:	2f 81       	ldd	r18, Y+7	; 0x07
    5908:	38 85       	ldd	r19, Y+8	; 0x08
    590a:	42 17       	cp	r20, r18
    590c:	53 07       	cpc	r21, r19
    590e:	0c f4       	brge	.+2      	; 0x5912 <vsnprintf_P+0x54>
    5910:	9a 01       	movw	r18, r20
    5912:	f8 01       	movw	r30, r16
    5914:	e2 0f       	add	r30, r18
    5916:	f3 1f       	adc	r31, r19
    5918:	10 82       	st	Z, r1
    591a:	2e 96       	adiw	r28, 0x0e	; 14
    591c:	0f b6       	in	r0, 0x3f	; 63
    591e:	f8 94       	cli
    5920:	de bf       	out	0x3e, r29	; 62
    5922:	0f be       	out	0x3f, r0	; 63
    5924:	cd bf       	out	0x3d, r28	; 61
    5926:	df 91       	pop	r29
    5928:	cf 91       	pop	r28
    592a:	1f 91       	pop	r17
    592c:	0f 91       	pop	r16
    592e:	08 95       	ret

00005930 <__ultoa_invert>:
    5930:	fa 01       	movw	r30, r20
    5932:	aa 27       	eor	r26, r26
    5934:	28 30       	cpi	r18, 0x08	; 8
    5936:	51 f1       	breq	.+84     	; 0x598c <__ultoa_invert+0x5c>
    5938:	20 31       	cpi	r18, 0x10	; 16
    593a:	81 f1       	breq	.+96     	; 0x599c <__ultoa_invert+0x6c>
    593c:	e8 94       	clt
    593e:	6f 93       	push	r22
    5940:	6e 7f       	andi	r22, 0xFE	; 254
    5942:	6e 5f       	subi	r22, 0xFE	; 254
    5944:	7f 4f       	sbci	r23, 0xFF	; 255
    5946:	8f 4f       	sbci	r24, 0xFF	; 255
    5948:	9f 4f       	sbci	r25, 0xFF	; 255
    594a:	af 4f       	sbci	r26, 0xFF	; 255
    594c:	b1 e0       	ldi	r27, 0x01	; 1
    594e:	3e d0       	rcall	.+124    	; 0x59cc <__ultoa_invert+0x9c>
    5950:	b4 e0       	ldi	r27, 0x04	; 4
    5952:	3c d0       	rcall	.+120    	; 0x59cc <__ultoa_invert+0x9c>
    5954:	67 0f       	add	r22, r23
    5956:	78 1f       	adc	r23, r24
    5958:	89 1f       	adc	r24, r25
    595a:	9a 1f       	adc	r25, r26
    595c:	a1 1d       	adc	r26, r1
    595e:	68 0f       	add	r22, r24
    5960:	79 1f       	adc	r23, r25
    5962:	8a 1f       	adc	r24, r26
    5964:	91 1d       	adc	r25, r1
    5966:	a1 1d       	adc	r26, r1
    5968:	6a 0f       	add	r22, r26
    596a:	71 1d       	adc	r23, r1
    596c:	81 1d       	adc	r24, r1
    596e:	91 1d       	adc	r25, r1
    5970:	a1 1d       	adc	r26, r1
    5972:	20 d0       	rcall	.+64     	; 0x59b4 <__ultoa_invert+0x84>
    5974:	09 f4       	brne	.+2      	; 0x5978 <__ultoa_invert+0x48>
    5976:	68 94       	set
    5978:	3f 91       	pop	r19
    597a:	2a e0       	ldi	r18, 0x0A	; 10
    597c:	26 9f       	mul	r18, r22
    597e:	11 24       	eor	r1, r1
    5980:	30 19       	sub	r19, r0
    5982:	30 5d       	subi	r19, 0xD0	; 208
    5984:	31 93       	st	Z+, r19
    5986:	de f6       	brtc	.-74     	; 0x593e <__ultoa_invert+0xe>
    5988:	cf 01       	movw	r24, r30
    598a:	08 95       	ret
    598c:	46 2f       	mov	r20, r22
    598e:	47 70       	andi	r20, 0x07	; 7
    5990:	40 5d       	subi	r20, 0xD0	; 208
    5992:	41 93       	st	Z+, r20
    5994:	b3 e0       	ldi	r27, 0x03	; 3
    5996:	0f d0       	rcall	.+30     	; 0x59b6 <__ultoa_invert+0x86>
    5998:	c9 f7       	brne	.-14     	; 0x598c <__ultoa_invert+0x5c>
    599a:	f6 cf       	rjmp	.-20     	; 0x5988 <__ultoa_invert+0x58>
    599c:	46 2f       	mov	r20, r22
    599e:	4f 70       	andi	r20, 0x0F	; 15
    59a0:	40 5d       	subi	r20, 0xD0	; 208
    59a2:	4a 33       	cpi	r20, 0x3A	; 58
    59a4:	18 f0       	brcs	.+6      	; 0x59ac <__ultoa_invert+0x7c>
    59a6:	49 5d       	subi	r20, 0xD9	; 217
    59a8:	31 fd       	sbrc	r19, 1
    59aa:	40 52       	subi	r20, 0x20	; 32
    59ac:	41 93       	st	Z+, r20
    59ae:	02 d0       	rcall	.+4      	; 0x59b4 <__ultoa_invert+0x84>
    59b0:	a9 f7       	brne	.-22     	; 0x599c <__ultoa_invert+0x6c>
    59b2:	ea cf       	rjmp	.-44     	; 0x5988 <__ultoa_invert+0x58>
    59b4:	b4 e0       	ldi	r27, 0x04	; 4
    59b6:	a6 95       	lsr	r26
    59b8:	97 95       	ror	r25
    59ba:	87 95       	ror	r24
    59bc:	77 95       	ror	r23
    59be:	67 95       	ror	r22
    59c0:	ba 95       	dec	r27
    59c2:	c9 f7       	brne	.-14     	; 0x59b6 <__ultoa_invert+0x86>
    59c4:	00 97       	sbiw	r24, 0x00	; 0
    59c6:	61 05       	cpc	r22, r1
    59c8:	71 05       	cpc	r23, r1
    59ca:	08 95       	ret
    59cc:	9b 01       	movw	r18, r22
    59ce:	ac 01       	movw	r20, r24
    59d0:	0a 2e       	mov	r0, r26
    59d2:	06 94       	lsr	r0
    59d4:	57 95       	ror	r21
    59d6:	47 95       	ror	r20
    59d8:	37 95       	ror	r19
    59da:	27 95       	ror	r18
    59dc:	ba 95       	dec	r27
    59de:	c9 f7       	brne	.-14     	; 0x59d2 <__ultoa_invert+0xa2>
    59e0:	62 0f       	add	r22, r18
    59e2:	73 1f       	adc	r23, r19
    59e4:	84 1f       	adc	r24, r20
    59e6:	95 1f       	adc	r25, r21
    59e8:	a0 1d       	adc	r26, r0
    59ea:	08 95       	ret

000059ec <_exit>:
    59ec:	f8 94       	cli

000059ee <__stop_program>:
    59ee:	ff cf       	rjmp	.-2      	; 0x59ee <__stop_program>
